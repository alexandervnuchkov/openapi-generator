{"version":3,"file":"index.rapidoc-min.js","mappings":";;AAuRA;AACA;AACA;AAGA;AAIA;AAIA;AAGA;;;AAIA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AAEA;;AAIA;AACA;AACA;;AAGA;;AAIA;AACA;;;;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;;AAIA;AACA;;;AAIA;;AAMA;AAuBA;;;;AAIA;AAEA;;AAEA;;AAGA;;AAIA;AACA;;;AAGA;AACA;AAEA;AACA;AACA;;AAGA;;AAIA;AACA;;AAGA;;AAIA;;;AAKA;AAGA;;;AAGA;AACA;AACA;AAEA;AAGA;;;;;AAOA;AACA;;AAEA;;;AAGA;;AAEA;;;AAIA;;;AAKA;;;AAGA;;AAIA;;;AA5FA;;;;;;;AAwIA;;AAEA;AAEA;;;AAGA;;;AAKA;;AAGA;;;;;AAOA;;AAEA;AAKA;;AAGA;AAGA;AAEA;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;;;;;AAOA;;;AAOA;;;ACxjBA;;AAWA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;;AC3BA;;AAEA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAcA;;;ACtCA;;AAEA;;AAGA;AAYA;;AAEA;;AAEA;AACA;;;AAGA;AAGA;ACjBA;;AAEA;AACA;;AAGA;AACA;;AAEA;;AAGA;AAIA;AAGA;;AASA;AA0BA;AACA;AASA;AA0DA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAEA;;AAEA;;AAEA;AACA;AAGA;AACA;;;;AA2BA;AASA;AA4BA;AACA;AACA;AACA;AAKA;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;ACpQA;AACA;;AAGA;ACuFA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AAkDA;;;AAGA;AACA;AACA;AACA;;AAWA;;AAGA;AAEA;AAIA;AACA;AAKA;;AAEA;AACA;AACA;;;AAIA;ACrEA;AD4JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;AAGA;AAEA;;;AAMA;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAIA;;AAKA;AAOA;AACA;;AAEA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;AAQA;AAGA;;;;;AAKA;AACA;;;AAGA;;AAGA;AAuEA;AACA;AACA;AACA;;;AAOA;AAqBA;;AAEA;AAGA;AACA;AACA;;;;AAIA;AAIA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;AAQA;;AAoBA;;AAOA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAIA;;;AAmBA;AAiBA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAEA;AACA;AACA;AACA;;;;AAMA;AAgBA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AAGA;;;;;;AAMA;AACA;;;;;;;;AAQA;;;AAIA;AACA;AACA;;;AAGA;;;AAGA;AAEA;AAGA;AAEA;;AAEA;;;AAGA;AACA;AACA;;;;;AAQA;;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;;AAGA;;;AAMA;;;;AAOA;AACA;;;AAKA;;AAGA;;AAGA;;AAIA;;;;AAIA;AACA;;AAEA;AAEA;;AAuBA;;;;AAIA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;;;AAGA;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAGA;AAOA;AACA;;AAIA;;AAEA;AACA;;;AAIA;;AAEA;;AAMA;;;;AAIA;;;;AAIA;AAEA;AAEA;AAGA;;;;AAQA;AAIA;;;AAGA;;AAEA;AAEA;AAEA;AAEA;;;;AE/8BA;AACA;;AAGA;;AAGA;;;;;;AASA;AAGA;;;AAUA;AAyBA;AACA;AACA;AAUA;AAqCA;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AACA;;AAEA;;AAEA;AAEA;;;;AAKA;;;;AAIA;;;AAKA;AAIA;AACA;;;;AAgCA;AAWA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;ACxOA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA;AAGA;AAEA;;AAIA;AACA;;;AAGA;AAEA;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAKA;AACA;AACA;AACA;;AAEA;;;;AAQA;;;AAfA;;AC9GA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;;AAQA;AACA;AACA;AACA;;AAGA;AACA;;;AAKA;AAKA;AACA;AACA;;AAEA;;;;AAIA;;;AAVA;;AC9CA;AACA;;AAGA;AACA;;AAEA;AAFA;;;AAMA;AAGA;AACA;AAEA;AAIA;AAGA;AAKA;AAIA;;AAIA;AACA;AAGA;;;;AAMA;;AASA;;AAMA;;;ACtCA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;;AAIA;AACA;AACA;;AAGA;AACA;;AAGA;;;;;AAMA;AACA;AACA;;;;AAIA;;;AAMA;AAOA;;;AAGA;AAEA;AAGA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAbA;AAkBA;AAEA;AAGA;AACA;;AAJA;;;AASA;AAGA;ACvHA;AAMA;;;;ACoCA;AACA;;AAEA;AAGA;AACA;;;;;;;AASA;;;;;AAKA;AAEA;;AAEA;;AAIA;AAIA;;;;;;AAOA;AAEA;AAGA;AAEA;AAEA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;AAEA;AAEA;;AA1BA;;AA+BA;;AAGA;;;;AAMA;AAGA;AACA;;;;;;AAOA;AAIA;AACA;;;;AAMA;AACA;AACA;AACA;;AASA;;;AAGA;;;;;AASA;AAGA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAOA;;;AASA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AAGA;AAEA;;;;;;;;;AAUA;;;;;AAOA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;;AAGA;;;;;;;;AAUA;;ACtPA;AAEA;AAiBA;AACA;;AAGA;AAKA;AAKA;;;AAsBA;AC5BA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AAEA;;AAIA;;AAKA;AAqBA;;AAEA;AAKA;;AAIA;;AAIA;;AAIA;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAKA;;AAGA;;;;AAIA;;;;AAIA;AAEA;AAEA;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AAMA;AACA;AACA;;;AAGA;;AAIA;AAMA;AACA;AACA;;;;AAnDA;;;;ACvKA;AAEA;;;;ACMA;;;AAGA;;;;;;AAQA;AACA;;;;;AAKA;;;;;AAQA;AACA;;;AAGA;;;AAGA;AAIA;;;;AAIA;AAIA;;;;;ADpDA;AEuDA;AACA;AACA;;;AAGA;;;AAIA;AAgDA;AAEA;AACA;;AAIA;AAQA;AACA;;AAEA;AACA;;;AAMA;AAEA;;AAEA;AACA;;AAIA;;;AAMA;;;AAGA;;;;AAOA;;;AAMA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;AAKA;AAIA;AACA;AAEA;AAkBA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAGA;AACA;;AAEA;;;;;AA1CA;AACA;AAkDA;AASA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzBA;AACA;AA4BA;;;ACzRA;;;;;;;;;AASA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;AAMA;;;AAGA;AACA;;AAEA;;AAQA;AAEA;AACA;;;;AAMA;ACrBA;;;;AAKA;AACA;;;;;;AAMA;;;;;;;;;ACsKA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;ACpSA;AACA;AAGA;AACA;;AAEA;;;;AAIA;AACA;;;AAKA;AAEA;;;AAGA;;;;AAOA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;;;AAQA;AAEA;AAGA;AAGA;AACA;AAGA;AACA;AACA;;;;AAIA;;;;;;;;AAeA;;;;;;;;;AC7FA;;;;;;AAMA;AACA;AACA;;AAIA;;;;AAMA;AAKA;;AAEA;AAIA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;;AAEA;AAGA;;AAGA;AACA;;AAEA;;;;;;AAUA;AAwBA;AACA;AAGA;AACA;;AAEA;;;;;AAKA;AACA;;;AAKA;AAEA;;;AAGA;;;;AAOA;AACA;;;AAGA;;AAEA;;;AAGA;;;;;AAKA;AACA;AAGA;AAGA;AACA;;;;;;;AAUA","sources":["webpack://rapidoc/./src/templates/security-scheme-template.js","webpack://rapidoc/./src/templates/code-samples-template.js","webpack://rapidoc/./src/templates/callback-template.js","webpack://rapidoc/./src/components/json-tree.js","webpack://rapidoc/./src/components/schema-tree.js","webpack://rapidoc/./src/components/tag-input.js","webpack://rapidoc/./src/components/api-request.js","webpack://rapidoc/./src/utils/schema-utils.js","webpack://rapidoc/./src/components/schema-table.js","webpack://rapidoc/./src/templates/expanded-endpoint-template.js","webpack://rapidoc/./src/templates/components-template.js","webpack://rapidoc/./src/templates/overview-template.js","webpack://rapidoc/./src/templates/server-template.js","webpack://rapidoc/./src/templates/navbar-add-template.js","webpack://rapidoc/./src/templates/navbar-template.js","webpack://rapidoc/./src/templates/focused-endpoint-template.js","webpack://rapidoc/./src/templates/endpoint-template.js","webpack://rapidoc/./src/templates/logo-template.js","webpack://rapidoc/./src/templates/header-template.js","webpack://rapidoc/./src/components/api-response.js","webpack://rapidoc/./src/templates/advance-search-template.js","webpack://rapidoc/./src/components/dialog-box.js","webpack://rapidoc/./src/utils/theme.js","webpack://rapidoc/./src/templates/main-body-template.js","webpack://rapidoc/./src/templates/json-schema-viewer-template.js"],"sourcesContent":["/* eslint-disable arrow-body-style */\nimport { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\n\nconst codeVerifier = '731DB1C3F7EA533B85E29492D26AA-1234567890-1234567890';\nconst codeChallenge = '4FatVDBJKPAo4JgLLaaQFMUcQPn5CrPRvLlaob9PTYc'; // Base64 encoded SHA-256\n\nconst localStorageKey = 'rapidoc';\n\nexport function applyApiKey(securitySchemeId, username = '', password = '', providedApikeyVal = '') {\n  const securityObj = this.resolvedSpec.securitySchemes?.find((v) => (v.securitySchemeId === securitySchemeId));\n  if (!securityObj) {\n    return false;\n  }\n  let finalApiKeyValue = '';\n  if (securityObj.scheme?.toLowerCase() === 'basic') {\n    if (username) {\n      finalApiKeyValue = `Basic ${btoa(`${username}:${password}`)}`;\n    }\n  } else if (providedApikeyVal) {\n    securityObj.value = providedApikeyVal;\n    finalApiKeyValue = `${securityObj.scheme?.toLowerCase() === 'bearer' ? 'Bearer ' : ''}${providedApikeyVal}`;\n  }\n  if (finalApiKeyValue) {\n    securityObj.finalKeyValue = finalApiKeyValue;\n    this.requestUpdate();\n    return true;\n  }\n  return false;\n}\n\nexport function onClearAllApiKeys() {\n  this.resolvedSpec.securitySchemes?.forEach((v) => {\n    v.user = '';\n    v.password = '';\n    v.value = '';\n    v.finalKeyValue = '';\n  });\n  this.requestUpdate();\n}\n\nfunction getPersistedApiKeys() {\n  return JSON.parse(localStorage.getItem(localStorageKey)) || {};\n}\n\nfunction setPersistedApiKeys(obj) {\n  localStorage.setItem(localStorageKey, JSON.stringify(obj));\n}\n\nexport function recoverPersistedApiKeys() {\n  const rapidocLs = getPersistedApiKeys.call(this);\n  Object.values(rapidocLs).forEach((p) => {\n    applyApiKey.call(this, p.securitySchemeId, p.username, p.password, p.value);\n  });\n}\n\nfunction onApiKeyChange(securitySchemeId) {\n  let apiKeyValue = '';\n  const securityObj = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === securitySchemeId));\n  if (securityObj) {\n    const trEl = this.shadowRoot.getElementById(`security-scheme-${securitySchemeId}`);\n    if (trEl) {\n      if (securityObj.type && securityObj.scheme && securityObj.type === 'http' && securityObj.scheme.toLowerCase() === 'basic') {\n        const userVal = trEl.querySelector('.api-key-user').value.trim();\n        const passwordVal = trEl.querySelector('.api-key-password').value.trim();\n        applyApiKey.call(this, securitySchemeId, userVal, passwordVal);\n      } else {\n        apiKeyValue = trEl.querySelector('.api-key-input').value.trim().replace(/^/, 'ApiKey ');\n        applyApiKey.call(this, securitySchemeId, '', '', apiKeyValue);\n      }\n      if (this.persistAuth === 'true') {\n        const rapidocLs = getPersistedApiKeys.call(this);\n        rapidocLs[securitySchemeId] = securityObj;\n        setPersistedApiKeys.call(this, rapidocLs);\n      }\n    }\n  }\n}\n\n// Updates the OAuth Access Token (API key), so it reflects in UI and gets used in TRY calls\nfunction updateOAuthKey(securitySchemeId, accessToken, tokenType = 'Bearer') {\n  const securityObj = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === securitySchemeId));\n  securityObj.finalKeyValue = `${(tokenType.toLowerCase() === 'bearer' ? 'Bearer' : (tokenType.toLowerCase() === 'mac' ? 'MAC' : tokenType))} ${accessToken}`;\n  this.requestUpdate();\n}\n\n/* eslint-disable no-console */\n// Gets Access-Token in exchange of Authorization Code\nasync function fetchAccessToken(tokenUrl, clientId, clientSecret, redirectUrl, grantType, authCode, securitySchemeId, authFlowDivEl, sendClientSecretIn = 'header', scopes = null, username = null, password = null) {\n  const respDisplayEl = authFlowDivEl ? authFlowDivEl.querySelector('.oauth-resp-display') : undefined;\n  const urlFormParams = new URLSearchParams();\n  const headers = new Headers();\n  urlFormParams.append('grant_type', grantType);\n  if (grantType !== 'client_credentials' && grantType !== 'password') {\n    urlFormParams.append('redirect_uri', redirectUrl);\n  }\n  if (authCode) {\n    urlFormParams.append('code', authCode);\n    urlFormParams.append('code_verifier', codeVerifier); // for PKCE\n  }\n  if (sendClientSecretIn === 'header') {\n    headers.set('Authorization', `Basic ${btoa(`${clientId}:${clientSecret}`)}`);\n  } else {\n    urlFormParams.append('client_id', clientId);\n    urlFormParams.append('client_secret', clientSecret);\n  }\n  if (grantType === 'password') {\n    urlFormParams.append('username', username);\n    urlFormParams.append('password', password);\n  }\n  if (scopes) {\n    urlFormParams.append('scope', scopes);\n  }\n\n  try {\n    const resp = await fetch(tokenUrl, { method: 'POST', headers, body: urlFormParams });\n    const tokenResp = await resp.json();\n    if (resp.ok) {\n      if (tokenResp.token_type && tokenResp.access_token) {\n        updateOAuthKey.call(this, securitySchemeId, tokenResp.access_token, tokenResp.token_type);\n        if (respDisplayEl) {\n          respDisplayEl.innerHTML = '<span class=\"font-green\">Access token received</span>';\n        }\n        return true;\n      }\n    } else {\n      if (respDisplayEl) {\n        respDisplayEl.innerHTML = `<span class=\"font-red\">${tokenResp.error_description || tokenResp.error_description || 'Unable to get access token'}</span>`;\n      }\n      return false;\n    }\n  } catch (err) {\n    if (respDisplayEl) {\n      respDisplayEl.innerHTML = '<span class=\"font-red\">Failed to get access token</span>';\n    }\n    return false;\n  }\n}\n\n// Gets invoked when it receives the Authorization Code from the other window via message-event\nasync function onWindowMessageEvent(msgEvent, winObj, tokenUrl, clientId, clientSecret, redirectUrl, grantType, sendClientSecretIn, securitySchemeId, authFlowDivEl) {\n  sessionStorage.removeItem('winMessageEventActive');\n  winObj.close();\n  if (msgEvent.data.fake) {\n    return;\n  }\n  if (!msgEvent.data) {\n    console.warn('RapiDoc: Received no data with authorization message');\n  }\n  if (msgEvent.data.error) {\n    console.warn('RapiDoc: Error while receiving data');\n  }\n  if (msgEvent.data) {\n    if (msgEvent.data.responseType === 'code') {\n      // Authorization Code flow\n      fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrl, grantType, msgEvent.data.code, securitySchemeId, authFlowDivEl, sendClientSecretIn);\n    } else if (msgEvent.data.responseType === 'token') {\n      // Implicit flow\n      updateOAuthKey.call(this, securitySchemeId, msgEvent.data.access_token, msgEvent.data.token_type);\n    }\n  }\n}\n\n// code_challenge generator for PKCE flow\n// TODO: Implement dynamic generation of code-challenge based on code-verifier\n/*\nasync function generateCodeChallenge() {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  const sha256Hash = await window.crypto.subtle.digest('SHA-256', data); // returns Unit8Array\n  // const utf8Decoder = new TextDecoder();\n  // const b64EncodedSha256 = btoa(utf8Decoder.decode(sha256Hash));\n  const b64EncodedSha256 = base64encode(sha256Hash);\n  return b64EncodedSha256;\n}\n*/\n\nasync function onInvokeOAuthFlow(securitySchemeId, flowType, authUrl, tokenUrl, e) {\n  const authFlowDivEl = e.target.closest('.oauth-flow');\n  const clientId = authFlowDivEl.querySelector('.oauth-client-id') ? authFlowDivEl.querySelector('.oauth-client-id').value.trim() : '';\n  const clientSecret = authFlowDivEl.querySelector('.oauth-client-secret') ? authFlowDivEl.querySelector('.oauth-client-secret').value.trim() : '';\n  const username = authFlowDivEl.querySelector('.api-key-user') ? authFlowDivEl.querySelector('.api-key-user').value.trim() : '';\n  const password = authFlowDivEl.querySelector('.api-key-password') ? authFlowDivEl.querySelector('.api-key-password').value.trim() : '';\n  const sendClientSecretIn = authFlowDivEl.querySelector('.oauth-send-client-secret-in') ? authFlowDivEl.querySelector('.oauth-send-client-secret-in').value.trim() : 'header';\n  const checkedScopeEls = [...authFlowDivEl.querySelectorAll('.scope-checkbox:checked')];\n  const pkceCheckboxEl = authFlowDivEl.querySelector(`#${securitySchemeId}-pkce`);\n  const state = (`${Math.random().toString(36)}random`).slice(2, 9);\n  const nonce = (`${Math.random().toString(36)}random`).slice(2, 9);\n  // const codeChallenge = await generateCodeChallenge(codeVerifier);\n  const redirectUrlObj = new URL(`${window.location.origin}${window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/'))}/${this.oauthReceiver}`);\n  let grantType = '';\n  let responseType = '';\n  let newWindow;\n\n  // clear previous error messages\n  const errEls = [...authFlowDivEl.parentNode.querySelectorAll('.oauth-resp-display')];\n  errEls.forEach((v) => { v.innerHTML = ''; });\n\n  if (flowType === 'authorizationCode' || flowType === 'implicit') {\n    const authUrlObj = new URL(authUrl);\n    if (flowType === 'authorizationCode') {\n      grantType = 'authorization_code';\n      responseType = 'code';\n    } else if (flowType === 'implicit') {\n      responseType = 'token';\n    }\n    const authCodeParams = new URLSearchParams(authUrlObj.search);\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\n    if (selectedScopes) {\n      authCodeParams.set('scope', selectedScopes);\n    }\n    authCodeParams.set('client_id', clientId);\n    authCodeParams.set('redirect_uri', redirectUrlObj.toString());\n    authCodeParams.set('response_type', responseType);\n    authCodeParams.set('state', state);\n    authCodeParams.set('nonce', nonce);\n    if (pkceCheckboxEl && pkceCheckboxEl.checked) {\n      authCodeParams.set('code_challenge', codeChallenge);\n      authCodeParams.set('code_challenge_method', 'S256');\n    }\n    authCodeParams.set('show_dialog', true);\n    authUrlObj.search = authCodeParams.toString();\n    // If any older message-event-listener is active then fire a fake message to remove it (these are single time listeners)\n    if (sessionStorage.getItem('winMessageEventActive') === 'true') {\n      window.postMessage({ fake: true }, this);\n    }\n    setTimeout(() => {\n      newWindow = window.open(authUrlObj.toString());\n      if (!newWindow) {\n        console.error(`RapiDoc: Unable to open ${authUrlObj.toString()} in a new window`);\n      } else {\n        sessionStorage.setItem('winMessageEventActive', 'true');\n        window.addEventListener(\n          'message',\n          (msgEvent) => onWindowMessageEvent.call(this, msgEvent, newWindow, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, sendClientSecretIn, securitySchemeId, authFlowDivEl),\n          { once: true },\n        );\n      }\n    }, 10);\n  } else if (flowType === 'clientCredentials') {\n    grantType = 'client_credentials';\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\n    fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, '', securitySchemeId, authFlowDivEl, sendClientSecretIn, selectedScopes);\n  } else if (flowType === 'password') {\n    grantType = 'password';\n    const selectedScopes = checkedScopeEls.map((v) => v.value).join(' ');\n    fetchAccessToken.call(this, tokenUrl, clientId, clientSecret, redirectUrlObj.toString(), grantType, '', securitySchemeId, authFlowDivEl, sendClientSecretIn, selectedScopes, username, password);\n  }\n}\n/* eslint-enable no-console */\n\n/* eslint-disable indent */\n\nfunction oAuthFlowTemplate(flowName, clientId, clientSecret, securitySchemeId, authFlow, defaultScopes = [], receiveTokenIn = 'header') {\n  let { authorizationUrl, tokenUrl, refreshUrl } = authFlow;\n  const isUrlAbsolute = (url) => (url.indexOf('://') > 0 || url.indexOf('//') === 0);\n  if (refreshUrl && !isUrlAbsolute(refreshUrl)) {\n    refreshUrl = `${this.selectedServer.computedUrl}/${refreshUrl.replace(/^\\//, '')}`;\n  }\n  if (tokenUrl && !isUrlAbsolute(tokenUrl)) {\n    tokenUrl = `${this.selectedServer.computedUrl}/${tokenUrl.replace(/^\\//, '')}`;\n  }\n  if (authorizationUrl && !isUrlAbsolute(authorizationUrl)) {\n    authorizationUrl = `${this.selectedServer.computedUrl}/${authorizationUrl.replace(/^\\//, '')}`;\n  }\n  let flowNameDisplay;\n  if (flowName === 'authorizationCode') {\n    flowNameDisplay = 'Authorization Code Flow';\n  } else if (flowName === 'clientCredentials') {\n    flowNameDisplay = 'Client Credentials Flow';\n  } else if (flowName === 'implicit') {\n    flowNameDisplay = 'Implicit Flow';\n  } else if (flowName === 'password') {\n    flowNameDisplay = 'Password Flow';\n  } else {\n    flowNameDisplay = flowName;\n  }\n  return html`\n    <div class=\"oauth-flow oth-flw ${flowName}\">\n      <div class=\"tiny-title upper mbottom-8\">${flowNameDisplay}</div>\n      ${authorizationUrl\n        ? html`<div class=\"mbottom-5\"><span class=\"oth-url\">Auth URL</span> <span class=\"mono-font\"> ${authorizationUrl} </span></div>`\n        : ''\n      }\n      ${tokenUrl\n        ? html`<div class=\"mbottom-5\"><span class=\"oth-url\">Token URL</span> <span class=\"mono-font\">${tokenUrl}</span></div>`\n        : ''\n      }\n      ${refreshUrl\n        ? html`<div class=\"mbottom-5\"><span class=\"oth-url\">Refresh URL</span> <span class=\"mono-font\">${refreshUrl}</span></div>`\n        : ''\n      }\n      ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'implicit' || flowName === 'password'\n        ? html`\n          ${authFlow.scopes\n            ? html`\n              <span> Scopes </span>\n              <div class=\"oauth-scopes oth-scps\" part=\"section-auth-scopes\">\n                ${Object.entries(authFlow.scopes).map((scopeAndDescr, index) => html`\n                  <div class=\"m-checkbox oth-scps-chbx\">\n                    <input type=\"checkbox\" part=\"checkbox checkbox-auth-scope\" class=\"scope-checkbox\" id=\"${securitySchemeId}${flowName}${index}\" ?checked=\"${defaultScopes.includes(scopeAndDescr[0])}\" value=\"${scopeAndDescr[0]}\">\n                    <label for=\"${securitySchemeId}${flowName}${index}\" class=\"oth-scps-chbx-lbl\">\n                      <span class=\"mono-font\">${scopeAndDescr[0]}</span>\n                        ${scopeAndDescr[0] !== scopeAndDescr[1] ? ` - ${scopeAndDescr[1] || ''}` : ''}\n                    </label>\n                  </div>\n                `)}\n              </div>\n            `\n            : ''\n          }\n          ${flowName === 'password'\n            ? html`\n              <div class=\"oth-psw-blk\">\n                <input type=\"text\" value=\"\" placeholder=\"username\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} api-key-user\" part=\"textbox textbox-username\">\n                <input type=\"password\" value=\"\" placeholder=\"password\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} api-key-password oth-psw-input\" part=\"textbox textbox-password\">\n              </div>`\n            : ''\n          }\n          <div>\n            ${flowName === 'authorizationCode'\n              ? html`\n                <div class=\"oth-code\">\n                  <input type=\"checkbox\" part=\"checkbox checkbox-auth-scope\" id=\"${securitySchemeId}-pkce\" checked>\n                  <label for=\"${securitySchemeId}-pkce\" class=\"oth-code-label\">\n                   Send Proof Key for Code Exchange (PKCE)\n                  </label>\n                </div>\n              `\n              : ''\n            }\n            <input type=\"text\" part=\"textbox textbox-auth-client-id\" value = \"${clientId || ''}\" placeholder=\"client-id\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} oauth-client-id\">\n            ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'password'\n              ? html`\n                <input type=\"password\" part=\"textbox textbox-auth-client-secret\" value=\"${clientSecret || ''}\" placeholder=\"client-secret\" spellcheck=\"false\" class=\"oauth2 ${flowName} ${securitySchemeId} oauth-client-secret\">\n                ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'password'\n                  ? html`\n                    <select class=\"${flowName} ${securitySchemeId} oauth-send-client-secret-in\">\n                      <option value='header' .selected = ${receiveTokenIn === 'header'} > Authorization Header </option>\n                      <option value='request-body' .selected = ${receiveTokenIn === 'request-body'}> Request Body </option>\n                    </select>`\n                  : ''\n                }`\n              : ''\n            }\n            ${flowName === 'authorizationCode' || flowName === 'clientCredentials' || flowName === 'implicit' || flowName === 'password'\n              ? html`\n                <button class=\"m-btn thin-border\" part=\"btn btn-outline\"\n                  @click=\"${(e) => { onInvokeOAuthFlow.call(this, securitySchemeId, flowName, authorizationUrl, tokenUrl, e); }}\"\n                > GET TOKEN </button>`\n              : ''\n            }\n          </div>\n          <div class=\"oauth-resp-display red-text small-font-size\"></div>\n          `\n        : ''\n      }\n    </div>\n  `;\n}\n\nfunction removeApiKey(securitySchemeId) {\n  const securityObj = this.resolvedSpec.securitySchemes?.find((v) => (v.securitySchemeId === securitySchemeId));\n  securityObj.user = '';\n  securityObj.password = '';\n  securityObj.value = '';\n  securityObj.finalKeyValue = '';\n  if (this.persistAuth === 'true') {\n    const rapidocLs = getPersistedApiKeys.call(this);\n    delete rapidocLs[securityObj.securitySchemeId];\n    setPersistedApiKeys.call(this, rapidocLs);\n  }\n  this.requestUpdate();\n}\n\nexport default function securitySchemeTemplate() {\n  if (!this.resolvedSpec) { return ''; }\n  const providedApiKeys = this.resolvedSpec.securitySchemes?.filter((v) => (v.finalKeyValue));\n  if (!providedApiKeys) {\n    return;\n  }\n  return html`\n  <section id='auth' part=\"section-auth\" class='sctn-servers observe-me ${'read focused'.includes(this.renderStyle) ? 'section-gap--read-mode' : 'section-gap '}'>\n    <div class='sub-title regular-font'>Authentication</div>\n\n    <div class=\"small-font-size auth-subhdr\">\n      ${providedApiKeys.length > 0\n        ? html`\n          <div class=\"blue-text\"> ${providedApiKeys.length} API key applied </div>\n          <div class=\"request-flex-inline\"></div>\n          <button class=\"m-btn thin-border\" part=\"btn btn-outline\" @click=${() => { onClearAllApiKeys.call(this); }}>CLEAR ALL API KEYS</button>`\n        : html`<div class=\"red-text\">No API key applied</div>`\n      }\n    </div>\n    ${this.resolvedSpec.securitySchemes && this.resolvedSpec.securitySchemes.length > 0\n      ? html`\n        <table id=\"auth-table\" class='m-table padded-12 full-width'>\n          ${this.resolvedSpec.securitySchemes.map((v) => html`\n            <tr id=\"security-scheme-${v.securitySchemeId}\" class=\"${v.type.toLowerCase()}\">\n              <td>\n                <div class=\"auth-hdr2\">\n                  <span class=\"auth-hdr2-span\">${v.typeDisplay}</span>\n                  ${v.finalKeyValue\n                    ? html`\n                      <span class='blue-text'>  ${v.finalKeyValue ? 'Key Applied' : ''} </span>\n                      <button class=\"m-btn thin-border small\" part=\"btn btn-outline\" @click=${() => { removeApiKey.call(this, v.securitySchemeId); }}>REMOVE</button>\n                      `\n                    : ''\n                  }\n                </div>\n                ${v.description\n                  ? html`\n                    <div class=\"m-markdown\">\n                      ${unsafeHTML(marked(v.description || ''))}\n                    </div>`\n                  : ''\n                }\n\n                ${(v.type.toLowerCase() === 'apikey') || (v.type.toLowerCase() === 'http' && v.scheme.toLowerCase() === 'bearer')\n                  ? html`\n                    <div class=\"m-markdown mbottom-5\">\n                      ${v.type.toLowerCase() === 'apikey'\n                        ? html`<p>Send <code>${v.name}</code> in the request ${v.in} containing the <code>ApiKey</code> word followed by a space and a key string.</p>`\n                        : html`Send <code>Authorization</code> in the request header containing the <code>Bearer</code> word followed by a space and a token String.`\n                      }\n                    </div>\n                    <div class=\"auth-npt\">\n                      ${v.in !== 'cookie'\n                        ? html`\n                          <input type=\"text\" id=\"inputApiKeyForm\" value=\"${v.value.replace('ApiKey ', '')}\" class=\"${v.type} ${v.securitySchemeId} api-key-input auth-nptfld\" placeholder=\"API key\" spellcheck=\"false\">\n                          <button class=\"m-btn thin-border auth-btn\"\n                            part = \"btn btn-outline\"\n                            @click=\"${(e) => { onApiKeyChange.call(this, v.securitySchemeId, e); }}\">\n                            ${v.finalKeyValue ? 'UPDATE' : 'SET'}\n                          </button>`\n                        : html`<span class=\"gray-text auth-errr\"> cookies cannot be set from here</span>`\n                      }\n                    </div>`\n                  : ''\n                }\n                ${v.type.toLowerCase() === 'http' && v.scheme.toLowerCase() === 'basic'\n                  ? html`\n                    <div class=\"mbottom-5\">\n                      Send <code>Authorization</code> in <code>header</code> containing the word <code>Basic</code> followed by a space and a base64 encoded string of <code>username:password</code>.\n                    </div>\n                    <div>\n                      <input type=\"text\" value = \"${v.user}\" placeholder=\"username\" spellcheck=\"false\" class=\"${v.type} ${v.securitySchemeId} api-key-user full-width\">\n                      <input type=\"password\" value = \"${v.password}\" placeholder=\"password\" spellcheck=\"false\" class=\"${v.type} ${v.securitySchemeId} api-key-password full-width oth-psw-input\">\n                      <button class=\"m-btn thin-border\"\n                        @click=\"${(e) => { onApiKeyChange.call(this, v.securitySchemeId, e); }}\"\n                        part = \"btn btn-outline\"\n                      >\n                        ${v.finalKeyValue ? 'UPDATE' : 'SET'}\n                      </button>\n                    </div>`\n                  : ''\n                }\n              </td>\n            </tr>\n            ${v.type.toLowerCase() === 'oauth2'\n              ? html`\n                <tr>\n                  <td class=\"oth2-table\">\n                    ${Object.keys(v.flows).map((f) => oAuthFlowTemplate.call(this, f, v['x-client-id'], v['x-client-secret'], v.securitySchemeId, v.flows[f], v['x-default-scopes'], v['x-receive-token-in']))}\n                  </td>\n                </tr>\n                `\n              : ''\n            }\n          `)}\n        </table>`\n      : ''\n    }\n    <slot name=\"auth\"></slot>\n  </section>\n`;\n}\n\nexport function pathSecurityTemplate(pathSecurity) {\n  if (this.resolvedSpec.securitySchemes && pathSecurity) {\n    const orSecurityKeys1 = [];\n    pathSecurity.forEach((pSecurity) => {\n      const andSecurityKeys1 = [];\n      const andKeyTypes = [];\n      if (Object.keys(pSecurity).length === 0) {\n        orSecurityKeys1.push({\n          securityTypes: 'None',\n          securityDefs: [],\n        });\n      } else {\n        Object.keys(pSecurity).forEach((pathSecurityKey) => {\n          let pathScopes = '';\n          const s = this.resolvedSpec.securitySchemes.find((ss) => ss.securitySchemeId === pathSecurityKey);\n          if (pSecurity[pathSecurityKey] && Array.isArray(pSecurity[pathSecurityKey])) {\n            pathScopes = pSecurity[pathSecurityKey].join(', ');\n          }\n          if (s) {\n            andKeyTypes.push(s.typeDisplay);\n            andSecurityKeys1.push({ ...s, ...({ scopes: pathScopes }) });\n          }\n        });\n        orSecurityKeys1.push({\n          securityTypes: andKeyTypes.length > 1 ? `${andKeyTypes[0]} + ${andKeyTypes.length - 1} more` : andKeyTypes[0],\n          securityDefs: andSecurityKeys1,\n        });\n      }\n    });\n    return html`<div class=\"oth2-insection\">\n      <div class=\"oth2-ins-block\">\n        <svg width=\"16\" height=\"24\">\n          <g>\n            <path style=\"fill: var(--fg3)\" d=\"m13.8,8.5l0,-2.6l0,0c0,-3.2 -2.6,-5.8 -5.8,-5.8s-5.8,2.6 -5.8,5.8l0,0l0,2.6l-2.1,0l0,11.2l16,0l0,-11.2l-2.1,0l-0,0l0,0l0,0l-0,0zm-9.8,-2.6c0,0 0,0 0,0c0,-2.2 1.8,-4 4,-4c2.2,0 4,1.8 4,4c0,0 0,0 0,0l0,2.6l-8.03,0l0,-2.6l0,0l0,0z\" />\n          </g>\n        </svg>\n          ${orSecurityKeys1.map((orSecurityItem1, i) => html`\n\n          ${orSecurityItem1.securityTypes\n            ? html`\n              ${i !== 0 ? html`<div class=\"oth2-btip\"> OR </div>` : ''}\n              <div class=\"tooltip\">\n                <div class=\"oth2-state\">\n                  ${this.updateRoute === 'true' && this.allowAuthentication === 'true'\n                    ? html`<a part=\"anchor anchor-operation-security\" href=\"#auth\"> ${orSecurityItem1.securityTypes} </a>`\n                    : html`${orSecurityItem1.securityTypes}`\n                  }\n                </div>\n                <div class=\"tooltip-text oth2-ttip\">\n                  ${orSecurityItem1.securityDefs.length > 1 ? html`<div>Requires <b>all</b> of the following </div>` : ''}\n                  <div>\n                    ${orSecurityItem1.securityDefs.map((andSecurityItem, j) => {\n                      const scopeHtml = html`${andSecurityItem.scopes !== ''\n                        ? html`\n                          <div>\n                            <b>Required scopes:</b>\n                            <br/>\n                            <div class=\"mleft-8\">\n                              ${andSecurityItem.scopes.split(',').map((scope, cnt) => html`${cnt === 0 ? '' : '┃'}<span>${scope}</span>`)}\n                            </div>\n                          </div>`\n                        : ''\n                      }`;\n\n                      return html`\n                      ${andSecurityItem.type === 'oauth2'\n                        ? html`\n                          <div>\n                            ${orSecurityItem1.securityDefs.length > 1\n                              ? html`<b>${j + 1}.</b> &nbsp;`\n                              : 'Needs'\n                            }\n                            API key <span class=\"oth2-ttext\">${andSecurityItem.securitySchemeId}</span> in <b>Authorization header</b>\n                            ${scopeHtml}\n                          </div>`\n                        : andSecurityItem.type === 'http'\n                          ? html`\n                            <div>\n                              ${orSecurityItem1.securityDefs.length > 1 ? html`<b>${j + 1}.</b> &nbsp;` : html`Requires`}\n                              ${andSecurityItem.scheme === 'basic' ? 'Base 64 encoded username:password' : 'Bearer token'} in <b>Authorization header</b>\n                              ${scopeHtml}\n                            </div>`\n                          : html`\n                            <div>\n                              ${orSecurityItem1.securityDefs.length > 1 ? html`<b>${j + 1}.</b> &nbsp;` : html`Requires`}\n                              API key in <b>${andSecurityItem.name} ${andSecurityItem.in}</b>\n                              ${scopeHtml}\n                            </div>`\n                      }`;\n                    })}\n                  </div>\n                </div>\n              </div>\n            `\n            : ''\n          }\n        `)\n        }\n      </div>\n    `;\n  }\n  return '';\n}\n\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport Prism from 'prismjs';\nimport { copyToClipboard } from '~/utils/common-utils';\n\n/* eslint-disable indent */\nexport default function codeSamplesTemplate(xCodeSamples) {\n  return html`\n  <section class=\"table-title lng-sample-title\">Language</div>\n  <div class=\"tab-panel col lng-sample-tabs\"\n    @click=\"${\n      (e) => {\n        if (!e.target.classList.contains('tab-btn')) { return; }\n        const clickedTab = e.target.dataset.tab;\n\n        const tabButtons = [...e.currentTarget.querySelectorAll('.tab-btn')];\n        const tabContents = [...e.currentTarget.querySelectorAll('.tab-content')];\n        tabButtons.forEach((tabBtnEl) => tabBtnEl.classList[tabBtnEl.dataset.tab === clickedTab ? 'add' : 'remove']('active'));\n        tabContents.forEach((tabBodyEl) => { tabBodyEl.style.display = (tabBodyEl.dataset.tab === clickedTab ? 'block' : 'none'); });\n      }\n    }\">\n    <div class=\"tab-buttons row lng-sample-row\">\n      ${xCodeSamples.map((v, i) => html`<button class=\"tab-btn lang-button ${v.lang} ${i === 0 ? 'active' : ''}\" data-tab = '${v.lang}${i}'> ${v.label || v.lang} </button>`)}\n    </div>\n    ${xCodeSamples.map((v, i) => html`\n      <div class=\"tab-content m-markdown\" style=\"display:${i === 0 ? 'block' : 'none'}\" data-tab='${v.lang}${i}'>\n        <button class=\"toolbar-btn copy-button\" @click='${(e) => { copyToClipboard(v.source, e); }}'> Copy </button>\n        <pre><code class=\"language ${v.lang}\">${Prism.languages[v.lang?.toLowerCase()] ? unsafeHTML(Prism.highlight(v.source, Prism.languages[v.lang?.toLowerCase()], v.lang?.toLowerCase())) : v.source}</code></pre>\n        <div class=\"cs-description\">${unsafeHTML(marked(v.description || ''))}</div>\n      </div>`)\n    }\n  </section>`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\n\n/* eslint-disable indent */\nexport default function callbackTemplate(callbacks) {\n  return html`\n    <div class=\"req-res-title marg-top-12\">CALLBACKS</div>\n    ${Object.entries(callbacks).map((kv) => html`\n      <div class=\"tiny-title tiny-title-call\">\n        ${kv[0]}\n        ${Object.entries(kv[1]).map((pathObj) => html`\n          <div class=\"mono-font small-font-size callback-block\">\n            <div class=\"full-width\">\n              ${Object.entries(pathObj[1]).map((method) => html`\n                <div>\n                  <div class=\"marg-top-12\">\n                    <div class=\"method method-fg ${method[0]} cb-method\">\n                      <span class=\"font-gross\"> &#x2944; </span>\n                      ${method[0]}\n                    </div>\n                    <span class=\"cb-pathobj\">${pathObj[0]} </span>\n                  </div>\n                  <div class='expanded-req-resp-container'>\n                    <api-request\n                      class = \"${this.renderStyle}-mode callback full-width\"\n                      callback = \"true\"\n                      method = \"${method[0] || ''}\",\n                      path = \"${pathObj[0] || ''}\"\n                      .parameters = \"${method[1]?.parameters || ''}\"\n                      .request_body = \"${method[1]?.requestBody || ''}\"\n                      fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\n                      allow-try = \"false\"\n                      render-style=\"${this.renderStyle}\"\n                      schema-style = \"${this.schemaStyle}\"\n                      active-schema-tab = \"${this.defaultSchemaTab}\"\n                      schema-expand-level = \"${this.schemaExpandLevel}\"\n                      schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n                      allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n                      schema-hide-read-only = \"false\"\n                      schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : 'true'}\"\n                      fetch-credentials = \"${this.fetchCredentials}\"\n                      exportparts = \"btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\n                        file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param,\n                        anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n                    > </api-request>\n\n                    <api-response\n                      class = \"${this.renderStyle}-mode resp-blk-left\"\n                      callback = \"true\"\n                      .responses=\"${method[1]?.responses}\"\n                      render-style=\"${this.renderStyle}\"\n                      schema-style=\"${this.schemaStyle}\"\n                      active-schema-tab = \"${this.defaultSchemaTab}\"\n                      schema-expand-level = \"${this.schemaExpandLevel}\"\n                      schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n                      allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\n                      schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : 'true'}\"\n                      schema-hide-write-only = \"false\"\n                      exportparts = \"btn:btn, btn-response-status:btn-response-status, btn-selected-response-status:btn-selected-response-status, btn-fill:btn-fill, btn-copy:btn-copy,\n                      schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n                    > </api-response>\n                  </div>\n                </div>\n              `)}\n            </div>\n          </div>\n        `)}\n      </div>\n    `)}\n  `;\n}\n/* eslint-enable indent */\n","import { LitElement, html } from 'lit';\nimport { copyToClipboard } from '~/utils/common-utils';\nimport FontStyles from '~/styles/font-styles';\nimport BorderStyles from '~/styles/border-styles';\nimport InputStyles from '~/styles/input-styles';\nimport JsonTreeStyles from '~/styles/json-tree-styles';\nimport CustomStyles from '~/styles/custom-styles';\n\nexport default class JsonTree extends LitElement {\n  static get properties() {\n    return {\n      data: { type: Object },\n      renderStyle: { type: String, attribute: 'render-style' },\n    };\n  }\n\n  static get styles() {\n    return [\n      FontStyles,\n      BorderStyles,\n      InputStyles,\n      JsonTreeStyles,\n      CustomStyles,\n    ];\n  }\n\n  /* eslint-disable indent */\n  render() {\n    return html`\n      <div class = \"json-tree\" >\n        <div class='toolbar'>\n          <button class=\"toolbar-btn copy-button\" part=\"btn btn-fill btn-copy\" @click='${(e) => { copyToClipboard(JSON.stringify(this.data, null, 2), e); }}'> Copy </button>\n        </div>\n        ${this.generateTree(this.data, true)}\n      </div>\n    `;\n  }\n\n  generateTree(data, isLast = false) {\n    if (data === null) {\n      return html`<div class=\"null json-disp-inline\">null</div>`;\n    }\n    if (typeof data === 'object' && (data instanceof Date === false)) {\n      const detailType = Array.isArray(data) ? 'array' : 'pure_object';\n      if (Object.keys(data).length === 0) {\n        return html`${(Array.isArray(data) ? '[ ],' : '{ },')}`;\n      }\n      return html`\n      <div class=\"open-bracket expanded ${detailType === 'array' ? 'array' : 'object'} \" @click=\"${this.toggleExpand}\" > ${detailType === 'array' ? '[' : '{'}</div>\n      <div class=\"inside-bracket\">\n        ${Object.keys(data).map((key, i, a) => html`\n          <div class=\"item\">\n            ${detailType === 'pure_object' ? html`\"${key}\":` : ''}\n            ${this.generateTree(data[key], i === (a.length - 1))}\n          </div>`)\n        }\n      </div>\n      <div class=\"close-bracket\">${detailType === 'array' ? ']' : '}'}${isLast ? '' : ','}</div>\n      `;\n    }\n\n    return (typeof data === 'string' || data instanceof Date)\n      ? html`<span class=\"${typeof data}\">\"${data}\"</span>${isLast ? '' : ','}`\n      : html`<span class=\"${typeof data}\">${data}</span>${isLast ? '' : ','}`;\n  }\n  /* eslint-enable indent */\n\n  toggleExpand(e) {\n    const openBracketEl = e.target;\n    if (openBracketEl.classList.contains('expanded')) {\n      openBracketEl.classList.replace('expanded', 'collapsed');\n      e.target.innerHTML = e.target.classList.contains('array') ? '[...]' : '{...}';\n    } else {\n      openBracketEl.classList.replace('collapsed', 'expanded');\n      e.target.innerHTML = e.target.classList.contains('array') ? '[' : '{';\n    }\n  }\n}\n// Register the element with the browser\ncustomElements.define('json-tree', JsonTree);\n","import { LitElement, html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport FontStyles from '~/styles/font-styles';\nimport SchemaStyles from '~/styles/schema-styles';\nimport SchemaTreeStyles from '~/styles/schema-tree-styles';\nimport BorderStyles from '~/styles/border-styles';\nimport CustomStyles from '~/styles/custom-styles';\n\nexport default class SchemaTree extends LitElement {\n  static get properties() {\n    return {\n      data: { type: Object },\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\n    if (!this.schemaDescriptionExpanded || !'true false'.includes(this.schemaDescriptionExpanded)) { this.schemaDescriptionExpanded = 'false'; }\n    if (!this.schemaHideReadOnly || !'true false'.includes(this.schemaHideReadOnly)) { this.schemaHideReadOnly = 'true'; }\n    if (!this.schemaHideWriteOnly || !'true false'.includes(this.schemaHideWriteOnly)) { this.schemaHideWriteOnly = 'true'; }\n  }\n\n  static get styles() {\n    return [\n      FontStyles,\n      SchemaStyles,\n      BorderStyles,\n      SchemaTreeStyles,\n      CustomStyles,\n    ];\n  }\n\n  /* eslint-disable indent */\n  render() {\n    return html`\n      <div class=\"tree ${this.schemaDescriptionExpanded === 'true' ? 'expanded-descr' : 'collapsed-descr'}\">\n        <div class=\"toolbar\">\n          <div class=\"toolbar-item schema-root-type ${this.data?.['::type'] || ''} \"> ${this.data?.['::type'] || ''} </div>\n          ${this.allowSchemaDescriptionExpandToggle === 'true'\n            ? html`\n              <div class=\"request-flex-inline\"></div>\n              <div part=\"schema-toolbar-item schema-multiline-toggle\" class='toolbar-item' @click='${() => { this.schemaDescriptionExpanded = (this.schemaDescriptionExpanded === 'true' ? 'false' : 'true'); }}'>\n                ${this.schemaDescriptionExpanded === 'true' ? 'Single line description' : 'Multiline description'}\n              </div>\n            `\n            : ''\n          }\n        </div>\n        ${this.data?.['::description']\n          ? html`<span part=\"schema-description\" class='m-markdown'> ${unsafeHTML(marked(this.data['::description'] || ''))}</span>`\n          : ''\n        }\n        ${this.data\n          ? html`\n            ${this.generateTree(\n              this.data['::type'] === 'array' ? this.data['::props'] : this.data,\n              this.data['::type'],\n              this.data['::array-type'] || '',\n            )}`\n          : html`<span class='mono-font font-red'> Schema not found </span>`\n        }\n      </div>\n    `;\n  }\n\n  generateTree(data, dataType = 'object', arrayType = '', key = '', description = '', schemaLevel = 0, indentLevel = 0, readOrWrite = '') {\n    if (this.schemaHideReadOnly === 'true') {\n      if (dataType === 'array') {\n        if (readOrWrite === 'readonly') {\n          return;\n        }\n      }\n      if (data && data['::readwrite'] === 'readonly') {\n        return;\n      }\n    }\n    if (this.schemaHideWriteOnly === 'true') {\n      if (dataType === 'array') {\n        if (readOrWrite === 'writeonly') {\n          return;\n        }\n      }\n      if (data && data['::readwrite'] === 'writeonly') {\n        return;\n      }\n    }\n\n    if (!data) {\n      return html`<div class=\"null json-disp-inline\">\n        <span class=\"key-label xxx-of-key\"> ${key.replace('::OPTION~', '')}</span>\n        ${\n          dataType === 'array'\n            ? html`<span class='mono-font'> [ ] </span>`\n            : dataType === 'object'\n              ? html`<span class='mono-font'> { } </span>`\n              : html`<span class='mono-font'> schema undefined </span>`\n        }\n      </div>`;\n    }\n    if (Object.keys(data).length === 0) {\n      return html`<span class=\"key object\">${key}:{ }</span>`;\n    }\n    let keyLabel = '';\n    let keyDescr = '';\n    if (key.startsWith('::ONE~OF') || key.startsWith('::ANY~OF')) {\n      keyLabel = key.replace('::', '').replace('~', ' ');\n    } else if (key.startsWith('::OPTION')) {\n      const parts = key.split('~');\n      keyLabel = parts[1]; // eslint-disable-line prefer-destructuring\n      keyDescr = parts[2]; // eslint-disable-line prefer-destructuring\n    } else {\n      keyLabel = key;\n    }\n\n    const leftPadding = 12;\n    const minFieldColWidth = 400 - (indentLevel * leftPadding);\n    let openBracket = '';\n    let closeBracket = '';\n    const newSchemaLevel = data['::type']?.startsWith('xxx-of') ? schemaLevel : (schemaLevel + 1);\n    // const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' ? indentLevel : (indentLevel + 1);\n    const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' || key.startsWith('::OPTION') ? indentLevel : (indentLevel + 1);\n    if (data['::type'] === 'object') {\n      if (dataType === 'array') {\n        if (schemaLevel < this.schemaExpandLevel) {\n          openBracket = html`<span class=\"open-bracket array-of-object\" @click=\"${this.toggleObjectExpand}\">[{</span>`;\n        } else {\n          openBracket = html`<span class=\"open-bracket array-of-object\" @click=\"${this.toggleObjectExpand}\">[{...}]</span>`;\n        }\n        closeBracket = '}]';\n      } else {\n        if (schemaLevel < this.schemaExpandLevel) {\n          openBracket = html`<span class=\"open-bracket object\" @click=\"${this.toggleObjectExpand}\">{</span>`;\n        } else {\n          openBracket = html`<span class=\"open-bracket object\" @click=\"${this.toggleObjectExpand}\">{...}</span>`;\n        }\n        closeBracket = '}';\n      }\n    } else if (data['::type'] === 'array') {\n      if (dataType === 'array') {\n        const arrType = arrayType !== 'object' ? arrayType : '';\n        if (schemaLevel < this.schemaExpandLevel) {\n          openBracket = html`<span class=\"open-bracket array-of-array\" data-array-type=\"${arrType}\" @click=\"${this.toggleObjectExpand}\">[[ ${arrType} </span>`;\n        } else {\n          openBracket = html`<span class=\"open-bracket array-of-array\"  data-array-type=\"${arrType}\" @click=\"${this.toggleObjectExpand}\">[[...]]</span>`;\n        }\n        closeBracket = ']]';\n      } else {\n        if (schemaLevel < this.schemaExpandLevel) {\n          openBracket = html`<span class=\"open-bracket array\" @click=\"${this.toggleObjectExpand}\">[</span>`;\n        } else {\n          openBracket = html`<span class=\"open-bracket array\" @click=\"${this.toggleObjectExpand}\">[...]</span>`;\n        }\n        closeBracket = ']';\n      }\n    }\n    if (typeof data === 'object') {\n      return html`\n        <div class=\"tr ${schemaLevel < this.schemaExpandLevel || data['::type']?.startsWith('xxx-of') ? 'expanded' : 'collapsed'} ${data['::type'] || 'no-type-info'}\" title=\"${data['::deprecated'] ? 'Deprecated' : ''}\">\n          <div class=\"td key ${data['::deprecated'] ? 'deprecated' : ''}\" style='min-width:${minFieldColWidth}px'>\n            ${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' || key.startsWith('::OPTION')\n              ? html`<span class='key-label xxx-of-key'>${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\n              : keyLabel === '::props' || keyLabel === '::ARRAY~OF'\n                ? ''\n                : schemaLevel > 0\n                  ? html`<span class=\"key-label\" title=\"${readOrWrite === 'readonly' ? 'read-only' : readOrWrite === 'writeonly' ? 'write-only' : ''}\">\n                    ${data['::deprecated'] ? '✗' : ''}\n                    ${keyLabel.replace(/\\*$/, '')}${keyLabel.endsWith('*') ? html`<span class=\"param-required\">required</span>` : ''}${readOrWrite === 'readonly' ? html` 🆁` : readOrWrite === 'writeonly' ? html` 🆆` : readOrWrite}:\n                    </span>`\n                  : ''\n            }\n            ${data['::type'] === 'xxx-of' && dataType === 'array' ? html`<span class=\"prim-color\">ARRAY</span>` : ''}\n            ${openBracket}\n          </div>\n          <div class='td key-descr m-markdown-small'>${unsafeHTML(marked(description || ''))}</div>\n        </div>\n        <div class='inside-bracket ${data['::type'] || 'no-type-info'}' style='padding-left:${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' ? 0 : leftPadding}px;'>\n          ${Array.isArray(data) && data[0]\n            ? html`${this.generateTree(data[0], 'xxx-of-option', '', '::ARRAY~OF', '', newSchemaLevel, newIndentLevel, data[0]['::readwrite'])}`\n            : html`\n              ${Object.keys(data).map((dataKey) => html`\n              ${['::title', '::description', '::type', '::props', '::deprecated', '::array-type', '::readwrite', '::dataTypeLabel'].includes(dataKey)\n              ? data[dataKey]['::type'] === 'array' || data[dataKey]['::type'] === 'object'\n                    ? html`${this.generateTree(\n                      data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\n                        data[dataKey]['::type'],\n                        data[dataKey]['::array-type'] || '',\n                        dataKey,\n                        data[dataKey]['::description'],\n                        newSchemaLevel,\n                        newIndentLevel,\n                        data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\n                      )}`\n                    : ''\n                  : html`${this.generateTree(\n                    data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\n                    data[dataKey]['::type'],\n                    data[dataKey]['::array-type'] || '',\n                    dataKey,\n                    data[dataKey]['::description'],\n                    newSchemaLevel,\n                    newIndentLevel,\n                    data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\n                  )}`\n                }\n              `)}\n            `\n          }\n        </div>\n        ${data['::type'] && data['::type'].includes('xxx-of')\n          ? ''\n          : html`<div class='close-bracket'> ${closeBracket} </div>`\n        }\n      `;\n    }\n\n    // For Primitive types and array of Primitives\n    const [type, primitiveReadOrWrite, constraint, defaultValue, allowedValues, pattern, schemaDescription, schemaTitle, deprecated] = data.split('~|~');\n    if (primitiveReadOrWrite === '🆁' && this.schemaHideReadOnly === 'true') {\n      return;\n    }\n    if (primitiveReadOrWrite === '🆆' && this.schemaHideWriteOnly === 'true') {\n      return;\n    }\n    const dataTypeCss = type.replace(/|.*/g, '').replace(/[^a-zA-Z0-9+]/g, '').substring(0, 4).toLowerCase();\n\n    let finalReadWriteText = '';\n    let finalReadWriteTip = '';\n    if (dataType === 'array') {\n      if (readOrWrite === 'readonly') {\n        finalReadWriteText = '🆁';\n        finalReadWriteTip = 'read-only';\n      } else if (readOrWrite === 'writeonly') {\n        finalReadWriteText = '🆆';\n        finalReadWriteTip = 'write-only';\n      }\n    } else if (primitiveReadOrWrite === '🆁') {\n        finalReadWriteText = '🆁';\n        finalReadWriteTip = 'read-only';\n      } else if (primitiveReadOrWrite === '🆆') {\n        finalReadWriteText = '🆆';\n        finalReadWriteTip = 'write-only';\n      }\n\n    return html`\n      <div class = \"tr primitive\" title=\"${deprecated ? 'Deprecated' : ''}\">\n        <div class=\"td key ${deprecated}\" style='min-width:${minFieldColWidth}px' >\n          ${deprecated ? html`<span class='font-red'>✗</span>` : ''}\n          ${keyLabel.endsWith('*')\n            ? html`<span class=\"key-label\">${keyLabel.substring(0, keyLabel.length - 1)}</span><span class='param-required'>required</span>:`\n            : key.startsWith('::OPTION')\n              ? html`<span class='key-label xxx-of-key'>${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\n              : html`<span class=\"key-label\">${keyLabel}:</span>`\n          }\n          <span class=\"${dataTypeCss}\" title=\"${finalReadWriteTip}\">\n            ${dataType === 'array' ? `[${type}]` : `${type}`}\n            ${finalReadWriteText}\n          </span>\n        </div>\n        <div class='td key-descr'>\n          ${dataType === 'array' ? html`<span class=\"m-markdown-small\">${unsafeHTML(marked(description))}</span>` : ''}\n          ${constraint ? html`<div class='key-dscr-pat font-mono'><span class='bold-text font-regl'>Constraints: </span>${constraint}</div>` : ''}\n          ${defaultValue ? html`<div class='key-dscr-pat font-mono'><span class='bold-text font-regl'>Default: </span>${defaultValue}</div>` : ''}\n          ${allowedValues ? html`<div class='key-dscr-pat font-mono'><span class='bold-text font-regl'>Allowed values: </span>${allowedValues}</div>` : ''}\n          ${pattern ? html`<div class='key-dscr-pat font-mono'><span class='bold-text font-regl'>Pattern: </span>${pattern}</div>` : ''}\n          ${schemaDescription ? html`<span class=\"m-markdown-small\">${unsafeHTML(marked(`${schemaTitle ? `**${schemaTitle}:**` : ''} ${schemaDescription}`))}</span>` : ''}\n        </div>\n      </div>\n    `;\n  }\n  /* eslint-enable indent */\n\n  toggleObjectExpand(e) {\n    const rowEl = e.target.closest('.tr');\n    if (rowEl.classList.contains('expanded')) {\n      rowEl.classList.replace('expanded', 'collapsed');\n      e.target.innerHTML = e.target.classList.contains('array-of-object')\n        ? '[{...}]'\n        : e.target.classList.contains('array-of-array')\n          ? '[[...]]'\n          : e.target.classList.contains('array')\n            ? '[...]'\n            : '{...}';\n    } else {\n      rowEl.classList.replace('collapsed', 'expanded');\n      e.target.innerHTML = e.target.classList.contains('array-of-object')\n        ? '[{'\n        : e.target.classList.contains('array-of-array')\n          ? `[[ ${e.target.dataset.arrayType}`\n          : e.target.classList.contains('object')\n            ? '{'\n            : '[';\n    }\n  }\n}\ncustomElements.define('schema-tree', SchemaTree);\n","import { LitElement, html } from 'lit';\nimport TagInputStyles from '~/styles/tag-input-styles';\n\nexport default class TagInput extends LitElement {\n  /* eslint-disable indent */\n  render() {\n    let tagItemTmpl = '';\n    if (Array.isArray(this.value)) {\n      tagItemTmpl = html`${this.value\n        .filter((v) => v.trim() !== '')\n        .map((v) => html`<span class='tag'>${v}</span>`)\n      }`;\n    }\n    return html`\n      <div class='tags' tabindex=\"0\">\n        ${tagItemTmpl}\n        <input type=\"text\" class='editor' @paste=\"${(e) => this.afterPaste(e)}\" @keydown=\"${this.afterKeyDown}\" @blur=\"${this.onBlur}\" placeholder=\"${this.placeholder || ''}\">\n      </div>\n    `;\n  }\n  /* eslint-enable indent */\n\n  static get properties() {\n    return {\n      placeholder: { type: String },\n      value: { type: Array, attribute: 'value' },\n    };\n  }\n\n  attributeChangedCallback(name, oldVal, newVal) {\n    if (name === 'value') {\n      if (newVal && oldVal !== newVal) {\n        this.value = newVal.split(',').filter((v) => v.trim() !== '');\n      }\n    }\n    super.attributeChangedCallback(name, oldVal, newVal);\n  }\n\n  afterPaste(e) {\n    const clipboardData = e.clipboardData || window.clipboardData;\n    const pastedData = clipboardData.getData('Text');\n    const pastedArray = pastedData ? pastedData.split(',').filter((v) => v.trim() !== '') : '';\n    if (pastedArray) {\n      if (Array.isArray(this.value)) {\n        this.value = [...this.value, ...pastedArray];\n      } else {\n        this.value = pastedArray;\n      }\n    }\n    e.preventDefault();\n  }\n\n  afterKeyDown(e) {\n    if (e.keyCode === 13) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (e.target.value) {\n        if (Array.isArray(this.value)) {\n          this.value = [...this.value, e.target.value];\n        } else {\n          this.value = [e.target.value];\n        }\n        e.target.value = '';\n      }\n    } else if (e.keyCode === 8) {\n      if (e.target.value.length === 0) {\n        if (Array.isArray(this.value) && this.value.length > 0) {\n          this.value.splice(-1);\n          this.value = [...this.value];\n        }\n      }\n    }\n  }\n\n  onBlur(e) {\n    if (e.target.value) {\n      if (Array.isArray(this.value)) {\n        this.value = [...this.value, e.target.value];\n      } else {\n        this.value = [e.target.value];\n      }\n      e.target.value = '';\n    }\n  }\n\n  static get styles() {\n    return [TagInputStyles];\n  }\n}\n// Register the element with the browser\ncustomElements.define('tag-input', TagInput);\n","import { LitElement, html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { guard } from 'lit/directives/guard.js'; // eslint-disable-line import/extensions\nimport { live } from 'lit/directives/live.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport formatXml from 'xml-but-prettier';\nimport Prism from 'prismjs';\nimport TableStyles from '~/styles/table-styles';\nimport FlexStyles from '~/styles/flex-styles';\nimport InputStyles from '~/styles/input-styles';\nimport FontStyles from '~/styles/font-styles';\nimport BorderStyles from '~/styles/border-styles';\nimport TabStyles from '~/styles/tab-styles';\nimport PrismStyles from '~/styles/prism-styles';\nimport ApiRequestStyles from '~/styles/api-request-styles';\nimport CustomStyles from '~/styles/custom-styles';\nimport { copyToClipboard, downloadResource, viewResource } from '~/utils/common-utils';\nimport { schemaInObjectNotation,\n  getTypeInfo,\n  generateExample,\n  normalizeExamples,\n  getSchemaFromParam,\n  json2xml,\n  nestExampleIfPresent,\n  anyExampleWithSummaryOrDescription } from '~/utils/schema-utils';\nimport '~/components/json-tree';\nimport '~/components/schema-tree';\nimport '~/components/tag-input';\n\nexport default class ApiRequest extends LitElement {\n  constructor() {\n    super();\n    this.responseMessage = '';\n    this.responseStatus = 'success';\n    this.responseHeaders = '';\n    this.responseText = '';\n    this.responseUrl = '';\n    this.curlSyntax = '';\n    this.activeResponseTab = 'response'; // allowed values: response, headers, curl\n    this.selectedRequestBodyType = '';\n    this.selectedRequestBodyExample = '';\n    this.activeParameterSchemaTabs = {};\n  }\n\n  static get properties() {\n    return {\n      serverUrl: { type: String, attribute: 'server-url' },\n      servers: { type: Array },\n      method: { type: String },\n      path: { type: String },\n      security: { type: Array },\n      parameters: { type: Array },\n      request_body: { type: Object },\n      api_keys: { type: Array },\n      parser: { type: Object },\n      accept: { type: String },\n      callback: { type: String },\n      webhook: { type: String },\n      responseMessage: { type: String, attribute: false },\n      responseText: { type: String, attribute: false },\n      responseHeaders: { type: String, attribute: false },\n      responseStatus: { type: String, attribute: false },\n      responseUrl: { type: String, attribute: false },\n      fillRequestFieldsWithExample: { type: String, attribute: 'fill-request-fields-with-example' },\n      allowTry: { type: String, attribute: 'allow-try' },\n      renderStyle: { type: String, attribute: 'render-style' },\n      schemaStyle: { type: String, attribute: 'schema-style' },\n      activeSchemaTab: { type: String, attribute: 'active-schema-tab' },\n      activeParameterSchemaTabs: {\n        type: Object,\n        converter: {\n          fromAttribute: (attr) => JSON.parse(attr),\n          toAttribute: (prop) => JSON.stringify(prop),\n        },\n        attribute: 'active-parameter-schema-tabs',\n      },\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\n      fetchCredentials: { type: String, attribute: 'fetch-credentials' },\n\n      // properties for internal tracking\n      activeResponseTab: { type: String }, // internal tracking of response-tab not exposed as a attribute\n      selectedRequestBodyType: { type: String, attribute: 'selected-request-body-type' }, // internal tracking of selected request-body type\n      selectedRequestBodyExample: { type: String, attribute: 'selected-request-body-example' }, // internal tracking of selected request-body example\n    };\n  }\n\n  static get styles() {\n    return [\n      TableStyles,\n      InputStyles,\n      FontStyles,\n      FlexStyles,\n      BorderStyles,\n      TabStyles,\n      PrismStyles,\n      ApiRequestStyles,\n      CustomStyles,\n    ];\n  }\n\n  render() {\n    return html`\n    <div class=\"calc-width-api-request col regular-font request-panel ${'read focused'.includes(this.renderStyle) || this.callback === 'true' ? 'read-mode' : 'view-mode'}\">\n      <h3 class=\" ${this.callback === 'true' ? 'tiny-title' : 'req-res-title'} \">\n        ${this.callback === 'true' ? 'Callback request' : 'Request'}\n      </h3>\n      <div>\n      ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('path'))}\n      ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('query'))}\n      ${this.requestBodyTemplate()}\n      ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('header'))}\n      ${guard([this.method, this.path, this.allowTry, this.parameters, this.activeParameterSchemaTabs], () => this.inputParametersTemplate('cookie'))}\n      ${this.allowTry === 'false' || this.path.includes('/webhook-subscriptions') ? '' : html`${this.apiCallTemplate()}`}\n      </div>\n    </div>\n    `;\n  }\n\n  /*\n  async updated(changedProperties) {\n    // In focused mode after rendering the request component, update the text-areas(which contains examples) using\n    // the original values from hidden textareas\n    // This is done coz, user may update the dom by editing the textarea's and once the DOM is updated externally change detection wont happen, therefore update the values manually\n    if (this.renderStyle === 'focused') {\n      if (changedProperties.size === 1 && changedProperties.has('activeSchemaTab')) {\n        // dont update example as only tabs is switched\n      } else {\n        this.requestUpdate();\n      }\n    }\n  }\n  */\n\n  async saveExampleState() {\n    if (this.renderStyle === 'focused') {\n      const reqBodyTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea.request-body-param-user-input')];\n      reqBodyTextAreaEls.forEach((el) => {\n        el.dataset.user_example = el.value;\n      });\n      const exampleTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea[data-ptype=\"form-data\"]')];\n      exampleTextAreaEls.forEach((el) => {\n        el.dataset.user_example = el.value;\n      });\n      this.requestUpdate();\n    }\n  }\n\n  async updateExamplesFromDataAttr() {\n    // In focused mode after rendering the request component, update the text-areas(which contains examples) using\n    // the original values from hidden textareas\n    // This is done coz, user may update the dom by editing the textarea's and once the DOM is updated externally change detection wont happen, therefore update the values manually\n    if (this.renderStyle === 'focused') {\n      const reqBodyTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea.request-body-param-user-input')];\n      reqBodyTextAreaEls.forEach((el) => {\n        el.value = el.dataset.user_example || el.dataset.example;\n      });\n      const exampleTextAreaEls = [...this.shadowRoot.querySelectorAll('textarea[data-ptype=\"form-data\"]')];\n      exampleTextAreaEls.forEach((el) => {\n        el.value = el.dataset.user_example || el.dataset.example;\n      });\n      this.requestUpdate();\n    }\n  }\n\n  renderExample(example, paramType, paramName) {\n    return html`\n          ${paramType === 'array' ? '[' : ''}\n          <a\n          part=\"anchor anchor-param-example\"\n          class = \"anchor-param-constraint-font ${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? '' : 'inactive-link'}\"\n            data-example-type=\"${paramType === 'array' ? paramType : 'string'}\"\n            data-example=\"${example.value && Array.isArray(example.value) ? example.value?.join('~|~') : example.value || ''}\"\n            @click=\"${(e) => {\n    const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${paramName}\"]`);\n    if (inputEl) {\n      if (e.target.dataset.exampleType === 'array') {\n        inputEl.value = e.target.dataset.example.split('~|~');\n      } else {\n        inputEl.value = e.target.dataset.example;\n      }\n    }\n  }\n}\"\n          >\n          ${example.value && Array.isArray(example.value) ? example.value?.join(', ') : example.value || '∅'}\n          </a>\n          ${paramType === 'array' ? '] ' : ''}\n          `;\n  }\n\n  renderShortFormatExamples(examples, paramType, paramName) {\n    return html`${examples.map((x, i) => html`\n      ${i === 0 ? '' : '|'}\n      ${this.renderExample(x, paramType, paramName)}`)}`;\n  }\n\n  renderLongFormatExamples(exampleList, paramType, paramName) {\n    return html` <ul style=\"list-style-type: disclosure-closed;\">\n            ${exampleList.map((v) => html`\n                <li>\n                  ${this.renderExample(v, paramType, paramName)}\n                  ${v.summary?.length > 0 ? html`<span>&lpar;${v.summary}&rpar;</span>` : ''}\n                  ${v.description?.length > 0 ? html`<p>${unsafeHTML(marked(v.description))}</p>` : ''}\n                </li>\n              `)}\n          </ul>`;\n  }\n\n  /* eslint-disable indent */\n\n        exampleListTemplate(paramName, paramType, exampleList = []) {\n          return html` ${exampleList.length > 0\n            ? html`<span style=\"font-weight:bold\">Example: </span>\n                ${\n                  anyExampleWithSummaryOrDescription(exampleList)\n                  ? this.renderLongFormatExamples(exampleList, paramType, paramName)\n                  : this.renderShortFormatExamples(exampleList, paramType, paramName)\n                }`\n            : ''}`;\n        }\n\n  inputParametersTemplate(paramType) {\n    const filteredParams = this.parameters ? this.parameters.filter((param) => param.in === paramType) : [];\n    if (filteredParams.length === 0) {\n      return '';\n    }\n    let title = '';\n    if (paramType === 'path') {\n      title = 'Path parameters';\n    } else if (paramType === 'query') {\n      title = 'Query parameters';\n    } else if (paramType === 'header') {\n      title = 'Request headers';\n    } else if (paramType === 'cookie') {\n      title = 'Cookies';\n    }\n\n    const tableRows = [];\n    for (const param of filteredParams) {\n      const [declaredParamSchema, serializeStyle, mimeTypeElem] = getSchemaFromParam(param);\n      if (!declaredParamSchema) {\n        continue; // eslint-disable-line no-continue\n      }\n      const paramSchema = getTypeInfo(declaredParamSchema);\n      if (!paramSchema) {\n        continue; // eslint-disable-line no-continue\n      }\n      const schemaAsObj = schemaInObjectNotation(declaredParamSchema, {});\n      // let exampleVal = '';\n      // let exampleList = [];\n      let paramStyle = 'form';\n      let paramExplode = true;\n      let paramAllowReserved = false;\n      if (paramType === 'query') {\n        if (param.style && 'form spaceDelimited pipeDelimited'.includes(param.style)) {\n          paramStyle = param.style;\n        } else if (serializeStyle) {\n          paramStyle = serializeStyle;\n        }\n        if (typeof param.explode === 'boolean') {\n          paramExplode = param.explode;\n        }\n        if (typeof param.allowReserved === 'boolean') {\n          paramAllowReserved = param.allowReserved;\n        }\n      }\n\n      // openapi 3.1.0 spec based examples (which must be Object(string : { value:any, summary?: string, description?: string})\n      const example = normalizeExamples(\n        (param.examples\n          || nestExampleIfPresent(param.example)\n          || nestExampleIfPresent(mimeTypeElem?.example)\n          || mimeTypeElem?.examples\n          || paramSchema.examples\n          || nestExampleIfPresent(paramSchema.example)\n        ),\n        paramSchema.type,\n      );\n      if (!example.exampleVal && paramSchema.type === 'object') {\n        example.exampleVal = generateExample(\n          declaredParamSchema,\n          serializeStyle || 'json',\n          '',\n          '',\n          this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\n          this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\n          true,\n          'text',\n          false,\n        )[0].exampleValue;\n      }\n      const dataTypeCss = paramSchema.type.replace(/|.*/g, '').replace(/[^a-zA-Z0-9+]/g, '').substring(0, 4).toLowerCase();\n      tableRows.push(html`\n      <tr title=\"${param.deprecated ? 'Deprecated' : ''}\">\n        <td class=\"${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? 'param-name-td-try' : 'param-name-td-notry'} param-name-td\">\n        <div class=\"param-name ${param.deprecated ? 'deprecated' : ''}\" >\n          ${param.name}\n          ${param.deprecated ? html`<span class='font-red'>✗</span>` : ''}\n          ${param.required ? html`<span class='param-required'>required</span>` : ''}\n            <div class=\"param-type key-type ${dataTypeCss}\">\n              ${paramSchema.type === 'array'\n                ? `${paramSchema.arrayType}`\n                : `${paramSchema.format ? paramSchema.format : paramSchema.type}`\n              }\n            </div>\n        </div>\n        <div>${unsafeHTML(marked(param.description || ''))}\n          ${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern\n            ? html`\n                <div class=\"param-constraint\">\n                  ${paramSchema.default ? html`<span class=\"param-schema-default-title\">Default: </span><span class=\"font-mono\">${paramSchema.default}</span><br/>` : ''}\n                  ${paramSchema.pattern ? html`<span class=\"param-schema-pattern-title\">Pattern: </span><span class=\"font-mono\"${paramSchema.pattern}</span><br/>` : ''}\n                  ${paramSchema.constrain ? html`${paramSchema.constrain}<br/>` : ''}\n                  <p>\n                  ${paramSchema.allowedValues && paramSchema.allowedValues.split('|').map((v, i) => html`\n                    ${i > 0 ? '|' : html`<span class=\"param-schema-values-title\">Allowed values: </span>`}\n                    ${html`\n                      <a part=\"anchor anchor-param-constraint\" class = \"anchor-param-constraint-font ${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? '' : 'inactive-link'}\"\n                        data-type=\"${paramSchema.type === 'array' ? paramSchema.type : 'string'}\"\n                        data-enum=\"${v.trim()}\"\n                        @click=\"${(e) => {\n                          const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${param.name}\"]`);\n                          if (inputEl) {\n                            if (e.target.dataset.type === 'array') {\n                              inputEl.value = [e.target.dataset.enum];\n                            } else {\n                              inputEl.value = e.target.dataset.enum;\n                            }\n                          }\n                        }}\"\n                      >${v}</a>`\n                    }`)}\n                    </p>\n                </div>`\n            : ''\n          }\n          ${example.exampleList.length > 0\n            ? html`<p>${this.exampleListTemplate.call(this, param.name, paramSchema.type, example.exampleList)}</p>`\n            : ''\n          }\n          </div>\n        </td>\n        ${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions')\n          ? html`\n            <td class=\"request-param-td\" colspan=\"${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern ? '1' : '1'}\">\n              ${paramSchema.type === 'array'\n                ? html`\n                  <tag-input class=\"request-param full-width\"\n                    data-ptype = \"${paramType}\"\n                    data-pname = \"${param.name}\"\n                    data-example = \"${Array.isArray(example.exampleVal) ? example.exampleVal.join('~|~') : example.exampleVal}\"\n                    data-param-serialize-style = \"${paramStyle}\"\n                    data-param-serialize-explode = \"${paramExplode}\"\n                    data-param-allow-reserved = \"${paramAllowReserved}\"\n                    data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\n                    data-array = \"true\"\n                    placeholder = \"add-multiple &#x21a9;\"\n                    .value=\"${param['x-fill-example'] === 'no'\n                      ? []\n                      : live(this.fillRequestFieldsWithExample === 'true' ? Array.isArray(example.exampleVal) ? example.exampleVal : [example.exampleVal] : [])\n                    }\"\n                  >\n                  </tag-input>`\n                : paramSchema.type === 'object'\n                  ? html`\n                    <div class=\"tab-panel col request-param-tabs\">\n                      <div class=\"tab-buttons row\" @click=\"${(e) => {\n                        if (e.target.tagName.toLowerCase() === 'button') {\n                          const newState = { ...this.activeParameterSchemaTabs };\n                          newState[param.name] = e.target.dataset.tab;\n                          this.activeParameterSchemaTabs = newState;\n                        }\n                      }}\">\n                        <button class=\"tab-btn ${this.activeParameterSchemaTabs[param.name] === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE </button>\n                        <button class=\"tab-btn ${this.activeParameterSchemaTabs[param.name] !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\n                      </div>\n                      ${this.activeParameterSchemaTabs[param.name] === 'example'\n                        ? html`<div class=\"tab-content col\">\n                          <textarea\n                            class = \"textarea request-param full-width res-vert\"\n                            part = \"textarea textarea-param\"\n                            data-ptype = \"${paramType}-object\"\n                            data-pname = \"${param.name}\"\n                            data-example = \"${example.exampleVal}\"\n                            data-param-serialize-style = \"${paramStyle}\"\n                            data-param-serialize-explode = \"${paramExplode}\"\n                            data-param-allow-reserved = \"${paramAllowReserved}\"\n                            data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\n                            spellcheck = \"false\"\n                            .textContent=\"${param['x-fill-example'] === 'no' ? '' : live(this.fillRequestFieldsWithExample === 'true' ? example.exampleVal : '')}\"\n                            style = \"height: ${'read focused'.includes(this.renderStyle) ? '180px' : '120px'};\"\n                          ></textarea>\n                        </div>`\n                        : html`\n                          <div class=\"tab-content col\">\n                            <schema-tree\n                              class = 'json'\n                              style = 'display: block'\n                              .data = '${schemaAsObj}'\n                              schema-expand-level = \"${this.schemaExpandLevel}\"\n                              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n                              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n                              schema-hide-read-only = \"${this.schemaHideReadOnly.includes(this.method)}\"\n                              schema-hide-write-only = \"${this.schemaHideWriteOnly.includes(this.method)}\"\n                            > </schema-tree>\n                          </div>`\n                        }\n                    </div>`\n                  : html`\n                    <input type=\"${paramSchema.format === 'password' ? 'password' : 'text'}\" spellcheck=\"false\"\n                      class=\"request-param input-password-text\"\n                      part=\"textbox textbox-param\"\n                      data-ptype=\"${paramType}\"\n                      data-pname=\"${param.name}\"\n                      data-example=\"${Array.isArray(example.exampleVal) ? example.exampleVal.join('~|~') : example.exampleVal}\"\n                      data-param-allow-reserved = \"${paramAllowReserved}\"\n                      data-x-fill-example = \"${param['x-fill-example'] || 'yes'}\"\n                      data-array=\"false\"\n                      .value=\"${param['x-fill-example'] === 'no' ? '' : live(this.fillRequestFieldsWithExample === 'true' ? example.exampleVal : '')}\"\n                    />`\n                }\n            </td>`\n          : ''\n        }\n    </tr>\n    `);\n    }\n\n    return html`\n    <h4 class=\"table-title top-gap\">${title}</h4>\n    <div class=\"params-table-styles\">\n      <table class=\"m-table mtable-inline\">\n        <thead>\n        <tr>\n          <th class=\"${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? 'allow-try-first' : 'deny-try-first'}\">Parameter</th>\n          <th class=\"${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? 'allow-try-last' : 'deny-try-last'}\">Value</th>\n        </tr>\n      </thead>\n    ${tableRows}\n      </table>\n    </div>`;\n  }\n\n  // This method is called before navigation change in focusd mode\n  async beforerNavigationFocusedMode() {\n    // this.saveExampleState();\n  }\n\n  // This method is called after navigation change in focusd mode\n  async afterNavigationFocusedMode() {\n    this.selectedRequestBodyType = '';\n    this.selectedRequestBodyExample = '';\n    this.updateExamplesFromDataAttr();\n    this.clearResponseData();\n  }\n\n  // Request-Body Event Handlers\n  onSelectExample(e) {\n    this.selectedRequestBodyExample = e.target.value;\n    const exampleDropdownEl = e.target;\n    window.setTimeout((selectEl) => {\n      const readOnlyExampleEl = selectEl.closest('.example-panel').querySelector('.request-body-param');\n      const userInputExampleTextareaEl = selectEl.closest('.example-panel').querySelector('.request-body-param-user-input');\n      userInputExampleTextareaEl.value = readOnlyExampleEl.innerText;\n    }, 0, exampleDropdownEl);\n  }\n\n  onMimeTypeChange(e) {\n    this.selectedRequestBodyType = e.target.value;\n    const mimeDropdownEl = e.target;\n    this.selectedRequestBodyExample = '';\n    window.setTimeout((selectEl) => {\n      const readOnlyExampleEl = selectEl.closest('.request-body-container').querySelector('.request-body-param');\n      if (readOnlyExampleEl) {\n        const userInputExampleTextareaEl = selectEl.closest('.request-body-container').querySelector('.request-body-param-user-input');\n        userInputExampleTextareaEl.value = readOnlyExampleEl.innerText;\n      }\n    }, 0, mimeDropdownEl);\n  }\n\n  requestBodyTemplate() {\n    if (!this.request_body) {\n      return '';\n    }\n    if (Object.keys(this.request_body).length === 0) {\n      return '';\n    }\n\n    // Variable to store partial HTMLs\n    let reqBodyTypeSelectorHtml = '';\n    let reqBodyFileInputHtml = '';\n    let reqBodyFormHtml = '';\n    let reqBodySchemaHtml = '';\n    let reqBodyExampleHtml = '';\n\n    const requestBodyTypes = [];\n    const { content } = this.request_body;\n    for (const mimeType in content) {\n      requestBodyTypes.push({\n        mimeType,\n        schema: content[mimeType].schema,\n        example: content[mimeType].example,\n        examples: content[mimeType].examples,\n      });\n      if (!this.selectedRequestBodyType) {\n        this.selectedRequestBodyType = mimeType;\n      }\n    }\n    // MIME Type selector\n    reqBodyTypeSelectorHtml = requestBodyTypes.length === 1\n      ? ''\n      : html`\n        <select class=\"request-body-inline\" @change = '${(e) => this.onMimeTypeChange(e)}'>\n          ${requestBodyTypes.map((reqBody) => html`\n            <option value = '${reqBody.mimeType}' ?selected = '${reqBody.mimeType === this.selectedRequestBodyType}'>\n              ${reqBody.mimeType}\n            </option> `)\n          }\n        </select>\n      `;\n\n    // For Loop - Main\n    requestBodyTypes.forEach((reqBody) => {\n      let schemaAsObj;\n      let reqBodyExamples = [];\n\n      if (this.selectedRequestBodyType.includes('json') || this.selectedRequestBodyType.includes('xml') || this.selectedRequestBodyType.includes('text') || this.selectedRequestBodyType.includes('jose')) {\n        // Generate Example\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\n          reqBodyExamples = generateExample(\n            reqBody.schema,\n            reqBody.mimeType,\n            reqBody.examples,\n            reqBody.example,\n            this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\n            this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\n            'text',\n            false,\n          );\n          if (!this.selectedRequestBodyExample) {\n            this.selectedRequestBodyExample = (reqBodyExamples.length > 0 ? reqBodyExamples[0].exampleId : '');\n          }\n          reqBodyExampleHtml = html`\n            ${reqBodyExampleHtml}\n            <div class = 'example-panel pad-top-8'>\n              ${reqBodyExamples.length === 1\n                ? ''\n                : html`\n                  <select class=\"request-body-example-inline\" @change='${(e) => this.onSelectExample(e)}'>\n                    ${reqBodyExamples.map((v) => html`<option value=\"${v.exampleId}\" ?selected=${v.exampleId === this.selectedRequestBodyExample} >\n                      ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary ? v.exampleSummary : v.exampleId}\n                    </option>`)}\n                  </select>\n                `\n              }\n              ${reqBodyExamples\n                .filter((v) => v.exampleId === this.selectedRequestBodyExample)\n                .map((v) => html`\n                <div class=\"example ${v.exampleId === this.selectedRequestBodyExample ? 'example-selected' : ''}\" data-example = '${v.exampleId}'>\n                  ${v.exampleSummary && v.exampleSummary.length > 80 ? html`<div class=\"example-summary-inline\"> ${v.exampleSummary} </div>` : ''}\n                  ${v.exampleDescription ? html`<div class=\"example-description-inline\"> ${unsafeHTML(marked(v.exampleDescription || ''))} </div>` : ''}\n                  <!-- This pre(hidden) is to store the original example value, this will remain unchanged when users switches from one example to another, its is used to populate the editable textarea -->\n                  <pre\n                    class = \"textarea is-hidden request-body-param ${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)} request-body-param-inline\"\n                    spellcheck = \"false\"\n                    data-ptype = \"${reqBody.mimeType}\"\n                  >${(v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2))}</pre>\n\n                  <!-- this textarea is for user to edit the example -->\n                  <textarea\n                    class = \"textarea request-body-param-user-input request-body-param-user-inline\"\n                    part = \"textarea textarea-param\"\n                    spellcheck = \"false\"\n                    data-ptype = \"${reqBody.mimeType}\"\n                    data-example = \"${v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2)}\"\n                    data-example-format = \"${v.exampleFormat}\"\n                    .textContent = \"${(v.exampleFormat === 'text' ? v.exampleValue : JSON.stringify(v.exampleValue, null, 2))}\"\n                  ></textarea>\n                </div>\n              `)}\n\n            </div>\n          `;\n        }\n      } else if (this.selectedRequestBodyType.includes('form-urlencoded') || this.selectedRequestBodyType.includes('form-data')) {\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\n          const ex = generateExample(\n            reqBody.schema,\n            reqBody.mimeType,\n            reqBody.examples,\n            reqBody.example,\n            this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\n            this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\n            'text',\n            false,\n          );\n          if (reqBody.schema) {\n            reqBodyFormHtml = this.formDataTemplate(reqBody.schema, reqBody.mimeType, (ex[0] ? ex[0].exampleValue : ''));\n          }\n        }\n      } else if ((/^audio\\/|^image\\/|^video\\/|^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$/.test(this.selectedRequestBodyType))) {\n        if (reqBody.mimeType === this.selectedRequestBodyType) {\n          reqBodyFileInputHtml = html`\n            <div class = \"small-font-size bold-text row\">\n              <input type=\"file\" part=\"file-input\" class=\"request-body-param-file request-body-type-inline\" data-ptype=\"${reqBody.mimeType}\" spellcheck=\"false\" />\n            </div>\n          `;\n        }\n      }\n\n      // Generate Schema\n      if (reqBody.mimeType.includes('json') || reqBody.mimeType.includes('xml') || reqBody.mimeType.includes('text') || this.selectedRequestBodyType.includes('jose')) {\n        schemaAsObj = schemaInObjectNotation(reqBody.schema, {});\n        if (this.schemaStyle === 'table') {\n          reqBodySchemaHtml = html`\n            ${reqBodySchemaHtml}\n            <schema-table\n              class = '${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)}'\n              style = 'display: ${this.selectedRequestBodyType === reqBody.mimeType ? 'block' : 'none'};'\n              .data = '${schemaAsObj}'\n              schema-expand-level = \"${this.schemaExpandLevel}\"\n              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n              schema-hide-read-only = \"${this.schemaHideReadOnly}\"\n              schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n            > </schema-table>\n          `;\n        } else if (this.schemaStyle === 'tree') {\n          reqBodySchemaHtml = html`\n            ${reqBodySchemaHtml}\n            <schema-tree\n              class = \"${reqBody.mimeType.substring(reqBody.mimeType.indexOf('/') + 1)}\"\n              style = \"display: ${this.selectedRequestBodyType === reqBody.mimeType ? 'block' : 'none'};\"\n              .data = \"${schemaAsObj}\"\n              schema-expand-level = \"${this.schemaExpandLevel}\"\n              schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n              allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n              schema-hide-read-only = \"${this.schemaHideReadOnly}\"\n              schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n            > </schema-tree>\n          `;\n        }\n      }\n    });\n\n    return html`\n      <div class='request-body-container' data-selected-request-body-type=\"${this.selectedRequestBodyType}\">\n        <div class=\"table-title top-gap row\">\n          <span class=\"key-label\">Request body</span>&nbsp; ${this.request_body.required ? html`<span class=\"mono-font param-required\">required</span>` : ''}\n          <span class=\"selected-request-inline\"> ${this.selectedRequestBodyType}</span>\n          <span class=\"request-flex-inline\"></span>\n          ${reqBodyTypeSelectorHtml}\n        </div>\n        ${this.request_body.description ? html`<div class=\"m-markdown md-mbottom\">${unsafeHTML(marked(this.request_body.description))}</div>` : ''}\n\n        ${(this.selectedRequestBodyType.includes('json') || this.selectedRequestBodyType.includes('xml') || this.selectedRequestBodyType.includes('text') || this.selectedRequestBodyType.includes('jose'))\n          ? html`\n            <div class=\"tab-panel col request-body-tab-inline\">\n              <div class=\"tab-buttons row\" @click=\"${(e) => { if (e.target.tagName.toLowerCase() === 'button') { this.activeSchemaTab = e.target.dataset.tab; } }}\">\n                <button class=\"tab-btn ${this.activeSchemaTab === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE</button>\n                <button class=\"tab-btn ${this.activeSchemaTab !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\n              </div>\n              ${html`<div class=\"tab-content col\" style=\"display:${this.activeSchemaTab === 'example' ? 'block' : 'none'};\"> ${reqBodyExampleHtml}</div>`}\n              ${html`<div class=\"tab-content col\" style=\"display:${this.activeSchemaTab === 'example' ? 'none' : 'block'};\"> ${reqBodySchemaHtml}</div>`}\n            </div>`\n          : html`\n            ${reqBodyFileInputHtml}\n            ${reqBodyFormHtml}`\n        }\n      </div>\n    `;\n  }\n\n  formDataParamAsObjectTemplate(fieldName, fieldSchema, mimeType) {\n    // This template is used when form-data param should be send as a object (application/json, application/xml)\n    const formdataPartSchema = schemaInObjectNotation(fieldSchema, {});\n    const formdataPartExample = generateExample(\n      fieldSchema,\n      'json',\n      fieldSchema.examples,\n      fieldSchema.example,\n      this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\n      this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\n      'text',\n      false,\n    );\n\n    return html`\n      <div class=\"tab-panel row tpanel-row-inline\">\n        <div class=\"tpr-div\">\n          <div class=\"row tpr-div-int\" @click=\"${(e) => {\n          if (e.target.classList.contains('v-tab-btn')) {\n            const { tab } = e.target.dataset;\n            if (tab) {\n              const tabPanelEl = e.target.closest('.tab-panel');\n              const selectedTabBtnEl = tabPanelEl.querySelector(`.v-tab-btn[data-tab=\"${tab}\"]`);\n              const otherTabBtnEl = [...tabPanelEl.querySelectorAll(`.v-tab-btn:not([data-tab=\"${tab}\"])`)];\n              const selectedTabContentEl = tabPanelEl.querySelector(`.tab-content[data-tab=\"${tab}\"]`);\n              const otherTabContentEl = [...tabPanelEl.querySelectorAll(`.tab-content:not([data-tab=\"${tab}\"])`)];\n              selectedTabBtnEl.classList.add('active');\n              selectedTabContentEl.style.display = 'block';\n              otherTabBtnEl.forEach((el) => { el.classList.remove('active'); });\n              otherTabContentEl.forEach((el) => { el.style.display = 'none'; });\n            }\n          }\n          if (e.target.tagName.toLowerCase() === 'button') { this.activeSchemaTab = e.target.dataset.tab; }\n        }}\">\n          <button class=\"v-tab-btn ${this.activeSchemaTab === 'example' ? 'active' : ''}\" data-tab = 'example'>EXAMPLE</button>\n          <button class=\"v-tab-btn ${this.activeSchemaTab !== 'example' ? 'active' : ''}\" data-tab = 'schema'>SCHEMA</button>\n        </div>\n      </div>\n      ${html`\n        <div class=\"tab-content col tab-cont-col-div\" data-tab='example' style=\"display:${this.activeSchemaTab === 'example' ? 'block' : 'none'};\">\n          <textarea\n            class = \"textarea full-width no-border res-vert\"\n            part = \"textarea textarea-param\"\n            data-array = \"false\"\n            data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\n            data-pname = \"${fieldName}\"\n            data-example = \"${formdataPartExample[0]?.exampleValue || ''}\"\n            .textContent = \"${this.fillRequestFieldsWithExample === 'true' ? formdataPartExample[0].exampleValue : ''}\"\n            spellcheck = \"false\"\n          ></textarea>\n        </div>`\n      }\n      ${html`\n        <div class=\"tab-content col tab-cont-col-div\" data-tab = 'schema' style=\"display:${this.activeSchemaTab !== 'example' ? 'block' : 'none'};\">\n          <schema-tree\n            .data = '${formdataPartSchema}'\n            schema-expand-level = \"${this.schemaExpandLevel}\"\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n          > </schema-tree>\n        </div>`\n      }\n      </div>\n    `;\n  }\n\n  formDataTemplate(schema, mimeType, exampleValue = '') {\n    const formDataTableRows = [];\n    if (schema.properties) {\n      for (const fieldName in schema.properties) {\n        const fieldSchema = schema.properties[fieldName];\n        if (fieldSchema.readOnly) {\n          continue;\n        }\n        const fieldExamples = fieldSchema.examples || fieldSchema.example || '';\n        const fieldType = fieldSchema.type;\n        const paramSchema = getTypeInfo(fieldSchema);\n        const labelColWidth = 'read focused'.includes(this.renderStyle) ? '200px' : '160px';\n        const example = normalizeExamples((paramSchema.examples || paramSchema.example), paramSchema.type);\n        formDataTableRows.push(html`\n        <tr title=\"${fieldSchema.deprecated ? 'Deprecated' : ''}\">\n          <td class=\"min-width-input\" style=\"width:${labelColWidth};\">\n            <div class=\"param-name ${fieldSchema.deprecated ? 'deprecated' : ''}\">\n              ${fieldName}${(schema.required?.includes(fieldName) || fieldSchema.required) ? html`<span class='param-required'>required</span>` : ''}\n            </div>\n            <div class=\"param-type\">${paramSchema.type}</div>\n          </td>\n          <td class=\"min-width-input\"\n            style=\"${fieldType === 'object' ? 'width:100%; padding:0;' : this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? '' : 'display:none;'}\"\n            colspan=\"${fieldType === 'object' ? 2 : 1}\">\n            ${fieldType === 'array'\n              ? fieldSchema.items?.format === 'binary'\n                ? html`\n                <div class=\"file-input-container col align-flex-end\" @click=\"${(e) => this.onAddRemoveFileInput(e, fieldName, mimeType)}\">\n                  <div class='input-set row'>\n                    <input\n                      type = \"file\"\n                      part = \"file-input\"\n                      class = \"full-width\"\n                      data-pname = \"${fieldName}\"\n                      data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\n                      data-array = \"false\"\n                      data-file-array = \"true\"\n                    />\n                    <button class=\"file-input-remove-btn\"> &#x2715; </button>\n                  </div>\n                  <button class=\"m-btn primary file-input-add-btn\" part=\"btn btn-fill\">ADD</button>\n                </div>\n                `\n                : html`\n                  <tag-input\n                    class = \"full-width\"\n                    data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\n                    data-pname = \"${fieldName}\"\n                    data-example = \"${Array.isArray(fieldExamples) ? fieldExamples.join('~|~') : fieldExamples}\"\n                    data-array = \"true\"\n                    placeholder = \"add-multiple &#x21a9;\"\n                    .value = \"${Array.isArray(fieldExamples) ? Array.isArray(fieldExamples[0]) ? fieldExamples[0] : [fieldExamples[0]] : [fieldExamples]}\"\n                  >\n                  </tag-input>\n                `\n              : html`\n                ${fieldType === 'object'\n                  ? this.formDataParamAsObjectTemplate.call(this, fieldName, fieldSchema, mimeType)\n                  : html`\n                    ${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions')\n                      ? html`<input\n                          .value = \"${this.fillRequestFieldsWithExample === 'true' ? example.exampleVal : ''}\"\n                          spellcheck = \"false\"\n                          type = \"${fieldSchema.format === 'binary' ? 'file' : fieldSchema.format === 'password' ? 'password' : 'text'}\"\n                          part = \"textbox textbox-param\"\n                          class = \"full-width\"\n                          data-ptype = \"${mimeType.includes('form-urlencode') ? 'form-urlencode' : 'form-data'}\"\n                          data-pname = \"${fieldName}\"\n                          data-example = \"${Array.isArray(fieldExamples) ? fieldExamples[0] : fieldExamples}\"\n                          data-array = \"false\"\n                        />`\n                      : ''\n                    }\n                    `\n                  }`\n              }\n          </td>\n          ${fieldType === 'object'\n            ? ''\n            : html`\n              <td>\n                ${paramSchema.default || paramSchema.constrain || paramSchema.allowedValues || paramSchema.pattern\n                  ? html`\n                    <div class=\"param-constraint\">\n                      ${paramSchema.default ? html`<span class=\"bold-text\">Default: </span><span class=\"font-mono\">${paramSchema.default}</span><br/>` : ''}\n                      ${paramSchema.pattern ? html`<span class=\"bold-text\">Pattern: </span><span class=\"font-mono\">${paramSchema.pattern}</span><br/>` : ''}\n                      ${paramSchema.constrain ? html`${paramSchema.constrain}<br/>` : ''}\n                      ${paramSchema.allowedValues && paramSchema.allowedValues.split('|').map((v, i) => html`\n                        ${i > 0 ? '|' : html`<span class=\"bold-text\">Allowed: </span>`}\n                        ${html`\n                          <a part=\"anchor anchor-param-constraint\" class = \"anchor-param-constraint-font ${this.allowTry === 'true' && !this.path.includes('/webhook-subscriptions') ? '' : 'inactive-link'}\"\n                            data-type=\"${paramSchema.type === 'array' ? paramSchema.type : 'string'}\"\n                            data-enum=\"${v.trim()}\"\n                            @click=\"${(e) => {\n                              const inputEl = e.target.closest('table').querySelector(`[data-pname=\"${fieldName}\"]`);\n                              if (inputEl) {\n                                if (e.target.dataset.type === 'array') {\n                                  inputEl.value = [e.target.dataset.enum];\n                                } else {\n                                  inputEl.value = e.target.dataset.enum;\n                                }\n                              }\n                            }}\"\n                          >\n                            ${v}\n                          </a>`\n                        }`)\n                      }\n                    </div>`\n                  : ''\n                }\n              </td>`\n          }\n        </tr>\n        ${fieldType === 'object'\n          ? ''\n          : html`\n            <tr>\n              <td class=\"no-border\"> </td>\n              <td colspan=\"2\" class=\"no-border colspan-2\">\n                <span>${unsafeHTML(marked(fieldSchema.description || ''))}</span>\n                ${this.exampleListTemplate.call(this, fieldName, paramSchema.type, example.exampleList)}\n              </td>\n            </tr>\n          `\n        }`);\n      }\n      return html`\n        <table class=\"m-table full-width\">\n          ${formDataTableRows}\n        </table>\n      `;\n    }\n\n    return html`\n      <textarea\n        class = \"textarea dynamic-form-param ${mimeType} full-width\"\n        part = \"textarea textarea-param\"\n        spellcheck = \"false\"\n        data-pname=\"dynamic-form\"\n        data-ptype=\"${mimeType}\"\n        .textContent = \"${exampleValue}\"\n      ></textarea>\n      ${schema.description ? html`<span class=\"\">${unsafeHTML(marked(schema.description))}</span>` : ''}\n    `;\n  }\n\n  apiResponseTabTemplate() {\n    let responseFormat = '';\n    let responseContent = '';\n    if (!this.responseIsBlob) {\n      if (this.responseHeaders.includes('application/x-ndjson')) {\n        responseFormat = 'json';\n        const prismLines = this.responseText.split('\\n').map((q) => Prism.highlight(q, Prism.languages[responseFormat], responseFormat)).join('\\n');\n        responseContent = html`<code>${unsafeHTML(prismLines)}</code>`;\n      } else if (this.responseHeaders.includes('json')) {\n        responseFormat = 'json';\n        responseContent = html`<code>${unsafeHTML(Prism.highlight(this.responseText, Prism.languages[responseFormat], responseFormat))}</code>`;\n      } else if (this.responseHeaders.includes('html') || this.responseHeaders.includes('xml')) {\n        responseFormat = 'html';\n        responseContent = html`<code>${unsafeHTML(Prism.highlight(this.responseText, Prism.languages[responseFormat], responseFormat))}</code>`;\n      } else {\n        responseFormat = 'text';\n        responseContent = html`<code>${this.responseText}</code>`;\n      }\n    }\n    return html`\n      <div class=\"row response-row\">\n        <div class=\"response-message ${this.responseStatus}\">Response Status: ${this.responseMessage}</div>\n        <div class=\"request-flex-inline\"></div>\n      </div>\n      <div class=\"tab-panel col response-col\">\n        <div id=\"tab_buttons\" class=\"tab-buttons row\" @click=\"${(e) => {\n            if (e.target.classList.contains('tab-btn') === false) { return; }\n            this.activeResponseTab = e.target.dataset.tab;\n        }}\">\n          <button class=\"tab-btn ${this.activeResponseTab === 'response' ? 'active' : ''}\" data-tab = 'response'>RESPONSE</button>\n          <button class=\"tab-btn ${this.activeResponseTab === 'headers' ? 'active' : ''}\"  data-tab = 'headers'>RESPONSE HEADERS</button>\n          <button class=\"tab-btn ${this.activeResponseTab === 'curl' ? 'active' : ''}\" data-tab = 'curl'>CURL</button>\n        </div>\n        ${this.responseIsBlob\n          ? html`\n            <div class=\"tab-content col request-flex-inline\" style=\"display:${this.activeResponseTab === 'response' ? 'flex' : 'none'};\">\n              <button class=\"m-btn thin-border mar-top-8 small-width\" @click='${(e) => { downloadResource(this.responseBlobUrl, this.respContentDisposition, e); }}' part=\"btn btn-outline\">\n                DOWNLOAD\n              </button>\n              ${this.responseBlobType === 'view'\n                ? html`<button class=\"m-btn thin-border mar-top-8 small-width\"  @click='${(e) => { viewResource(this.responseBlobUrl, e); }}' part=\"btn btn-outline\">VIEW (NEW TAB)</button>`\n                : ''\n              }\n            </div>`\n          : html`\n            <div class=\"tab-content col m-markdown request-flex-inline\" style=\"display:${this.activeResponseTab === 'response' ? 'flex' : 'none'};\" >\n              <button class=\"toolbar-btn copy-button\" @click='${(e) => { copyToClipboard(this.responseText, e); }}' part=\"btn btn-fill\"> Copy </button>\n              <pre class=\"response-pre\">${responseContent}</pre>\n            </div>`\n        }\n        <div class=\"tab-content col m-markdown request-flex-inline\" style=\"display:${this.activeResponseTab === 'headers' ? 'flex' : 'none'};\" >\n          <button  class=\"toolbar-btn copy-button\" @click='${(e) => { copyToClipboard(this.responseHeaders, e); }}' part=\"btn btn-fill\"> Copy </button>\n          <pre class=\"response-pre\"><code>${unsafeHTML(Prism.highlight(this.responseHeaders, Prism.languages.css, 'css'))}</code></pre>\n        </div>\n        <div class=\"tab-content col m-markdown request-flex-inline\" style=\"display:${this.activeResponseTab === 'curl' ? 'flex' : 'none'};\">\n          <button  class=\"toolbar-btn copy-button\" @click='${(e) => { copyToClipboard(this.curlSyntax.replace(/\\\\$/, ''), e); }}' part=\"btn btn-fill\"> Copy </button>\n          <pre class=\"response-pre\"><code>${unsafeHTML(Prism.highlight(this.curlSyntax.trim().replace(/\\\\$/, ''), Prism.languages.shell, 'shell'))}</code></pre>\n        </div>\n      </div>\n      <div class=\"clear-response\">\n        <button class=\"m-btn\" part=\"btn btn-outline btn-clear-response\" @click=\"${this.clearResponseData}\">CLEAR RESPONSE</button>\n      </div>\n      `;\n  }\n\n  apiCallTemplate() {\n    let selectServerDropdownHtml = '';\n\n    if (this.servers && this.servers.length > 0) {\n      selectServerDropdownHtml = html`\n        <select class=\"min-width-input\" @change='${(e) => { this.serverUrl = e.target.value; }}'>\n          ${this.servers.map((v) => html`<option value = \"${v.url}\"> ${v.url} - ${v.description} </option>`)}\n        </select>\n      `;\n    }\n    const selectedServerHtml = html`\n      <div class=\"sel-server\">\n        ${selectServerDropdownHtml}\n        ${this.serverUrl\n          ? html`\n            <div class=\"sel-server-div\">\n              <div class=\"sel-server-label\">API server: </div>\n              <span class=\"gray-text\"> ${this.serverUrl} </span>\n            </div>\n          `\n          : ''\n        }\n      </div>\n    `;\n\n    return html`\n    <div class=\"response-auth\">\n      <div class=\"hide-in-small-screen response-auth-mobile\">\n        <div class=\"response-auth-html\">\n          ${selectedServerHtml}\n        </div>\n        <div class=\"disp-flex\">\n          <div class=\"sel-server-label\">Authentication: </div>\n          ${this.security?.length > 0\n            ? html`\n              ${this.api_keys.length > 0\n                ? html`<div class=\"response-auth-applied\">\n                    ${this.api_keys.length === 1\n                      ? `${this.api_keys[0]?.typeDisplay} in ${this.api_keys[0].in}`\n                      : `${this.api_keys.length} API keys applied`\n                    }\n                  </div>`\n                : html`<div class=\"gray-text\"><span class='param-required'>Required</span> <span class=\"response-auth-none\">(None applied)</span>`\n              }`\n            : html`<span class=\"gray-text\"> Not required </span>`\n          }\n        </div>\n      </div>\n    </div>\n    ${\n      this.parameters.length > 0 || this.request_body\n        ? html`\n          <button class=\"m-btn thin-border\" part=\"btn btn-outline btn-fill mright-btn\" @click=\"${this.onFillRequestData}\" title=\"Fills with example data (if provided)\">\n            FILL EXAMPLE\n          </button>\n          <button class=\"m-btn thin-border\" part=\"btn btn-outline btn-clear mright-btn\" @click=\"${this.onClearRequestData}\">\n            CLEAR\n          </button>`\n        : ''\n    }\n    <button class=\"m-btn primary thin-border btn-try\" part=\"btn btn-try\" @click=\"${this.onTryClick}\">TRY</button>\n  ${this.responseMessage === '' ? '' : this.apiResponseTabTemplate()}\n    `;\n  }\n  /* eslint-enable indent */\n\n  async onFillRequestData(e) {\n    const requestPanelEl = e.target.closest('.request-panel');\n    const requestPanelInputEls = [...requestPanelEl.querySelectorAll('input, tag-input, textarea:not(.is-hidden)')];\n    requestPanelInputEls.forEach((el) => {\n      if (el.dataset.example) {\n        if (el.tagName.toUpperCase() === 'TAG-INPUT') {\n          el.value = el.dataset.example.split('~|~');\n        } else {\n          el.value = el.dataset.example;\n        }\n      }\n    });\n  }\n\n  async onClearRequestData(e) {\n    const requestPanelEl = e.target.closest('.request-panel');\n    const requestPanelInputEls = [...requestPanelEl.querySelectorAll('input, tag-input, textarea:not(.is-hidden)')];\n    requestPanelInputEls.forEach((el) => { el.value = ''; });\n  }\n\n  async onTryClick(e) {\n    // const me = this;\n    if (window.ym) {\n      window.ym(57571228, 'reachGoal', 'button_docs_api_try');\n    }\n    const tryBtnEl = e.target;\n    let fetchUrl;\n    let curlUrl;\n    let curl = '';\n    let curlHeaders = '';\n    let curlData = '';\n    let curlForm = '';\n    const respEl = this.closest('.expanded-req-resp-container, .req-resp-container')?.getElementsByTagName('api-response')[0];\n    const acceptHeader = respEl?.selectedMimeType;\n    const requestPanelEl = e.target.closest('.request-panel');\n    const pathParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='path']\")];\n    const queryParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='query']\")];\n    const queryParamObjTypeEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='query-object']\")];\n    const headerParamEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='header']\")];\n    const requestBodyContainerEl = requestPanelEl.querySelector('.request-body-container');\n    fetchUrl = this.path;\n    const fetchOptions = {\n      method: this.method.toUpperCase(),\n    };\n    // Generate URL using Path Params\n    pathParamEls.map((el) => {\n      fetchUrl = fetchUrl.replace(`{${el.dataset.pname}}`, encodeURIComponent(el.value));\n    });\n\n    // Query Params\n    const urlQueryParamsMap = new Map();\n    const queryParamsWithReservedCharsAllowed = [];\n    if (queryParamEls.length > 0) {\n      queryParamEls.forEach((el) => {\n        const queryParam = new URLSearchParams();\n        if (el.dataset.paramAllowReserved === 'true') {\n          queryParamsWithReservedCharsAllowed.push(el.dataset.pname);\n        }\n        if (el.dataset.array === 'false') {\n          if (el.value !== '') {\n            queryParam.append(el.dataset.pname, el.value);\n          }\n        } else {\n          const { paramSerializeStyle, paramSerializeExplode } = el.dataset;\n          let vals = ((el.value && Array.isArray(el.value)) ? el.value : []);\n          vals = Array.isArray(vals) ? vals.filter((v) => v !== '') : [];\n          if (vals.length > 0) {\n            if (paramSerializeStyle === 'spaceDelimited') {\n              queryParam.append(el.dataset.pname, vals.join(' ').replace(/^\\s|\\s$/g, ''));\n            } else if (paramSerializeStyle === 'pipeDelimited') {\n              queryParam.append(el.dataset.pname, vals.join('|').replace(/^\\||\\|$/g, ''));\n            } else {\n              if (paramSerializeExplode === 'true') { // eslint-disable-line no-lonely-if\n                vals.forEach((v) => { queryParam.append(el.dataset.pname, v); });\n              } else {\n                queryParam.append(el.dataset.pname, vals.join(',').replace(/^,|,$/g, ''));\n              }\n            }\n          }\n        }\n        if (queryParam.toString()) {\n          urlQueryParamsMap.set(el.dataset.pname, queryParam);\n        }\n      });\n    }\n\n    // Query Params (Dynamic - create from JSON)\n    if (queryParamObjTypeEls.length > 0) {\n      queryParamObjTypeEls.map((el) => {\n        const queryParam = new URLSearchParams();\n        try {\n          let queryParamObj = {};\n          const { paramSerializeStyle, paramSerializeExplode } = el.dataset;\n          queryParamObj = Object.assign(queryParamObj, JSON.parse(el.value.replace(/\\s+/g, ' ')));\n          if (el.dataset.paramAllowReserved === 'true') {\n            queryParamsWithReservedCharsAllowed.push(el.dataset.pname);\n          }\n          if ('json xml'.includes(paramSerializeStyle)) {\n            if (paramSerializeStyle === 'json') {\n              queryParam.append(el.dataset.pname, JSON.stringify(queryParamObj));\n            } else if (paramSerializeStyle === 'xml') {\n              queryParam.append(el.dataset.pname, json2xml(queryParamObj));\n            }\n          } else {\n            for (const key in queryParamObj) {\n              if (typeof queryParamObj[key] === 'object') {\n                if (Array.isArray(queryParamObj[key])) {\n                  if (paramSerializeStyle === 'spaceDelimited') {\n                    queryParam.append(key, queryParamObj[key].join(' '));\n                  } else if (paramSerializeStyle === 'pipeDelimited') {\n                    queryParam.append(key, queryParamObj[key].join('|'));\n                  } else {\n                    if (paramSerializeExplode === 'true') { // eslint-disable-line no-lonely-if\n                      queryParamObj[key].forEach((v) => {\n                        queryParam.append(key, v);\n                      });\n                    } else {\n                      queryParam.append(key, queryParamObj[key]);\n                    }\n                  }\n                }\n              } else {\n                queryParam.append(key, queryParamObj[key]);\n              }\n            }\n          }\n        } catch (err) {\n          console.log('RapiDoc: unable to parse %s into object', el.value); // eslint-disable-line no-console\n        }\n        if (queryParam.toString()) {\n          urlQueryParamsMap.set(el.dataset.pname, queryParam);\n        }\n      });\n    }\n    let urlQueryParamString = '';\n    if (urlQueryParamsMap.size) {\n      urlQueryParamString = '?';\n      urlQueryParamsMap.forEach((val, pname) => {\n        if (queryParamsWithReservedCharsAllowed.includes(pname)) {\n          urlQueryParamString += `${pname}=`;\n          urlQueryParamString += val.getAll(pname).join(`&${pname}=`);\n          urlQueryParamString += '&';\n        } else {\n          urlQueryParamString += `${val.toString()}&`;\n        }\n      });\n      urlQueryParamString = urlQueryParamString.slice(0, -1);\n    }\n    fetchUrl = `${fetchUrl}${urlQueryParamString}`;\n\n    // Add authentication Query-Param if provided\n    this.api_keys\n      .filter((v) => (v.in === 'query'))\n      .forEach((v) => {\n        fetchUrl = `${fetchUrl}${fetchUrl.includes('?') ? '&' : '?'}${v.name}=${encodeURIComponent(v.finalKeyValue)}`;\n      });\n\n    // Final URL for API call\n    fetchUrl = `${this.serverUrl.replace(/\\/$/, '')}${fetchUrl}`;\n    if (fetchUrl.startsWith('http') === false) {\n      const url = new URL(fetchUrl, window.location.href);\n      curlUrl = url.href;\n    } else {\n      curlUrl = fetchUrl;\n    }\n    curl = `curl -X ${this.method.toUpperCase()} \"${curlUrl}\" \\\\\\n`;\n    const reqHeaders = new Headers();\n    if (acceptHeader) {\n      // Uses the acceptHeader from Response panel\n      reqHeaders.append('Accept', acceptHeader);\n      curlHeaders += ` -H \"Accept: ${acceptHeader}\" \\\\\\n`;\n    } else if (this.accept) {\n      reqHeaders.append('Accept', this.accept);\n      curlHeaders += ` -H \"Accept: ${this.accept}\" \\\\\\n`;\n    }\n\n    // Add Authentication Header if provided\n    this.api_keys\n      .filter((v) => (v.in === 'header'))\n      .forEach((v) => {\n        reqHeaders.append(v.name, v.finalKeyValue);\n        curlHeaders += ` -H \"${v.name}: ${v.finalKeyValue}\" \\\\\\n`;\n      });\n\n    // Add Header Params\n    headerParamEls.map((el) => {\n      if (el.value) {\n        reqHeaders.append(el.dataset.pname, el.value);\n        curlHeaders += ` -H \"${el.dataset.pname}: ${el.value}\" \\\\\\n`;\n      }\n    });\n\n    // Request Body Params\n    if (requestBodyContainerEl) {\n      const requestBodyType = requestBodyContainerEl.dataset.selectedRequestBodyType;\n      if (requestBodyType.includes('form-urlencoded')) {\n        // url-encoded Form Params (dynamic) - Parse JSON and generate Params\n        const formUrlDynamicTextAreaEl = requestPanelEl.querySelector(\"[data-ptype='dynamic-form']\");\n        if (formUrlDynamicTextAreaEl) {\n          const val = formUrlDynamicTextAreaEl.value;\n          const formUrlDynParams = new URLSearchParams();\n          let proceed = true;\n          let tmpObj;\n          if (val) {\n            try {\n              tmpObj = JSON.parse(val);\n            } catch (err) {\n              proceed = false;\n              console.warn('RapiDoc: Invalid JSON provided', err); // eslint-disable-line no-console\n            }\n          } else {\n            proceed = false;\n          }\n          if (proceed) {\n            for (const prop in tmpObj) {\n              formUrlDynParams.append(prop, JSON.stringify(tmpObj[prop]));\n            }\n            fetchOptions.body = formUrlDynParams;\n            curlData = ` -d ${formUrlDynParams.toString()} \\\\\\n`;\n          }\n        } else {\n          // url-encoded Form Params (regular)\n          const formUrlEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='form-urlencode']\")];\n          const formUrlParams = new URLSearchParams();\n          formUrlEls\n            .filter((v) => (v.type !== 'file'))\n            .forEach((el) => {\n              if (el.dataset.array === 'false') {\n                if (el.value) {\n                  formUrlParams.append(el.dataset.pname, el.value);\n                }\n              } else {\n                const vals = (el.value && Array.isArray(el.value)) ? el.value.join(',') : '';\n                formUrlParams.append(el.dataset.pname, vals);\n              }\n            });\n          fetchOptions.body = formUrlParams;\n          curlData = ` -d ${formUrlParams.toString()} \\\\\\n`;\n        }\n      } else if (requestBodyType.includes('form-data')) {\n        const formDataParams = new FormData();\n        const formDataEls = [...requestPanelEl.querySelectorAll(\"[data-ptype='form-data']\")];\n        formDataEls.forEach((el) => {\n          if (el.dataset.array === 'false') {\n            if (el.type === 'file' && el.files[0]) {\n              formDataParams.append(el.dataset.pname, el.files[0], el.files[0].name);\n              curlForm += ` -F \"${el.dataset.pname}=@${el.files[0].name}\" \\\\\\n`;\n            } else if (el.value) {\n              formDataParams.append(el.dataset.pname, el.value);\n              curlForm += ` -F \"${el.dataset.pname}=${el.value}\" \\\\\\n`;\n            }\n          } else if (el.value && Array.isArray(el.value)) {\n            el.value.forEach((v) => {\n              curlForm = `${curlForm} -F \"${el.dataset.pname}[]=${v}\" \\\\\\n`;\n            });\n            formDataParams.append(el.dataset.pname, el.value.join(','));\n          }\n        });\n        fetchOptions.body = formDataParams;\n      } else if (/^audio\\/|^image\\/|^video\\/|^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$/.test(requestBodyType)) {\n        const bodyParamFileEl = requestPanelEl.querySelector('.request-body-param-file');\n        if (bodyParamFileEl?.files[0]) {\n          fetchOptions.body = bodyParamFileEl.files[0]; // eslint-disable-line prefer-destructuring\n          curlData = ` --data-binary @${bodyParamFileEl.files[0].name} \\\\\\n`;\n        }\n      } else if (requestBodyType.includes('json') || requestBodyType.includes('xml') || requestBodyType.includes('text')) {\n        const exampleTextAreaEl = requestPanelEl.querySelector('.request-body-param-user-input');\n        if (exampleTextAreaEl?.value) {\n          fetchOptions.body = exampleTextAreaEl.value;\n          if (requestBodyType.includes('json')) {\n            try {\n              curlData = ` -d '${JSON.stringify(JSON.parse(exampleTextAreaEl.value))}' \\\\\\n`;\n            } catch (err) {\n              // Ignore.\n            }\n          }\n          if (!curlData) {\n            curlData = ` -d '${exampleTextAreaEl.value.replace(/'/g, '\\'\"\\'\"\\'')}' \\\\\\n`;\n          }\n        }\n      }\n      // Common for all request-body\n      if (!requestBodyType.includes('form-data')) {\n        // For multipart/form-data dont set the content-type to allow creation of browser generated part boundaries\n        reqHeaders.append('Content-Type', requestBodyType);\n      }\n      curlHeaders += ` -H \"Content-Type: ${requestBodyType}\" \\\\\\n`;\n    }\n    this.responseUrl = '';\n    this.responseHeaders = [];\n    this.curlSyntax = '';\n    this.responseStatus = 'success';\n    this.responseIsBlob = false;\n\n    this.respContentDisposition = '';\n    if (this.responseBlobUrl) {\n      URL.revokeObjectURL(this.responseBlobUrl);\n      this.responseBlobUrl = '';\n    }\n    this.curlSyntax = `${curl}${curlHeaders}${curlData}${curlForm}`;\n    if (this.fetchCredentials) {\n      fetchOptions.credentials = this.fetchCredentials;\n    }\n    const controller = new AbortController();\n    const { signal } = controller;\n    fetchOptions.headers = reqHeaders;\n    const fetchRequest = new Request(fetchUrl, fetchOptions);\n    this.dispatchEvent(new CustomEvent('before-try', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        request: fetchRequest,\n        controller,\n      },\n    }));\n\n    let fetchResponse;\n    let responseClone;\n    try {\n      let respBlob;\n      let respJson;\n      let respText;\n      tryBtnEl.disabled = true;\n      this.responseText = '⌛';\n      this.responseMessage = '';\n      this.requestUpdate();\n      const startTime = performance.now();\n      fetchResponse = await fetch(fetchRequest, { signal });\n      const endTime = performance.now();\n      responseClone = fetchResponse.clone(); // create a response clone to allow reading response body again (response.json, response.text etc)\n      tryBtnEl.disabled = false;\n      this.responseMessage = html`${fetchResponse.statusText ? `${fetchResponse.statusText}:${fetchResponse.status}` : fetchResponse.status} <div class=\"rsp-msg\"> Took ${Math.round(endTime - startTime)} milliseconds </div>`;\n      this.responseUrl = fetchResponse.url;\n      const respHeadersObj = {};\n      fetchResponse.headers.forEach((hdrVal, hdr) => {\n        respHeadersObj[hdr] = hdrVal;\n        this.responseHeaders = `${this.responseHeaders}${hdr}: ${hdrVal}\\n`;\n      });\n      const contentType = fetchResponse.headers.get('content-type');\n      const respEmpty = (await fetchResponse.clone().text()).length === 0;\n      if (respEmpty) {\n        this.responseText = '';\n      } else if (contentType) {\n        if (contentType === 'application/x-ndjson') {\n          this.responseText = await fetchResponse.text();\n        } else if (contentType.includes('json')) {\n          if ((/charset=[^\"']+/).test(contentType)) {\n            const encoding = contentType.split('charset=')[1];\n            const buffer = await fetchResponse.arrayBuffer();\n            try {\n              respText = new TextDecoder(encoding).decode(buffer);\n            } catch {\n              respText = new TextDecoder('utf-8').decode(buffer);\n            }\n            try {\n              respJson = JSON.parse(respText);\n              this.responseText = JSON.stringify(respJson, null, 2);\n            } catch {\n              this.responseText = respText;\n            }\n          } else {\n            respJson = await fetchResponse.json();\n            this.responseText = JSON.stringify(respJson, null, 2);\n          }\n        // eslint-disable-next-line no-useless-escape\n        } else if (/^font\\/|tar$|zip$|7z$|rtf$|msword$|excel$|\\/pdf$|\\/octet-stream$|^application\\/vnd\\./.test(contentType)) {\n          this.responseIsBlob = true;\n          this.responseBlobType = 'download';\n        } else if (/^audio|^image|^video/.test(contentType)) {\n          this.responseIsBlob = true;\n          this.responseBlobType = 'view';\n        } else {\n          respText = await fetchResponse.text();\n          if (contentType.includes('xml')) {\n            this.responseText = formatXml(respText, { textNodesOnSameLine: true, indentor: '  ' });\n          } else {\n            this.responseText = respText;\n          }\n        }\n        if (this.responseIsBlob) {\n          const contentDisposition = fetchResponse.headers.get('content-disposition');\n          this.respContentDisposition = contentDisposition ? contentDisposition.split('filename=')[1].replace(/\"|'/g, '') : 'filename';\n          respBlob = await fetchResponse.blob();\n          this.responseBlobUrl = URL.createObjectURL(respBlob);\n        }\n      } else {\n        respText = await fetchResponse.text();\n        this.responseText = respText;\n      }\n      this.dispatchEvent(new CustomEvent('after-try', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          request: fetchRequest,\n          response: responseClone,\n          responseHeaders: respHeadersObj,\n          responseBody: respJson || respText || respBlob,\n          responseStatus: responseClone.ok,\n        },\n      }));\n    } catch (err) {\n      tryBtnEl.disabled = false;\n      if (err.name === 'AbortError') {\n        this.dispatchEvent(new CustomEvent('request-aborted', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            err,\n            request: fetchRequest,\n          },\n        }));\n        this.responseMessage = 'Request Aborted';\n      } else {\n        this.dispatchEvent(new CustomEvent('after-try', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            err,\n            request: fetchRequest,\n          },\n        }));\n        this.responseMessage = `${err.message}`;\n        this.responseStatus = 'error';\n      }\n    }\n    this.requestUpdate();\n  }\n\n  onAddRemoveFileInput(e, pname, ptype) {\n    if (e.target.tagName.toLowerCase() !== 'button') {\n      return;\n    }\n\n    if (e.target.classList.contains('file-input-remove-btn')) {\n      // Remove File Input Set\n      const el = e.target.closest('.input-set');\n      el.remove();\n      return;\n    }\n    const el = e.target.closest('.file-input-container');\n\n    // Add File Input Set\n\n    // Container\n    const newInputContainerEl = document.createElement('div');\n    newInputContainerEl.setAttribute('class', 'input-set row');\n\n    // File Input\n    const newInputEl = document.createElement('input');\n    newInputEl.type = 'file';\n    newInputEl.style = 'width:200px; margin-top:2px;';\n    newInputEl.setAttribute('data-pname', pname);\n    newInputEl.setAttribute('data-ptype', ptype.includes('form-urlencode') ? 'form-urlencode' : 'form-data');\n    newInputEl.setAttribute('data-array', 'false');\n    newInputEl.setAttribute('data-file-array', 'true');\n\n    // Remover Button\n    const newRemoveBtnEl = document.createElement('button');\n    newRemoveBtnEl.setAttribute('class', 'file-input-remove-btn');\n    newRemoveBtnEl.innerHTML = '&#x2715;';\n\n    newInputContainerEl.appendChild(newInputEl);\n    newInputContainerEl.appendChild(newRemoveBtnEl);\n    el.insertBefore(newInputContainerEl, e.target);\n    // el.appendChild(newInputContainerEl);\n  }\n\n  clearResponseData() {\n    this.responseUrl = '';\n    this.responseHeaders = '';\n    this.responseText = '';\n    this.responseStatus = 'success';\n    this.responseMessage = '';\n    this.responseIsBlob = false;\n    this.responseBlobType = '';\n    this.respContentDisposition = '';\n    if (this.responseBlobUrl) {\n      URL.revokeObjectURL(this.responseBlobUrl);\n      this.responseBlobUrl = '';\n    }\n  }\n\n  disconnectedCallback() {\n    // Cleanup ObjectURL forthe blob data if this component created one\n    if (this.responseBlobUrl) {\n      URL.revokeObjectURL(this.responseBlobUrl);\n      this.responseBlobUrl = '';\n    }\n    super.disconnectedCallback();\n  }\n}\n\n// Register the element with the browser\ncustomElements.define('api-request', ApiRequest);\n","/* Generates an schema object containing type and constraint info */\nexport function getTypeInfo(schema) {\n  if (!schema) {\n    return;\n  }\n  let dataType = '';\n  let constrain = '';\n  // let examples;\n\n  if (schema.$ref) {\n    const n = schema.$ref.lastIndexOf('/');\n    const schemaNode = schema.$ref.substring(n + 1);\n    dataType = `{recursive: ${schemaNode}} `;\n  } else if (schema.type) {\n    dataType = Array.isArray(schema.type) ? schema.type.join(schema.length === 2 ? ' or ' : ' | ') : schema.type;\n    if (schema.format || schema.enum) {\n      dataType = dataType.replace('string', schema.enum ? 'enum' : schema.format);\n    }\n    if (schema.nullable) {\n      dataType += '|null';\n    }\n  } else if (Object.keys(schema).length === 0) {\n    dataType = 'any';\n  } else {\n    dataType = '{missing-type-info}';\n  }\n\n  const info = {\n    type: dataType,\n    format: schema.format || '',\n    pattern: (schema.pattern && !schema.enum) ? schema.pattern : '',\n    readOrWriteOnly: (schema.readOnly ? '🆁' : schema.writeOnly ? '🆆' : ''),\n    deprecated: schema.deprecated ? '❌' : '',\n    examples: schema.examples || schema.example,\n    default: schema.default != null ? `${schema.default}` : '',\n    description: schema.description || '',\n    constrain: '',\n    allowedValues: '',\n    arrayType: '',\n    html: '',\n  };\n\n  if (info.type === '{recursive}') {\n    info.description = schema.$ref.substring(schema.$ref.lastIndexOf('/') + 1);\n  } else if (info.type === '{missing-type-info}' || info.type === 'any') {\n    info.description = info.description || '';\n  }\n\n  // Set Allowed Values\n  info.allowedValues = Array.isArray(schema.enum) ? schema.enum.join(' | ') : '';\n  if (dataType === 'array' && schema.items) {\n    const arrayItemType = schema.items?.type;\n    const arrayItemDefault = schema.items?.default !== undefined ? schema.items.default : '';\n\n    info.arrayType = `${schema.type} of ${Array.isArray(arrayItemType) ? arrayItemType.join('') : arrayItemType}`;\n    info.default = arrayItemDefault;\n    info.allowedValues = Array.isArray(schema.items?.enum) ? schema.items.enum.join(' | ') : '';\n  }\n  if (dataType.match(/integer|number/g)) {\n    if (schema.minimum !== undefined || schema.exclusiveMinimum !== undefined) {\n      constrain += schema.minimum !== undefined ? `Min ${schema.minimum}` : `More than ${schema.exclusiveMinimum}`;\n    }\n    if (schema.maximum !== undefined || schema.exclusiveMaximum !== undefined) {\n      constrain += schema.maximum !== undefined ? `${constrain ? ' | ' : ''}Max ${schema.maximum}` : `${constrain ? ' | ' : ''}Less than ${schema.exclusiveMaximum}`;\n    }\n    if (schema.multipleOf !== undefined) {\n      constrain += `${constrain ? ' | ' : ''} multiple of ${schema.multipleOf}`;\n    }\n  }\n  if (dataType.match(/string/g)) {\n    if (schema.minLength !== undefined && schema.maxLength !== undefined) {\n      constrain += `${constrain ? ' | ' : ''}${schema.minLength} to ${schema.maxLength} chars`;\n    } else if (schema.minLength !== undefined) {\n      constrain += `${constrain ? ' | ' : ''}Min ${schema.minLength} chars`;\n    } else if (schema.maxLength !== undefined) {\n      constrain += `Max ${constrain ? ' | ' : ''}${schema.maxLength} chars`;\n    }\n  }\n  info.constrain = constrain;\n  info.html = `${info.type}~|~${info.readOrWriteOnly}~|~${info.constrain}~|~${info.default}~|~${info.allowedValues}~|~${info.pattern}~|~${info.description}~|~${schema.title || ''}~|~${info.deprecated ? 'deprecated' : ''}`;\n  return info;\n}\nexport function nestExampleIfPresent(example) {\n  if (typeof example === 'boolean') {\n    return {\n      Example: { value: `${example}` },\n    };\n  }\n  if (example === '') {\n    return {\n      Example: { value: '' },\n    };\n  }\n  return example ? { Example: { value: example } } : example;\n}\nexport function normalizeExamples(examples, dataType = 'string') {\n  if (!examples) {\n    return {\n      exampleVal: '',\n      exampleList: [],\n    };\n  }\n\n  if (examples.constructor === Object) {\n    const exampleValAndDescr = Object.values(examples);\n    const exampleVal = exampleValAndDescr.length > 0\n      ? typeof exampleValAndDescr[0].value === 'boolean' || typeof exampleValAndDescr[0].value === 'number'\n        ? exampleValAndDescr[0].value.toString()\n        : exampleValAndDescr[0].value\n      : '';\n    const exampleList = Object.values(examples).map((v) => ({\n      value: typeof v.value === 'boolean' || typeof v.value === 'number' ? v.value.toString() : v.value,\n      summary: v.summary,\n      description: v.description,\n    }));\n    return { exampleVal, exampleList };\n  }\n\n  // This is non-standard way to provide example but will support for now\n  if (!Array.isArray(examples)) {\n    examples = examples ? [examples] : [];\n  }\n\n  if (examples.length === 0) {\n    return {\n      exampleVal: '',\n      exampleList: [],\n    };\n  }\n\n  if (dataType === 'array') {\n    const [exampleVal] = examples;\n    const exampleList = examples.map((v) => ({ value: v }));\n    return { exampleVal, exampleList };\n  }\n\n  const exampleVal = examples[0].toString();\n  const exampleList = examples.map((v) => ({ value: v.toString() }));\n  return { exampleVal, exampleList };\n}\n\nexport function anyExampleWithSummaryOrDescription(examples) {\n  return examples.some((x) => x.summary?.length > 0 || x.description?.length > 0);\n}\n\nexport function getSampleValueByType(schemaObj) {\n  const example = schemaObj.examples\n    ? schemaObj.examples[0]\n    : schemaObj.example === null\n      ? null\n      : schemaObj.example || undefined;\n  if (example === '') { return ''; }\n  if (example === null) { return null; }\n  if (example === 0) { return 0; }\n  if (example) { return example; }\n\n  if (Object.keys(schemaObj).length === 0) {\n    return null;\n  }\n  if (schemaObj.$ref) {\n    // Indicates a Circular ref\n    return schemaObj.$ref;\n  }\n  const typeValue = Array.isArray(schemaObj.type) ? schemaObj.type[0] : schemaObj.type;\n  if (!typeValue) {\n    return '?';\n  }\n  if (typeValue.match(/^integer|^number/g)) {\n    const multipleOf = Number.isNaN(Number(schemaObj.multipleOf)) ? undefined : Number(schemaObj.multipleOf);\n    const maximum = Number.isNaN(Number(schemaObj.maximum)) ? undefined : Number(schemaObj.maximum);\n    const minimumPossibleVal = Number.isNaN(Number(schemaObj.minimum))\n      ? Number.isNaN(Number(schemaObj.exclusiveMinimum))\n        ? maximum || 0\n        : Number(schemaObj.exclusiveMinimum) + (typeValue.startsWith('integer') ? 1 : 0.001)\n      : Number(schemaObj.minimum);\n    const finalVal = multipleOf\n      ? multipleOf >= minimumPossibleVal\n        ? multipleOf\n        : minimumPossibleVal % multipleOf === 0\n          ? minimumPossibleVal\n          : Math.ceil(minimumPossibleVal / multipleOf) * multipleOf\n      : minimumPossibleVal;\n    return finalVal;\n  }\n  if (typeValue.match(/^boolean/g)) { return false; }\n  if (typeValue.match(/^null/g)) { return null; }\n  if (typeValue.match(/^string/g)) {\n    if (schemaObj.enum) { return schemaObj.enum[0]; }\n    if (schemaObj.pattern) { return schemaObj.pattern; }\n    if (schemaObj.format) {\n      const u = `${Date.now().toString(16)}${Math.random().toString(16)}0`.repeat(16);\n      switch (schemaObj.format.toLowerCase()) {\n        case 'url':\n        case 'uri':\n          return 'http://example.com';\n        case 'date':\n          return (new Date(0)).toISOString().split('T')[0];\n        case 'time':\n          return (new Date(0)).toISOString().split('T')[1];\n        case 'date-time':\n          return (new Date(0)).toISOString();\n        case 'duration':\n          return 'P3Y6M4DT12H30M5S'; // P=Period 3-Years 6-Months 4-Days 12-Hours 30-Minutes 5-Seconds\n        case 'email':\n        case 'idn-email':\n          return 'user@example.com';\n        case 'hostname':\n        case 'idn-hostname':\n          return 'www.example.com';\n        case 'ipv4':\n          return '198.51.100.42';\n        case 'ipv6':\n          return '2001:0db8:5b96:0000:0000:426f:8e17:642a';\n        case 'uuid':\n          return [u.substr(0, 8), u.substr(8, 4), `4000-8${u.substr(13, 3)}`, u.substr(16, 12)].join('-');\n        default:\n          return '';\n      }\n    } else {\n      const minLength = Number.isNaN(schemaObj.minLength) ? undefined : Number(schemaObj.minLength);\n      const maxLength = Number.isNaN(schemaObj.maxLength) ? undefined : Number(schemaObj.maxLength);\n      const finalLength = minLength || (maxLength > 6 ? 6 : maxLength || undefined);\n      return finalLength ? 'A'.repeat(finalLength) : 'string';\n    }\n  }\n  // If type cannot be determined\n  return '?';\n}\n\n/*\njson2xml- TestCase\n  {\n    'prop1' : 'one',\n    'prop2' : 'two',\n    'prop3' : [ 'a', 'b', 'c' ],\n    'prop4' : {\n      'ob1' : 'val-1',\n      'ob2' : 'val-2'\n    }\n  }\n  <root>\n    <prop1>simple</prop1>\n    <prop2>\n      <0> a </0>\n      <1> b </1>\n      <2> c </2>\n    </prop2>\n    <prop3>\n      <ob1>val-1</ob1>\n      <ob2>val-2</ob2>\n    </prop3>\n  </root>\n*/\nexport function json2xml(obj, level = 1) {\n  const indent = '  '.repeat(level);\n  let xmlText = '';\n  if (level === 1 && typeof obj !== 'object') {\n    return `\\n${indent}${obj.toString()}`;\n  }\n  for (const prop in obj) {\n    if (Array.isArray(obj[prop])) {\n      xmlText = `${xmlText}\\n${indent}<${prop}> ${json2xml(obj[prop], level + 1)}\\n${indent}</${prop}>`;\n    } else if (typeof obj[prop] === 'object') {\n      xmlText = `${xmlText}\\n${indent}<${prop}> ${json2xml(obj[prop], level + 1)}\\n${indent}</${prop}>`;\n    } else {\n      xmlText = `${xmlText}\\n${indent}<${prop}> ${obj[prop].toString()} </${prop}>`;\n    }\n  }\n  return xmlText;\n}\n\nfunction addSchemaInfoToExample(schema, obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return;\n  }\n  if (schema.title) {\n    obj['::TITLE'] = schema.title;\n  }\n  if (schema.description) {\n    obj['::DESCRIPTION'] = schema.description;\n  }\n}\n\nfunction removeTitlesAndDescriptions(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return;\n  }\n  delete obj['::TITLE'];\n  delete obj['::DESCRIPTION'];\n  for (const k in obj) {\n    removeTitlesAndDescriptions(obj[k]);\n  }\n}\n\nfunction addPropertyExampleToObjectExamples(example, obj, propertyKey) {\n  for (const key in obj) {\n    obj[key][propertyKey] = example;\n  }\n}\n\nfunction mergePropertyExamples(obj, propertyName, propExamples) {\n  // Create an example for each variant of the propertyExample, merging them with the current (parent) example\n  let i = 0;\n  const maxCombinations = 10;\n  const mergedObj = {};\n  for (const exampleKey in obj) {\n    for (const propExampleKey in propExamples) {\n      mergedObj[`example-${i}`] = { ...obj[exampleKey] };\n      mergedObj[`example-${i}`][propertyName] = propExamples[propExampleKey];\n      i++;\n      if (i >= maxCombinations) {\n        break;\n      }\n    }\n    if (i >= maxCombinations) {\n      break;\n    }\n  }\n  return mergedObj;\n}\n\n/* For changing JSON-Schema to a Sample Object, as per the schema (to generate examples based on schema) */\nexport function schemaToSampleObj(schema, config = { }) {\n  let obj = {};\n  if (!schema) {\n    return;\n  }\n\n  if (schema.allOf) {\n    const objWithAllProps = {};\n\n    if (schema.allOf.length === 1 && !schema.allOf[0].properties && !schema.allOf[0].items) {\n      // If allOf has single item and the type is not an object or array, then its a primitive\n      if (schema.allOf[0].$ref) {\n        return '{  }';\n      }\n      if (schema.allOf[0].readOnly && config.includeReadOnly) {\n        const tempSchema = schema.allOf[0];\n        return getSampleValueByType(tempSchema);\n      }\n      return;\n    }\n\n    schema.allOf.forEach((v) => {\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\n        const partialObj = schemaToSampleObj(v, config);\n        Object.assign(objWithAllProps, partialObj);\n      } else if (v.type === 'array' || v.items) {\n        const partialObj = [schemaToSampleObj(v, config)];\n        Object.assign(objWithAllProps, partialObj);\n      } else if (v.type) {\n        const prop = `prop${Object.keys(objWithAllProps).length}`;\n        objWithAllProps[prop] = getSampleValueByType(v);\n      } else {\n        return '';\n      }\n    });\n\n    obj = objWithAllProps;\n  } else if (schema.oneOf) {\n    // 1. First create example with scheme.properties\n    const objWithSchemaProps = {};\n    if (schema.properties) {\n      for (const propertyName in schema.properties) {\n        objWithSchemaProps[propertyName] = getSampleValueByType(schema.properties[propertyName]);\n      }\n    }\n\n    if (schema.oneOf.length > 0) {\n      /*\n      oneOf:\n        - type: object\n          properties:\n            option1_PropA:\n              type: string\n            option1_PropB:\n              type: string\n        - type: object\n          properties:\n            option2_PropX:\n              type: string\n      properties:\n        prop1:\n          type: string\n        prop2:\n          type: string\n          minLength: 10\n\n      The aboove Schem should generate the following 2 examples\n\n      Example-1\n      {\n        prop1: 'string',\n        prop2: 'AAAAAAAAAA',       <-- min-length 10\n        option1_PropA: 'string',\n        option1_PropB: 'string'\n      }\n\n      Example-2\n      {\n        prop1: 'string',\n        prop2: 'AAAAAAAAAA',       <-- min-length 10\n        option2_PropX: 'string'\n      }\n      */\n      let i = 0;\n      // Merge all examples of each oneOf-schema\n      for (const key in schema.oneOf) {\n        const oneOfSamples = schemaToSampleObj(schema.oneOf[key], config);\n        for (const sampleKey in oneOfSamples) {\n          // 2. In the final example include a one-of item along with properties\n          let finalExample;\n          if (Object.keys(objWithSchemaProps).length > 0) {\n            if (oneOfSamples[sampleKey] === null || typeof oneOfSamples[sampleKey] !== 'object') {\n              // This doesn't really make sense since every oneOf schema _should_ be an object if there are common properties, so we'll skip this\n              continue;\n            } else {\n              finalExample = Object.assign(oneOfSamples[sampleKey], objWithSchemaProps);\n            }\n          } else {\n            finalExample = oneOfSamples[sampleKey];\n          }\n          obj[`example-${i}`] = finalExample;\n          addSchemaInfoToExample(schema.oneOf[key], obj[`example-${i}`]);\n          i++;\n        }\n      }\n    }\n  } else if (schema.anyOf) {\n    // First generate values for regular properties\n    let commonObj;\n    if (schema.type === 'object' || schema.properties) {\n      commonObj = { 'example-0': {} };\n      for (const propertyName in schema.properties) {\n        if (schema.example) {\n          commonObj = schema;\n          break;\n        }\n        if (schema.properties[propertyName].deprecated && !config.includeDeprecated) { continue; }\n        if (schema.properties[propertyName].readOnly && !config.includeReadOnly) { continue; }\n        if (schema.properties[propertyName].writeOnly && !config.includeWriteOnly) { continue; }\n        commonObj = mergePropertyExamples(commonObj, propertyName, schemaToSampleObj(schema.properties[propertyName], config));\n      }\n    }\n\n    // Combine every variant of the regular properties with every variant of the anyOf samples\n    let i = 0;\n    for (const key in schema.anyOf) {\n      const anyOfSamples = schemaToSampleObj(schema.anyOf[key], config);\n      for (const sampleKey in anyOfSamples) {\n        if (typeof commonObj !== 'undefined') {\n          for (const commonKey in commonObj) {\n            obj[`example-${i}`] = { ...commonObj[commonKey], ...anyOfSamples[sampleKey] };\n          }\n        } else {\n          obj[`example-${i}`] = anyOfSamples[sampleKey];\n        }\n        addSchemaInfoToExample(schema.anyOf[key], obj[`example-${i}`]);\n        i++;\n      }\n    }\n  } else if (schema.type === 'object' || schema.properties) {\n    obj['example-0'] = {};\n    addSchemaInfoToExample(schema, obj['example-0']);\n    if (schema.example) {\n      obj['example-0'] = schema.example;\n    } else {\n      for (const propertyName in schema.properties) {\n        if (schema.properties[propertyName]?.deprecated && !config.includeDeprecated) { continue; }\n        if (schema.properties[propertyName]?.readOnly && !config.includeReadOnly) { continue; }\n        if (schema.properties[propertyName]?.writeOnly && !config.includeWriteOnly) { continue; }\n        if (schema.properties[propertyName]?.type === 'array' || schema.properties[propertyName]?.items) {\n          if (schema.properties[propertyName].example) {\n            addPropertyExampleToObjectExamples(schema.properties[propertyName].example, obj, propertyName);\n          } else if (schema.properties[propertyName]?.items?.example) { // schemas and properties support single example but not multiple examples.\n            addPropertyExampleToObjectExamples([schema.properties[propertyName].items.example], obj, propertyName);\n          } else {\n            const itemSamples = schemaToSampleObj(schema.properties[propertyName].items, config);\n            const arraySamples = [];\n            for (const key in itemSamples) {\n              arraySamples[key] = [itemSamples[key]];\n            }\n            obj = mergePropertyExamples(obj, propertyName, arraySamples);\n          }\n          continue;\n        }\n        obj = mergePropertyExamples(obj, propertyName, schemaToSampleObj(schema.properties[propertyName], config));\n      }\n    }\n  } else if (schema.type === 'array' || schema.items) {\n    if (schema.items || schema.example) {\n      if (schema.example) {\n        obj['example-0'] = schema.example;\n      } else if (schema.items?.example) { // schemas and properties support single example but not multiple examples.\n        obj['example-0'] = [schema.items.example];\n      } else {\n        const samples = schemaToSampleObj(schema.items, config);\n        let i = 0;\n        for (const key in samples) {\n          obj[`example-${i}`] = [samples[key]];\n          addSchemaInfoToExample(schema.items, obj[`example-${i}`]);\n          i++;\n        }\n      }\n    } else {\n      obj['example-0'] = [];\n    }\n  } else {\n    return { 'example-0': getSampleValueByType(schema) };\n  }\n  return obj;\n}\n\nfunction generateMarkdownForArrayAndObjectDescription(schema, level = 0) {\n  let markdown = '';\n  if (schema.title) {\n    markdown = `**${schema.title}:** `;\n  }\n  if (schema.description) {\n    markdown = `${markdown} ${schema.description} ${schema.minItems || schema.maxItems ? '<span class=\"more-content\">⤵</span><br/>' : ''}`;\n  }\n  if (schema.minItems) {\n    markdown = `${markdown} **Min Items:** ${schema.minItems}`;\n  }\n  if (schema.maxItems) {\n    markdown = `${markdown} **Max Items:** ${schema.maxItems}`;\n  }\n  if (level > 0 && schema.items?.description) {\n    let itemsMarkdown = '';\n    if (schema.items.minProperties) {\n      itemsMarkdown = `**Min Properties:** ${schema.items.minProperties}`;\n    }\n    if (schema.items.maxProperties) {\n      itemsMarkdown = `${itemsMarkdown} **Max Properties:** ${schema.items.maxProperties}`;\n    }\n    markdown = `${markdown} ⮕ ${itemsMarkdown} [ ${schema.items.description} ] `;\n  }\n  return markdown;\n}\n/**\n * For changing OpenAPI-Schema to an Object Notation,\n * This Object would further be an input to UI Components to generate an Object-Tree\n * @param {object} schema - Schema object from OpenAPI spec\n * @param {object} obj - recursivly pass this object to generate object notation\n * @param {number} level - recursion level\n * @param {string} suffix - used for suffixing property names to avoid duplicate props during object composion\n */\nexport function schemaInObjectNotation(schema, obj, level = 0, suffix = '') {\n  if (!schema) {\n    return;\n  }\n  if (schema.allOf) {\n    const objWithAllProps = {};\n    if (schema.allOf.length === 1 && !schema.allOf[0].properties && !schema.allOf[0].items) {\n      // If allOf has single item and the type is not an object or array, then its a primitive\n      const tempSchema = schema.allOf[0];\n      return `${getTypeInfo(tempSchema).html}`;\n    }\n    // If allOf is an array of multiple elements, then all the keys makes a single object\n    schema.allOf.map((v, i) => {\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\n        const propSuffix = (v.anyOf || v.oneOf) && i > 0 ? i : '';\n        const partialObj = schemaInObjectNotation(v, {}, (level + 1), propSuffix);\n        Object.assign(objWithAllProps, partialObj);\n      } else if (v.type === 'array' || v.items) {\n        const partialObj = schemaInObjectNotation(v, {}, (level + 1));\n        Object.assign(objWithAllProps, partialObj);\n      } else if (v.type) {\n        const prop = `prop${Object.keys(objWithAllProps).length}`;\n        const typeObj = getTypeInfo(v);\n        objWithAllProps[prop] = `${typeObj.html}`;\n      } else {\n        return '';\n      }\n    });\n    obj = objWithAllProps;\n  } else if (schema.anyOf || schema.oneOf) {\n    obj['::description'] = schema.description || '';\n    // 1. First iterate the regular properties\n    if (schema.type === 'object' || schema.properties) {\n      obj['::description'] = schema.description || '';\n      obj['::type'] = 'object';\n      // obj['::deprecated'] = schema.deprecated || false;\n      for (const key in schema.properties) {\n        if (schema.required && schema.required.includes(key)) {\n          obj[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n        } else {\n          obj[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n        }\n      }\n    }\n    // 2. Then show allof/anyof objects\n    const objWithAnyOfProps = {};\n    const xxxOf = schema.anyOf ? 'anyOf' : 'oneOf';\n    schema[xxxOf].forEach((v, index) => {\n      if (v.type === 'object' || v.properties || v.allOf || v.anyOf || v.oneOf) {\n        const partialObj = schemaInObjectNotation(v, {});\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`] = partialObj;\n        objWithAnyOfProps['::type'] = 'xxx-of-option';\n      } else if (v.type === 'array' || v.items) {\n        // This else-if block never seems to get executed\n        const partialObj = schemaInObjectNotation(v, {});\n        objWithAnyOfProps[`::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`] = partialObj;\n        objWithAnyOfProps['::type'] = 'xxx-of-array';\n      } else {\n        const prop = `::OPTION~${index + 1}${v.title ? `~${v.title}` : ''}`;\n        objWithAnyOfProps[prop] = `${getTypeInfo(v).html}`;\n        objWithAnyOfProps['::type'] = 'xxx-of-option';\n      }\n    });\n    obj[(schema.anyOf ? `::ANY~OF ${suffix}` : `::ONE~OF ${suffix}`)] = objWithAnyOfProps;\n    obj['::type'] = 'xxx-of';\n  } else if (Array.isArray(schema.type)) {\n    // When a property has multiple types, then check further if any of the types are array or object, if yes then modify the schema using one-of\n    // Clone the schema - as it will be modified to replace multi-data-types with one-of;\n    const subSchema = JSON.parse(JSON.stringify(schema));\n    const primitiveType = [];\n    const complexTypes = [];\n    subSchema.type.forEach((v) => {\n      if (v.match(/integer|number|string|null|boolean/g)) {\n        primitiveType.push(v);\n      } else if (v === 'array' && typeof subSchema.items?.type === 'string' && subSchema.items?.type.match(/integer|number|string|null|boolean/g)) {\n        // Array with primitive types should also be treated as primitive type\n        if (subSchema.items.type === 'string' && subSchema.items.format) {\n          primitiveType.push(`[${subSchema.items.format}]`);\n        } else {\n          primitiveType.push(`[${subSchema.items.type}]`);\n        }\n      } else {\n        complexTypes.push(v);\n      }\n    });\n    let multiPrimitiveTypes;\n    if (primitiveType.length > 0) {\n      subSchema.type = primitiveType.join(primitiveType.length === 2 ? ' or ' : ' | ');\n      multiPrimitiveTypes = getTypeInfo(subSchema);\n      if (complexTypes.length === 0) {\n        return `${multiPrimitiveTypes?.html || ''}`;\n      }\n    }\n    if (complexTypes.length > 0) {\n      obj['::type'] = 'xxx-of';\n      const multiTypeOptions = {\n        '::type': 'xxx-of-option',\n      };\n\n      // Generate ONE-OF options for complexTypes\n      complexTypes.forEach((v, i) => {\n        if (v === 'null') {\n          multiTypeOptions[`::OPTION~${i + 1}`] = 'NULL~|~~|~~|~~|~~|~~|~~|~~|~';\n        } else if ('integer, number, string, boolean,'.includes(`${v},`)) {\n          subSchema.type = Array.isArray(v) ? v.join(' | ') : v;\n          const primitiveTypeInfo = getTypeInfo(subSchema);\n          multiTypeOptions[`::OPTION~${i + 1}`] = primitiveTypeInfo.html;\n        } else if (v === 'object') {\n          // If object type iterate all the properties and create an object-type-option\n          const objTypeOption = {\n            '::title': schema.title || '',\n            '::description': schema.description || '',\n            '::type': 'object',\n            '::deprecated': schema.deprecated || false,\n          };\n          for (const key in schema.properties) {\n            if (schema.required && schema.required.includes(key)) {\n              objTypeOption[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n            } else {\n              objTypeOption[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n            }\n          }\n          multiTypeOptions[`::OPTION~${i + 1}`] = objTypeOption;\n        } else if (v === 'array') {\n          multiTypeOptions[`::OPTION~${i + 1}`] = {\n            '::title': schema.title || '',\n            '::description': schema.description || '',\n            '::type': 'array',\n            '::props': schemaInObjectNotation(schema.items, {}, (level + 1)),\n          };\n        }\n      });\n      multiTypeOptions[`::OPTION~${complexTypes.length + 1}`] = multiPrimitiveTypes?.html || '';\n      obj['::ONE~OF'] = multiTypeOptions;\n    }\n  } else if (schema.type === 'object' || schema.properties) { // If Object\n    obj['::title'] = schema.title || '';\n    obj['::description'] = generateMarkdownForArrayAndObjectDescription(schema, level);\n    obj['::type'] = 'object';\n    if ((Array.isArray(schema.type) && schema.type.includes('null')) || schema.nullable) {\n      obj['::dataTypeLabel'] = 'object or null';\n    }\n    obj['::deprecated'] = schema.deprecated || false;\n    obj['::readwrite'] = schema.readOnly ? 'readonly' : schema.writeOnly ? 'writeonly' : '';\n    for (const key in schema.properties) {\n      if (schema.required && schema.required.includes(key)) {\n        obj[`${key}*`] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n      } else {\n        obj[key] = schemaInObjectNotation(schema.properties[key], {}, (level + 1));\n      }\n    }\n    if (schema.additionalProperties) {\n      obj['<any-key>'] = schemaInObjectNotation(schema.additionalProperties, {});\n    }\n  } else if (schema.type === 'array' || schema.items) { // If Array\n    obj['::title'] = schema.title || '';\n    obj['::description'] = generateMarkdownForArrayAndObjectDescription(schema, level);\n    obj['::type'] = 'array';\n    if ((Array.isArray(schema.type) && schema.type.includes('null')) || schema.nullable) {\n      obj['::dataTypeLabel'] = 'array or null';\n    }\n    obj['::deprecated'] = schema.deprecated || false;\n    obj['::readwrite'] = schema.readOnly ? 'readonly' : schema.writeOnly ? 'writeonly' : '';\n    if (schema.items?.items) {\n      obj['::array-type'] = schema.items.items.type;\n    }\n    obj['::props'] = schemaInObjectNotation(schema.items, {}, (level + 1));\n  } else {\n    const typeObj = getTypeInfo(schema);\n    if (typeObj?.html) {\n      return `${typeObj.html}`;\n    }\n    return '';\n  }\n  return obj;\n}\n\n/* Create Example object */\nexport function generateExample(schema, mimeType, examples = '', example = '', includeReadOnly = true, includeWriteOnly = true, outputType = 'json', includeGeneratedExample = false) {\n  const finalExamples = [];\n  // First check if examples is provided\n  if (examples) {\n    for (const eg in examples) {\n      let egContent = '';\n      let egFormat = 'json';\n      if (mimeType?.toLowerCase().includes('json')) {\n        if (outputType === 'text') {\n          egContent = typeof examples[eg].value === 'string' ? examples[eg].value : JSON.stringify(examples[eg].value, undefined, 2);\n          egFormat = 'text';\n        } else {\n          egContent = examples[eg].value;\n          if (typeof examples[eg].value === 'string') {\n            try {\n              const fixedJsonString = examples[eg].value.replace((/([\\w]+)(:)/g), '\"$1\"$2').replace((/'/g), '\"');\n              egContent = JSON.parse(fixedJsonString);\n              egFormat = 'json';\n            } catch (err) {\n              egFormat = 'text';\n              egContent = examples[eg].value;\n            }\n          }\n        }\n      } else {\n        egContent = examples[eg].value;\n        egFormat = 'text';\n      }\n\n      finalExamples.push({\n        exampleId: eg,\n        exampleSummary: examples[eg].summary || eg,\n        exampleDescription: examples[eg].description || '',\n        exampleType: mimeType,\n        exampleValue: egContent,\n        exampleFormat: egFormat,\n      });\n    }\n  } else if (example) {\n    let egContent = '';\n    let egFormat = 'json';\n    if (mimeType?.toLowerCase().includes('json')) {\n      if (outputType === 'text') {\n        egContent = typeof example === 'string' ? example : JSON.stringify(example, undefined, 2);\n        egFormat = 'text';\n      } else if (typeof example === 'object') {\n        egContent = example;\n        egFormat = 'json';\n      } else if (typeof example === 'string') {\n        try {\n          egContent = JSON.parse(example);\n          egFormat = 'json';\n        } catch (err) {\n          egFormat = 'text';\n          egContent = example;\n        }\n      }\n    } else {\n      egContent = example;\n      egFormat = 'text';\n    }\n    finalExamples.push({\n      exampleId: 'Example',\n      exampleSummary: '',\n      exampleDescription: '',\n      exampleType: mimeType,\n      exampleValue: egContent,\n      exampleFormat: egFormat,\n    });\n  }\n  // If schema-level examples are not provided or includeGeneratedExample === true then generate one based on the schema field types\n  if (finalExamples.length === 0 || includeGeneratedExample === true) {\n    if (schema) {\n      if (schema.example) { // Note: schema.examples (plurals) is not allowed as per spec\n        finalExamples.push({\n          exampleId: 'Example',\n          exampleSummary: '',\n          exampleDescription: '',\n          exampleType: mimeType,\n          exampleValue: schema.example,\n          exampleFormat: ((mimeType?.toLowerCase().includes('json') && typeof schema.example === 'object') ? 'json' : 'text'),\n        });\n      } else if (mimeType?.toLowerCase().includes('json') || mimeType?.toLowerCase().includes('text') || mimeType?.toLowerCase().includes('*/*') || mimeType?.toLowerCase().includes('xml')) {\n        let xmlRootStart = '';\n        let xmlRootEnd = '';\n        let exampleFormat = '';\n        let exampleValue = '';\n        if (mimeType?.toLowerCase().includes('xml')) {\n          xmlRootStart = (schema.xml && schema.xml.name) ? `<${schema.xml.name}>` : '<root>';\n          xmlRootEnd = (schema.xml && schema.xml.name) ? `</${schema.xml.name}>` : '</root>';\n          exampleFormat = 'text';\n        } else {\n          exampleFormat = outputType;\n        }\n\n        const samples = schemaToSampleObj(\n          schema,\n          {\n            includeReadOnly,\n            includeWriteOnly,\n            deprecated: true,\n          },\n        );\n\n        let i = 0;\n        for (const samplesKey in samples) {\n          if (!samples[samplesKey]) {\n            continue;\n          }\n          const summary = samples[samplesKey]['::TITLE'] || `Example ${++i}`;\n          const description = samples[samplesKey]['::DESCRIPTION'] || '';\n          removeTitlesAndDescriptions(samples[samplesKey]);\n\n          if (mimeType?.toLowerCase().includes('xml')) {\n            exampleValue = `${xmlRootStart}${json2xml(samples[samplesKey])}\\n${xmlRootEnd}`;\n          } else {\n            exampleValue = outputType === 'text' ? JSON.stringify(samples[samplesKey], null, 2) : samples[samplesKey];\n          }\n\n          finalExamples.push({\n            exampleId: samplesKey,\n            exampleSummary: summary,\n            exampleDescription: description,\n            exampleType: mimeType,\n            exampleFormat,\n            exampleValue,\n          });\n        }\n      } else if (mimeType?.toLowerCase().includes('jose')) {\n        finalExamples.push({\n          exampleId: 'Example',\n          exampleSummary: 'Base64 Encoded',\n          exampleDescription: '',\n          exampleType: mimeType,\n          exampleValue: schema.pattern || 'bXJpbg==',\n          exampleFormat: 'text',\n        });\n      } else {\n        finalExamples.push({\n          exampleId: 'Example',\n          exampleSummary: '',\n          exampleDescription: '',\n          exampleType: mimeType,\n          exampleValue: '',\n          exampleFormat: 'text',\n        });\n      }\n    } else {\n      // No Example or Schema provided (should never reach here)\n      finalExamples.push({\n        exampleId: 'Example',\n        exampleSummary: '',\n        exampleDescription: '',\n        exampleType: mimeType,\n        exampleValue: '',\n        exampleFormat: 'text',\n      });\n    }\n  }\n  return finalExamples;\n}\n\nfunction getSerializeStyleForContentType(contentType) {\n  if (contentType === 'application/json') {\n    return 'json';\n  }\n  if (contentType === 'application/xml') {\n    return 'xml';\n  }\n  return null;\n}\n\nexport function getSchemaFromParam(param) {\n  if (param.schema) {\n    return [param.schema, null, null];\n  }\n  if (param.content) {\n    // we gonna use the first content-encoding\n    for (const contentType of Object.keys(param.content)) {\n      if (param.content[contentType].schema) {\n        return [param.content[contentType].schema, getSerializeStyleForContentType(contentType), param.content[contentType]];\n      }\n    }\n  }\n  return [null, null, null];\n}\n","import { LitElement, html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport FontStyles from '~/styles/font-styles';\nimport SchemaStyles from '~/styles/schema-styles';\nimport SchemaTableStyles from '~/styles/schema-table-styles';\nimport CustomStyles from '~/styles/custom-styles';\n\nexport default class SchemaTable extends LitElement {\n  static get properties() {\n    return {\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\n      data: { type: Object },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.schemaExpandLevel || this.schemaExpandLevel < 1) { this.schemaExpandLevel = 99999; }\n    if (!this.schemaDescriptionExpanded || !'true false'.includes(this.schemaDescriptionExpanded)) { this.schemaDescriptionExpanded = 'false'; }\n    if (!this.schemaHideReadOnly || !'true false'.includes(this.schemaHideReadOnly)) { this.schemaHideReadOnly = 'true'; }\n    if (!this.schemaHideWriteOnly || !'true false'.includes(this.schemaHideWriteOnly)) { this.schemaHideWriteOnly = 'true'; }\n  }\n\n  static get styles() {\n    return [\n      FontStyles,\n      SchemaStyles,\n      SchemaTableStyles,\n      CustomStyles,\n    ];\n  }\n\n  /* eslint-disable indent */\n  render() {\n    return html`\n      <div class=\"table expanded-descr\">\n        <div class=\"schm-table-dscr\">\n          <div class='toolbar regular-font-size'>\n            <div class=\"schema-root-type ${this.data?.['::type'] || ''} \"> ${this.data?.['::type'] || ''} </div>\n            ${this.allowSchemaDescriptionExpandToggle === 'true'\n              ? html`\n                <div class=\"request-flex-inline\"></div>\n              `\n              : ''\n            }\n          </div>\n          ${this.data?.['::description']\n          ? html`<span part=\"schema-description\" class='m-markdown regular-font-size'> ${unsafeHTML(marked(this.data['::description'] || ''))}</span>`\n          : ''\n        }\n        </div>\n        <div class='schm-header'>\n          <div class='schm-header-int'>\n            <div class='key schm-hkey'> Attribute </div>\n          </div>\n          ${this.data\n            ? html`\n              ${this.generateTree(\n                this.data['::type'] === 'array' ? this.data['::props'] : this.data,\n                this.data['::type'],\n                this.data['::array-type'],\n              )}`\n            : ''\n          }\n        </div>\n      </div>\n    `;\n  }\n\n  generateTree(data, dataType = 'object', arrayType = '', key = '', description = '', schemaLevel = 0, indentLevel = 0, readOrWrite = '') {\n    if (this.schemaHideReadOnly === 'true') {\n      if (dataType === 'array') {\n        if (readOrWrite === 'readonly') {\n          return;\n        }\n      }\n      if (data && data['::readwrite'] === 'readonly') {\n        return;\n      }\n    }\n    if (this.schemaHideWriteOnly === 'true') {\n      if (dataType === 'array') {\n        if (readOrWrite === 'writeonly') {\n          return;\n        }\n      }\n      if (data && data['::readwrite'] === 'writeonly') {\n        return;\n      }\n    }\n    if (!data) {\n      return html`<div class=\"null json-disp-inline\">\n        <span style='margin-left:${(schemaLevel + 1) * 16}px'> &nbsp; </span>\n        <span class=\"key-label xxx-of-key\"> ${key.replace('::OPTION~', '')}</span>\n        ${\n          dataType === 'array'\n            ? html`<span class='mono-font'> [ ] </span>`\n            : dataType === 'object'\n              ? html`<span class='mono-font'> { } </span>`\n              : html`<span class='mono-font'> schema undefined </span>`\n        }\n      </div>`;\n    }\n\n    const newSchemaLevel = data['::type']?.startsWith('xxx-of') ? schemaLevel : (schemaLevel + 1);\n    const newIndentLevel = dataType === 'xxx-of-option' || data['::type'] === 'xxx-of-option' || key.startsWith('::OPTION') ? indentLevel : (indentLevel + 1);\n    if (Object.keys(data).length === 0) {\n      return html`<span class=\"td key object schm-obj\">${key}</span>`;\n    }\n    let keyLabel = '';\n    let keyDescr = '';\n    let isOneOfLabel = false;\n    if (key.startsWith('::ONE~OF') || key.startsWith('::ANY~OF')) {\n      keyLabel = key.replace('::', '').replace('~', ' ');\n      isOneOfLabel = true;\n    } else if (key.startsWith('::OPTION')) {\n      const parts = key.split('~');\n      keyLabel = parts[1]; // eslint-disable-line prefer-destructuring\n      keyDescr = parts[2]; // eslint-disable-line prefer-destructuring\n    } else {\n      keyLabel = key;\n    }\n\n    let detailObjType = '';\n    if (data['::type'] === 'object') {\n      if (dataType === 'array') {\n        detailObjType = 'array of objects'; // Array of Object\n      } else {\n        detailObjType = data['::dataTypeLabel'] || data['::type'];\n      }\n    } else if (data['::type'] === 'array') {\n      if (dataType === 'array') {\n        // detailObjType = 'array of array'; // Array of array\n        detailObjType = `array of array ${arrayType !== 'object' ? `of ${arrayType}` : ''}`; // Array of array\n      } else {\n        detailObjType = data['::dataTypeLabel'] || data['::type'];\n      }\n    }\n\n    if (typeof data === 'object') {\n      return html`\n        ${newSchemaLevel >= 0 && key\n          ? html`\n            <div class='tr ${newSchemaLevel <= this.schemaExpandLevel ? 'expanded' : 'collapsed'} ${data['::type']}' data-obj='${keyLabel}' title=\"${data['::deprecated'] ? 'Deprecated' : ''}\">\n              <div class=\"td key schm-obj ${data['::deprecated'] ? 'deprecated' : ''}\">\n                ${(keyLabel || keyDescr)\n                  ? html`\n                    <span\n                      class='obj-toggle ${newSchemaLevel < this.schemaExpandLevel ? 'expanded' : 'collapsed'}'\n                      data-obj='${keyLabel}'\n                      @click= ${(e) => this.toggleObjectExpand(e, keyLabel)}\n                    >\n                      ${schemaLevel < this.schemaExpandLevel ? '-' : '+'}\n                    </span>`\n                  : ''\n                }\n                ${data['::type'] === 'xxx-of-option' || data['::type'] === 'xxx-of-array' || key.startsWith('::OPTION')\n                  ? html`<span class=\"xxx-of-key neg-lmargin\">${keyLabel}</span><span class=\"${isOneOfLabel ? 'xxx-of-key' : 'xxx-of-descr'}\">${keyDescr}</span>`\n                  : keyLabel.endsWith('*')\n                    ? html`<span class=\"key-label neg-lmargin disp-inline-block\"\">${data['::deprecated'] ? '✗' : ''} ${keyLabel.substring(0, keyLabel.length - 1)}</span><span class='param-required'>required</span>`\n                    : html`<span class=\"key-label neg-lmargin disp-inline-block\">${data['::deprecated'] ? '✗' : ''} ${keyLabel === '::props' ? '' : keyLabel}</span>`\n                }\n                ${data['::type'] === 'xxx-of' && dataType === 'array' ? html`<span class=\"prim-color\">ARRAY</span>` : ''}\n                <span class='key-type' title=\"${data['::readwrite'] === 'readonly' ? 'read-only' : data['::readwrite'] === 'writeonly' ? 'write-only' : ''}\">\n                  ${(data['::type'] || '').includes('xxx-of') ? '' : detailObjType}\n                  <span>${data['::readwrite'] === 'readonly' ? ' 🆁' : data['::readwrite'] === 'writeonly' ? ' 🆆' : ''}</span>\n                </span>\n                <p class='key-descr m-markdown-small'>${unsafeHTML(marked(description || ''))}</p>\n              </div>\n            </div>`\n          : html`\n              ${data['::type'] === 'array' && dataType === 'array'\n                ? html`\n                  <div class='tr'>\n                    <div class='td key'>\n                      <span class='key-type'>\n                        ${arrayType && arrayType !== 'object' ? `${dataType} of ${arrayType}` : dataType}\n                      </span>\n                      <p class='key-descr'></p>\n                    </div>\n                  </div>`\n                : ''\n              }\n          `\n        }\n        <div class='object-body'>\n        ${Array.isArray(data) && data[0]\n          ? html`${this.generateTree(data[0], 'xxx-of-option', '', '::ARRAY~OF', '', newSchemaLevel, newIndentLevel, '')}`\n          : html`\n            ${Object.keys(data).map((dataKey) => html`\n            ${['::title', '::description', '::type', '::props', '::deprecated', '::array-type', '::readwrite', '::dataTypeLabel'].includes(dataKey)\n              ? data[dataKey]['::type'] === 'array' || data[dataKey]['::type'] === 'object'\n                  ? html`${this.generateTree(\n                    data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\n                      data[dataKey]['::type'],\n                      data[dataKey]['::array-type'] || '',\n                      dataKey,\n                      data[dataKey]['::description'],\n                      newSchemaLevel,\n                      newIndentLevel,\n                      data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\n                    )}`\n                  : ''\n                : html`${this.generateTree(\n                  data[dataKey]['::type'] === 'array' ? data[dataKey]['::props'] : data[dataKey],\n                  data[dataKey]['::type'],\n                  data[dataKey]['::array-type'] || '',\n                  dataKey,\n                  data[dataKey]['::description'],\n                  newSchemaLevel,\n                  newIndentLevel,\n                  data[dataKey]['::readwrite'] ? data[dataKey]['::readwrite'] : '',\n                )}`\n              }\n            `)}\n          `\n        }\n        <div>\n      `;\n    }\n\n    // For Primitive Data types\n    const [type, readOrWriteOnly, constraint, defaultValue, allowedValues, pattern, schemaDescription, schemaTitle, deprecated] = data.split('~|~');\n    if (readOrWriteOnly === '🆁' && this.schemaHideReadOnly === 'true') {\n      return;\n    }\n    if (readOrWriteOnly === '🆆' && this.schemaHideWriteOnly === 'true') {\n      return;\n    }\n    const dataTypeCss = type.replace(/|.*/g, '').replace(/[^a-zA-Z0-9+]/g, '').substring(0, 4).toLowerCase();\n    let dataTypeHtml = '';\n    if (dataType === 'array') {\n      dataTypeHtml = html`\n        <span class='key-type ${dataTypeCss}' title=\"${readOrWrite === 'readonly' ? 'read-only' : readOrWriteOnly === 'writeonly' ? 'write-only' : ''}\">\n          [${type}] <span>${readOrWrite === 'readonly' ? '🆁' : readOrWrite === 'writeonly' ? '🆆' : ''}</span>\n        </span>`;\n    } else {\n      dataTypeHtml = html`\n        <span class='key-type ${dataTypeCss}' title=\"${readOrWriteOnly === '🆁' ? 'read-only' : readOrWriteOnly === '🆆' ? 'write-only' : ''}\">\n          ${type} <span>${readOrWriteOnly}</span>\n        </span>`;\n    }\n    return html`\n      <div class=\"tr primitive\" title=\"${deprecated ? 'Deprecated' : ''}\">\n        <div class=\"td key ${deprecated} schm-obj\">\n          ${deprecated ? html`<span class='font-red'>✗</span>` : ''}\n          ${keyLabel?.endsWith('*')\n            ? html`<span class=\"key-label\">${keyLabel.substring(0, keyLabel.length - 1)}</span><span class='param-required'>required</span>`\n            : key.startsWith('::OPTION')\n              ? html`<span class='xxx-of-key'>${keyLabel}</span><span class=\"xxx-of-descr\">${keyDescr}</span>`\n              : html`${keyLabel ? html`<span class=\"key-label\"> ${keyLabel}</span>` : html`<span class=\"xxx-of-descr\">${schemaTitle}</span>`}`\n          }\n          ${dataTypeHtml}\n          <p class='key-descr'>\n            ${dataType === 'array' ? html`<span class=\"m-markdown-small\">${unsafeHTML(marked(description))}</span>` : ''}\n            ${constraint ? html`<div class='key-dscr-pat font-mono'> <span class='bold-text font-regl'>Constraints: </span> ${constraint}</div>` : ''}\n            ${defaultValue ? html`<div class='key-dscr-pat font-mono'> <span class='bold-text font-regl'>Default: </span>${defaultValue}</div>` : ''}\n            ${allowedValues ? html`<div class='key-dscr-pat font-mono'> <span class='bold-text font-regl'>Allowed values: </span>${allowedValues}</div>` : ''}\n            ${pattern ? html`<div class='key-dscr-pat font-mono'> <span class='bold-text font-regl'>Pattern: </span>${pattern}</div>` : ''}\n            ${schemaDescription ? html`<span class=\"m-markdown-small\">${unsafeHTML(marked(`${schemaTitle ? `**${schemaTitle}:**` : ''} ${schemaDescription}`))}</span>` : ''}\n          </p>\n        </div>\n      </div>\n    `;\n  }\n  /* eslint-enable indent */\n\n  toggleObjectExpand(e) {\n    const rowEl = e.target.closest('.tr');\n    if (rowEl.classList.contains('expanded')) {\n      rowEl.classList.add('collapsed');\n      rowEl.classList.remove('expanded');\n      e.target.innerText = '+';\n    } else {\n      rowEl.classList.remove('collapsed');\n      rowEl.classList.add('expanded');\n      e.target.innerText = '-';\n    }\n  }\n}\ncustomElements.define('schema-table', SchemaTable);\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport { rapidocApiKey } from '~/utils/common-utils';\nimport { pathSecurityTemplate } from '~/templates/security-scheme-template';\nimport codeSamplesTemplate from '~/templates/code-samples-template';\nimport callbackTemplate from '~/templates/callback-template';\nimport '~/components/api-request';\nimport '~/components/api-response';\n\n/* eslint-disable indent */\nfunction headingRenderer(tagElementId) {\n  const renderer = new marked.Renderer();\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"${tagElementId}--${slugger.slug(raw)}\">${text}</h${level}>`);\n  return renderer;\n}\n\nexport function expandedEndpointBodyTemplate(path, tagName = '') {\n  const acceptContentTypes = new Set();\n  for (const respStatus in path.responses) {\n    for (const acceptContentType in (path.responses[respStatus]?.content)) {\n      acceptContentTypes.add(acceptContentType.trim());\n    }\n  }\n  const accept = [...acceptContentTypes].join(', ');\n\n  // Filter API Keys that are non-empty and are applicable to the the path\n  const nonEmptyApiKeys = this.resolvedSpec.securitySchemes.filter((v) => (v.finalKeyValue && path.security?.some((ps) => (v.securitySchemeId in ps)))) || [];\n\n  // If a RapiDoc API Key is specified on the element and its value is not hyphen(-) then include it for all paths\n  const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === rapidocApiKey && v.value !== '-'));\n  if (rapiDocApiKey) {\n    nonEmptyApiKeys.push(rapiDocApiKey);\n  }\n\n  const codeSampleTabPanel = path.xCodeSamples ? codeSamplesTemplate.call(this, path.xCodeSamples) : '';\n  return html`\n    ${this.renderStyle === 'read' ? html`<div class='divider' part=\"operation-divider\"></div>` : ''}\n    <div class='expanded-endpoint-body observe-me ${path.method} ${path.deprecated ? 'deprecated' : ''} ' part=\"section-operation ${path.elementId}\" id='${path.elementId}'>\n    ${(this.renderStyle === 'focused' && tagName !== 'General ⦂') ? html`<h3 class=\"upper bold-text\" part=\"section-operation-tag\"> ${tagName} </h3>` : ''}\n    ${path.deprecated ? html`<div class=\"bold-text red-text\"> DEPRECATED </div>` : ''}\n    ${html`\n      ${path.xBadges && path.xBadges?.length > 0\n        ? html`\n          <div class=\"code-sample-expand-badge\">\n            ${path.xBadges.map((v) => (\n                html`<span class=\"endbadge-style\" style=\"background-color: var(--light-${v.color}, var(--input-bg)); color:var(--${v.color}); border:1px solid var(--${v.color})\">${v.label}</span>`\n              ))\n            }\n          </div>\n          `\n        : ''\n      }\n      <h2 part=\"section-operation-summary\"> ${path.shortSummary || `${path.method.toUpperCase()} ${path.path}`}</h2>\n      ${path.isWebhook\n        ? html`<span part=\"section-operation-webhook class=\"span-whook-exp\"> WEBHOOK </span>`\n        : html`\n          <div class='mono-font part=\"section-operation-webhook-method\" regular-font-size sowm'>\n            <span part=\"label-operation-method\" class='regular-font upper method-fg bold-text ${path.method} oper-meth-label'><span>${path.method}</span></span>\n            <span part=\"label-operation-path oper-path-label\">${path.path}</span>\n          </div>\n        `\n      }\n      <slot name=\"${path.elementId}\"></slot>`\n    }\n    ${path.description ? html`<div class=\"m-markdown full-width\"> ${unsafeHTML(marked(path.description))}</div>` : ''}\n    ${pathSecurityTemplate.call(this, path.security)}\n    <div class='expanded-req-resp-container'>\n      ${codeSampleTabPanel}\n      <api-request\n        class = \"${this.renderStyle}-mode full-width\"\n        webhook = \"${path.isWebhook}\"\n        method = \"${path.method}\"\n        path = \"${path.path}\"\n        .security = \"${path.security}\"\n        .parameters = \"${path.parameters}\"\n        .request_body = \"${path.requestBody}\"\n        .api_keys = \"${nonEmptyApiKeys}\"\n        .servers = \"${path.servers}\"\n        server-url = \"${path.servers?.[0]?.url || this.selectedServer.computedUrl}\"\n        fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\n        allow-try = \"${this.allowTry}\"\n        accept = \"${accept}\"\n        render-style=\"${this.renderStyle}\"\n        schema-style = \"${this.schemaStyle}\"\n        active-schema-tab = \"${this.defaultSchemaTab}\"\n        schema-expand-level = \"${this.schemaExpandLevel}\"\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\n        schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\n        schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\n        fetch-credentials = \"${this.fetchCredentials}\"\n        exportparts = \"btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\n          file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param,\n          anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n        > </api-request>\n\n      ${path.callbacks ? callbackTemplate.call(this, path.callbacks) : ''}\n\n      <api-response\n        class = \"${this.renderStyle}-mode full-width-clear\"\n        webhook = \"${path.isWebhook}\"\n        .responses = \"${path.responses}\"\n        render-style = \"${this.renderStyle}\"\n        schema-style = \"${this.schemaStyle}\"\n        active-schema-tab = \"${this.defaultSchemaTab}\"\n        schema-expand-level = \"${this.schemaExpandLevel}\"\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\n        schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\n        schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\n        selected-status = \"${Object.keys(path.responses || {})[0] || ''}\"\n        exportparts = \"btn:btn, btn-response-status:btn-response-status, btn-selected-response-status:btn-selected-response-status, btn-fill:btn-fill, btn-copy:btn-copy,\n        schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n      > </api-response>\n    </div>\n  </div>\n  `;\n}\n\nexport default function expandedEndpointTemplate() {\n  if (!this.resolvedSpec) { return ''; }\n  return html`\n  ${this.resolvedSpec.tags.map((tag) => html`\n    <section id=\"${tag.elementId}\" part=\"section-tag\" class=\"regular-font section-gap--read-mode observe-me sctn-tag-gap\">\n      <div class=\"title tag\" part=\"section-tag-title label-tag-title\">${tag.name}</div>\n      <slot name=\"${tag.elementId}\"></slot>\n      <div class=\"regular-font-size\">\n      ${\n        unsafeHTML(`\n          <div class=\"m-markdown regular-font\">\n          ${marked(tag.description || '', this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer(tag.elementId) } : undefined)}\n        </div>`)\n      }\n      </div>\n    </section>\n    <section class='regular-font section-gap--read-mode' part=\"section-operations-in-tag\">\n      ${tag.paths.map((path) => expandedEndpointBodyTemplate.call(this, path, 'BBB'))}\n    </section>\n    `)\n  }\n`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport { schemaInObjectNotation } from '~/utils/schema-utils';\nimport '~/components/json-tree';\nimport '~/components/schema-tree';\nimport '~/components/schema-table';\n\nfunction schemaBodyTemplate(sComponent) {\n  return html`\n  <div class='divider'></div>\n  <div class='expanded-endpoint-body observe-me ${sComponent.name}' id='cmp--${sComponent.id}' >\n    <div class=\"bold-text\"> ${sComponent.name} <span class=\"schm-tab\"> Schema </span></div>\n  ${this.schemaStyle === 'table'\n    ? html`\n      <schema-table\n        render-style = '${this.renderStyle}'\n        .data = '${schemaInObjectNotation(sComponent.component, {})}'\n        schema-expand-level = \"${this.schemaExpandLevel}\"\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n        schema-hide-read-only = \"false\"\n        schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n        exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n      > </schema-tree> `\n    : html`\n      <schema-tree\n        render-style = '${this.renderStyle}'\n        .data = '${schemaInObjectNotation(sComponent.component, {})}'\n        schema-expand-level = \"${this.schemaExpandLevel}\"\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n        schema-hide-read-only = \"false\"\n        schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n        exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n      > </schema-tree>`\n}\n  </div>`;\n}\n\nfunction componentBodyTemplate(sComponent, componentType) {\n  if (sComponent.id.indexOf('schemas-') !== -1) {\n    return schemaBodyTemplate.call(this, sComponent);\n  }\n  return html`\n  <div class='divider'></div>\n  <div class='expanded-endpoint-body observe-me ${sComponent.name}' id='cmp--${sComponent.id}' >\n    ${html`\n      <div class=\"bold-text\"> ${sComponent.name} <span class=\"schm-tab\"> ${componentType} </span> </div>\n      ${sComponent.component\n    ? html`\n      <div class='mono-font regular-font-size schm-alt-tab'>\n        <json-tree class=\"border tree\" render-style='${this.renderStyle}' .data=\"${sComponent.component}\"> </json-tree>\n      </div>`\n    : ''}\n    `}\n  </div>\n  `;\n}\n\nexport default function componentsTemplate() {\n  if (!this.resolvedSpec) { return ''; }\n  return html`\n  ${this.resolvedSpec.components.map((component) => html`\n    <div id=\"cmp--${component.name.toLowerCase()}\" class='regular-font section-gap--read-mode observe-me comp-name'>\n      <div class=\"title tag\">${component.name}</div>\n      <div class=\"regular-font-size\">\n        ${unsafeHTML(`<div class='m-markdown regular-font'>${marked(component.description ? component.description : '')}</div>`)}\n      </div>\n    </div>\n    <div class='regular-font section-gap--read-mode'>\n      ${component.subComponents.filter((c) => c.expanded !== false).map((sComponent) => componentBodyTemplate.call(this, sComponent, component.name))}\n    </div>\n    `)\n}\n`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport { downloadResource, viewResource } from '~/utils/common-utils';\n\n/* eslint-disable indent */\nfunction headingRenderer() {\n  const renderer = new marked.Renderer();\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"overview--${slugger.slug(raw)}\">${text}</h${level}>`);\n  return renderer;\n}\n\nexport default function overviewTemplate() {\n  return html`\n    <section id=\"overview\" part=\"section-overview\"\n      class=\"observe-me ${this.renderStyle === 'view' ? 'section-gap' : 'section-gap--read-mode'}\">\n      ${this.resolvedSpec?.info\n        ? html`\n          <div id=\"api-title\" part=\"section-overview-title\" class=\"main-title\">\n            ${this.resolvedSpec.info.title}\n            ${!this.resolvedSpec.info.version ? '' : html`\n              <span class='api-version'>\n                ${this.resolvedSpec.info.version}\n              </span>`\n            }\n          </div>\n          <div id=\"api-info\" class=\"api-info\">\n            ${this.resolvedSpec.info.contact?.email\n              ? html`<span>${this.resolvedSpec.info.contact.name || 'Email'}:\n                <a href=\"mailto:${this.resolvedSpec.info.contact.email}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.contact.email}</a>\n              </span>`\n              : ''\n            }\n            ${this.resolvedSpec.info.contact?.url\n              ? html`<span>URL: <a href=\"${this.resolvedSpec.info.contact.url}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.contact.url}</a></span>`\n              : ''\n            }\n            ${this.resolvedSpec.info.license\n              ? html`<span>License:\n                ${this.resolvedSpec.info.license.url\n                ? html`<a href=\"${this.resolvedSpec.info.license.url}\" part=\"anchor anchor-overview\">${this.resolvedSpec.info.license.name}</a>`\n                : this.resolvedSpec.info.license.name\n              } </span>`\n              : ''\n            }\n            ${this.resolvedSpec.info.termsOfService\n              ? html`<span><a href=\"${this.resolvedSpec.info.termsOfService}\" part=\"anchor anchor-overview\">Terms of Service</a></span>`\n              : ''\n            }\n            ${this.specUrl && this.allowSpecFileDownload === 'true'\n              ? html`\n                <div class=\"ovrview-dwnld\">\n                  <button class=\"m-btn thin-border ovrview-dwnld-btn\" part=\"btn btn-outline\" @click='${(e) => { downloadResource(this.specUrl, 'openapi-spec', e); }}'>Download OpenAPI spec</button>\n                  ${this.specUrl?.trim().toLowerCase().endsWith('json')\n                    ? html`<button class=\"m-btn thin-border ovrview-dwnld-btn\" part=\"btn btn-outline\" @click='${(e) => { viewResource(this.specUrl, e); }}'>View OpenAPI spec (New Tab)</button>`\n                    : ''\n                  }\n                </div>`\n              : ''\n            }\n          </div>\n          <slot name=\"overview\"></slot>\n          <div id=\"api-description\">\n          ${this.resolvedSpec.info.description\n            ? html`${\n              unsafeHTML(`\n                <div class=\"m-markdown regular-font\">\n                ${marked(this.resolvedSpec.info.description, this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer() } : undefined)}\n              </div>`)}`\n            : ''\n          }\n          </div>\n        `\n        : ''\n      }\n    </section>\n  `;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\n\nexport function setApiServer(serverUrl) {\n  const serverObj = this.resolvedSpec?.servers.find((s) => s.url === serverUrl);\n  if (!serverObj) {\n    return false;\n  }\n  this.selectedServer = serverObj;\n  this.requestUpdate();\n  this.dispatchEvent(new CustomEvent('api-server-change', {\n    bubbles: true,\n    composed: true,\n    detail: {\n      selectedServer: serverObj,\n    },\n  }));\n  return true;\n}\n\nfunction onApiServerVarChange(e, serverObj) {\n  const inputEls = [...e.currentTarget.closest('table').querySelectorAll('input, select')];\n  let tempUrl = serverObj.url;\n  inputEls.forEach((v) => {\n    const regex = new RegExp(`{${v.dataset.var}}`, 'g');\n    tempUrl = tempUrl.replace(regex, v.value);\n  });\n  serverObj.computedUrl = tempUrl;\n  this.requestUpdate();\n}\n\n/* eslint-disable indent */\nfunction serverVarsTemplate() {\n  // const selectedServerObj = this.resolvedSpec.servers.find((v) => (v.url === this.selectedServer));\n  return this.selectedServer && this.selectedServer.variables\n    ? html`\n    <div class=\"table-title\"> SERVER VARIABLES</div>\n    <table class='m-table'>\n      ${Object.entries(this.selectedServer.variables).map((kv) => html`\n        <tr>\n          <td class=\"vert-middle\">${kv[0]}</td>\n          <td>\n            ${kv[1].enum\n            ? html`\n            <select\n              data-var = \"${kv[0]}\"\n              @input = ${(e) => { onApiServerVarChange.call(this, e, this.selectedServer); }}\n            >\n            ${Object.entries(kv[1].enum).map((e) => (kv[1].default === e[1]\n              ? html`\n              <option\n                selected\n                label = ${e[1]}\n                value = ${e[1]}\n              />`\n              : html`\n              <option\n                label = ${e[1]}\n                value = ${e[1]}\n              />`\n            ))}\n            </select>`\n            : html`\n            <input\n              type = \"text\"\n              part=\"textbox textbox-server-var\"\n              spellcheck = \"false\"\n              data-var = \"${kv[0]}\"\n              value = \"${kv[1].default}\"\n              @input = ${(e) => { onApiServerVarChange.call(this, e, this.selectedServer); }}\n            />`}\n          </td>\n        </tr>\n        ${kv[1].description\n          ? html`<tr><td colspan=\"2\" class=\"no-border\"><span class=\"m-markdown-small\"> ${unsafeHTML(marked(kv[1].description))} </span></td></tr>`\n          : ''\n        }\n      `)}\n    </table>\n    `\n    : '';\n}\n\nexport default function serverTemplate() {\n  if (!this.resolvedSpec || this.resolvedSpec.specLoadError) { return ''; }\n  return html`\n  <section id='servers' part=\"section-servers\" class='sctn-servers regular-font observe-me ${'read focused'.includes(this.renderStyle) ? 'section-gap--read-mode' : 'section-gap'}'>\n    <div part=\"section-servers-title\" class=\"sub-title\">API servers</div>\n    <div class='mono-font sctn-servers-list'>\n      ${this.allowServerSelection === 'true'\n        ? html`\n          ${!this.resolvedSpec.servers || this.resolvedSpec.servers?.length === 0\n            ? ''\n            : html`\n              ${this.resolvedSpec?.servers.map((server, i) => html`\n                <input type = 'radio'\n                  name = 'api_server'\n                  id = 'srvr-opt-${i}'\n                  value = '${server.url}'\n                  @change = ${() => { setApiServer.call(this, server.url); }}\n                  .checked = '${this.selectedServer.url === server.url}'\n                  class = 'sctn-servers-input'\n                />\n                  <label class='cpointer' for='srvr-opt-${i}'>\n                    ${server.url} ${server.description ? html`- <span class='regular-font'>${server.description} </span>` : ''}\n                  </label>\n                <br/>\n              `)}\n          `}\n        <div class=\"table-title primary-text\" part=\"label-selected-server\"> SELECTED: ${this.selectedServer?.computedUrl || 'none'}</div>`\n    : html`\n    ${!this.resolvedSpec.servers || this.resolvedSpec.servers?.length === 0\n      ? ''\n      : html`\n        ${this.resolvedSpec?.servers.map((server) => html`\n          <p class=\"m-markdown\"><code>${server.url}</code> ${server.description ? html`- <span class='regular-font'>${server.description}</span>` : ''}\n        `)}\n      `}`\n    }\n    </div>\n    <slot name=\"servers\"></slot>\n    ${serverVarsTemplate.call(this)}\n  </section>`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\n\n/* eslint-disable indent */\nexport default function navbarAddTemplate() {\n  return html`\n  ${this.apiTagName === 'apps'\n    ? html`\n    `\n    : html`\n    `\n  }`;\n}\n","import { html } from 'lit';\nimport { marked } from 'marked';\nimport { pathIsInSearch } from '~/utils/common-utils';\nimport navbarAddTemplate from '~/templates/navbar-add-template';\n\nexport function expandCollapseNavBarTag(navLinkEl, action = 'toggle') {\n  const tagAndPathEl = navLinkEl?.closest('.nav-bar-tag-and-paths');\n  if (tagAndPathEl) {\n    const isExpanded = tagAndPathEl.classList.contains('expanded');\n    if (isExpanded && (action === 'toggle' || action === 'collapse')) {\n      tagAndPathEl.classList.replace('expanded', 'collapsed');\n    } else if (!isExpanded && (action === 'toggle' || action === 'expand')) {\n      tagAndPathEl.classList.replace('collapsed', 'expanded');\n    }\n  }\n}\n\nexport function expandCollapseAll(navEl, action = 'expand-all') {\n  const elList = [...navEl.querySelectorAll('.nav-bar-tag-and-paths')];\n  if (action === 'expand-all') {\n    elList.map((el) => {\n      el.classList.replace('collapsed', 'expanded');\n    });\n  } else {\n    elList.map((el) => {\n      el.classList.replace('expanded', 'collapsed');\n    });\n  }\n}\n\nfunction onExpandCollapse(e) {\n  expandCollapseNavBarTag(e.target, 'toggle');\n}\n\nfunction onExpandCollapseAll(e, action = 'expand-all') {\n  expandCollapseAll(e.target.closest('.nav-scroll'), action);\n}\n\n/* eslint-disable indent */\nexport default function navbarTemplate() {\n  if (!this.resolvedSpec || this.resolvedSpec.specLoadError) {\n    return html`\n      <nav class='nav-bar' part=\"section-navbar\">\n        <slot name=\"nav-logo\" class=\"logo\"></slot>\n      </nav>\n    `;\n  }\n  return html`\n  <nav class='nav-bar ${this.renderStyle}' part=\"section-navbar\">\n    <slot name=\"nav-logo\" class=\"logo\"></slot>\n    ${(this.allowSearch === 'false' && this.allowAdvancedSearch === 'false')\n      ? ''\n      : html`\n        <div class=\"navbar-srch\" style=\"${this.allowAdvancedSearch === 'false' ? 'border-bottom: 1px solid var(--nav-hover-bg-color)' : ''}\" part=\"section-navbar-search\">\n          ${this.allowSearch === 'false'\n            ? ''\n            : html`\n              <div class=\"navbar-srch-adv\">\n                <input id=\"nav-bar-search\"\n                  part = \"textbox textbox-nav-filter\"\n                  class = \"navbar-srch-input\"\n                  type = \"text\"\n                  placeholder = \"Filter\"\n                  @change = \"${this.onSearchChange}\"\n                  spellcheck = \"false\"\n                >\n                <div class=\"navbar-srch-larrow\">&#x21a9;</div>\n              </div>\n              ${this.matchPaths\n                ? html`\n                <button @click = '${this.onClearSearch}' class=\"m-btn thin-border navbar-srch-btn\" part=\"btn btn-outline btn-clear-filter\">\n                CLEAR\n              </button>`\n            : ''\n              }\n            `\n          }\n          ${this.allowAdvancedSearch === 'false' || this.matchPaths || 'read'.includes(this.renderStyle)\n            ? ''\n            : html`\n              <button class=\"m-btn primary\" part=\"btn btn-fill btn-search navbar-srch-btn-add\" @click=\"${this.onShowSearchModalClicked}\">\n                Search\n              </button>\n            `\n          }\n        </div>\n      `\n    }\n    ${html`<nav class='nav-scroll' part=\"section-navbar-scroll\">\n      ${(this.showInfo === 'false' || !this.resolvedSpec.info)\n        ? ''\n        : html`\n          ${(this.infoDescriptionHeadingsInNavBar === 'true')\n            ? html`\n            ${this.resolvedSpec.infoDescriptionHeaders.length > 0\n              ? html`<div class='nav-bar-info' id='link-overview' data-content-id='overview' @click = '${(e) => this.scrollToEventTarget(e, false)}'>\n                  ${this.resolvedSpec.info?.title?.trim() || 'Overview'}\n                </div>`\n              : ''\n            }\n            <div class=\"overview-headers\">\n                ${this.resolvedSpec.infoDescriptionHeaders.map((header) => html`\n                  <div\n                    class='nav-bar-h${header.depth}'\n                    id=\"link-overview--${new marked.Slugger().slug(header.text)}\"\n                    data-content-id='overview--${new marked.Slugger().slug(header.text)}'\n                    @click='${(e) => this.scrollToEventTarget(e, false)}'\n                  >\n                    ${header.text}\n                  </div>`)\n                }\n              </div>\n              ${this.resolvedSpec.infoDescriptionHeaders.length > 0 ? '' : ''}\n            `\n            : html`<div class='nav-bar-info' id='link-overview' data-content-id='overview' @click = '${(e) => this.scrollToEventTarget(e, false)}'>\n            ${this.resolvedSpec.info?.title?.trim() || 'Overview'}\n              </div>`\n          }\n        `\n      }\n\n      <div class='nav-bar-info' id='link-servers' data-content-id='servers' @click = '${(e) => this.scrollToEventTarget(e, false)}'> API servers </div>\n\n      ${(this.allowAuthentication === 'false' || !this.resolvedSpec.securitySchemes)\n        ? ''\n        : html`<div class='nav-bar-info' id='link-auth' data-content-id='auth' @click = '${(e) => this.scrollToEventTarget(e, false)}'> Authentication </div>`\n      }\n      <hr class=\"navbar-hr\"/>\n      <div id='link-operations-top' class='nav-bar-section operations' data-content-id='operations-top'>\n        <div class=\"navbar-oprtns\">\n          ${this.renderStyle === 'focused'\n            ? html`\n              <div @click=\"${(e) => { onExpandCollapseAll.call(this, e, 'expand-all'); }}\" title=\"Expand all\" class=\"navbar-oprtns-exp\">▸</div>\n              <div @click=\"${(e) => { onExpandCollapseAll.call(this, e, 'collapse-all'); }}\" title=\"Collapse all\" class=\"navbar-oprtns-col\">▸</div>`\n            : ''\n          }\n        </div>\n        <div class='nav-bar-section-title'> Reference </div>\n      </div>\n\n      <!-- TAGS AND PATHS-->\n      ${this.resolvedSpec.tags\n        .filter((tag) => tag.paths.filter((path) => pathIsInSearch(this.matchPaths, path, this.matchType)).length)\n        .map((tag) => html`\n          <div class='nav-bar-tag-and-paths ${tag.expanded ? 'collapsed' : 'expanded'}'>\n            ${tag.name === 'General ⦂'\n              ? ''\n              : html`\n                <div class=\"nav-bar-tag-wrapper\">\n                  <div\n                    class='nav-bar-tag'\n                    id=\"link-${tag.elementId}\"\n                    data-content-id='${tag.elementId}'\n                    data-first-path-id='${tag.firstPathId}'\n                    @click='${(e) => {\n                      if (this.renderStyle === 'focused' && this.onNavTagClick === 'expand-collapse') {\n                        onExpandCollapse.call(this, e);\n                      } else if (this.onNavTagClick === 'expand-collapse') {\n                        onExpandCollapse.call(this, e);\n                        this.scrollToEventTarget(e, false);\n                      }\n                    }}'\n                  >\n                    <div>${tag.name}</div>\n                  </div>\n                  <div class=\"nav-bar-tag-icon\"\n                    @click='${(e) => {\n                      if (this.onNavTagClick === 'expand-collapse') {\n                        onExpandCollapse.call(this, e);\n                      }\n                    }}'\n                  >\n                  </div>\n                </div>\n              `\n            }\n            ${(this.infoDescriptionHeadingsInNavBar === 'true')\n              ? html`\n                ${this.onNavTagClick === 'expand-collapse'\n                  ? ''\n                  : html`\n                    <div class='tag-headers'>\n                      ${tag.headers.map((header) => html`\n                      <div\n                        class='nav-bar-h${header.depth}'\n                        id=\"link-${tag.elementId}--${new marked.Slugger().slug(header.text)}\"\n                        data-content-id='${tag.elementId}--${new marked.Slugger().slug(header.text)}'\n                        @click='${(e) => this.scrollToEventTarget(e, false)}'\n                      > ${header.text}</div>`)}\n                    </div>`\n                }`\n              : ''\n            }\n\n\n            <div class='nav-bar-paths-under-tag'>\n              <!-- Paths in each tag (endpoints) -->\n              ${tag.paths.filter((v) => {\n                if (this.matchPaths) {\n                  return pathIsInSearch(this.matchPaths, v, this.matchType);\n                }\n                return true;\n              }).map((p) => html`\n              <div\n                class='nav-bar-path\n                ${this.usePathInNavBar === 'true' ? 'small-font' : ''}'\n                data-content-id='${p.elementId}'\n                id='link-${p.elementId}'\n                @click = '${(e) => {\n                  this.scrollToEventTarget(e, false);\n                }}'\n              >\n                <span class=\"navbar-pths\" style=\"${p.deprecated ? 'filter:opacity(0.5)' : ''}\">\n\n                  ${p.isWebhook ? html`<span class=\"navbar-pths-whook\">WEBHOOK</span>` : ''}\n                  ${this.usePathInNavBar === 'true'\n                    ? html`<span class='mono-font'>${p.method.toUpperCase()} ${p.path}</span>`\n                    : html`<span>${p.summary || p.shortSummary}</span>`\n                  }\n                  ${html`<span class=\"nav-method ${this.showMethodInNavBar} ${p.method}\">\n                      ${this.showMethodInNavBar === 'as-colored-block' ? p.method.toUpperCase() : p.method.toUpperCase()}\n                    </span>`\n                  }\n                </span>\n              </div>`)}\n            </div>\n          </div>\n        `)\n      }\n\n      <!-- COMPONENTS -->\n      ${this.resolvedSpec.components && this.showComponents === 'true' && this.renderStyle === 'focused'\n        ? html`\n          <div id='link-components' class='nav-bar-section components'>\n            <div></div>\n            <div class='nav-bar-section-title'>COMPONENTS</div>\n          </div>\n          ${this.resolvedSpec.components.map((component) => (component.subComponents.length\n            ? html`\n              <div class='nav-bar-tag'\n                data-content-id='cmp--${component.name.toLowerCase()}'\n                id='link-cmp--${component.name.toLowerCase()}'\n                @click='${(e) => this.scrollToEventTarget(e, false)}'>\n                ${component.name}\n              </div>\n              ${component.subComponents.filter((p) => p.expanded !== false).map((p) => html`\n                <div class='nav-bar-path' data-content-id='cmp--${p.id}' id='link-cmp--${p.id}' @click='${(e) => this.scrollToEventTarget(e, false)}'>\n                  <span> ${p.name} </span>\n                </div>`)\n              }`\n            : ''))\n          }`\n        : ''\n      }\n      <div class=\"nav-bar-tag-and-paths\">\n        <a class=\"nav-bar-tag-wrapper all-classes\" href=\"${this.apiTagName}-list.html\">All classes and methods</a>\n      </div>\n      ${navbarAddTemplate.call(this)}\n      <div class=\"nav-bar-info navbar-seealso\">Related pages</div>\n      <div class=\"overview-headers navbar-sls-block\">\n        <a class=\"nav-bar-h2\" href=\"https://example.com\">Example.com</a>\n      </div>\n    </div>\n    </nav>`\n  }\n</nav>\n`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport { expandedEndpointBodyTemplate } from '~/templates/expanded-endpoint-template';\nimport '~/components/api-request';\nimport '~/components/api-response';\nimport componentsTemplate from '~/templates/components-template';\nimport overviewTemplate from '~/templates/overview-template';\nimport serverTemplate from '~/templates/server-template';\nimport securitySchemeTemplate from '~/templates/security-scheme-template';\nimport { expandCollapseNavBarTag } from '~/templates/navbar-template';\n\nfunction headingRenderer(tagElementId) {\n  const renderer = new marked.Renderer();\n  renderer.heading = ((text, level, raw, slugger) => `<h${level} class=\"observe-me\" id=\"${tagElementId}--${slugger.slug(raw)}\">${text}</h${level}>`);\n  return renderer;\n}\n\nfunction wrapFocusedTemplate(templateToWrap) {\n  return html`\n    <div class='regular-font section-gap--focused-mode' part=\"section-operations-in-tag\">\n      ${templateToWrap}\n    </div>`;\n}\n\nfunction defaultContentTemplate() {\n  // In focused mode default content is overview or first path\n  if (this.showInfo === 'true') {\n    return wrapFocusedTemplate(overviewTemplate.call(this));\n  }\n  const selectedTagObj = this.resolvedSpec.tags[0];\n  const selectedPathObj = this.resolvedSpec.tags[0]?.paths[0];\n  return (selectedTagObj && selectedPathObj)\n    ? wrapFocusedTemplate(expandedEndpointBodyTemplate.call(this, selectedPathObj, selectedTagObj.name))\n    : wrapFocusedTemplate('');\n}\n\n/* eslint-disable indent */\nfunction focusedTagBodyTemplate(tag) {\n  return html`\n    <h1 id=\"${tag.elementId}\">${tag.name}</h1>\n    ${this.onNavTagClick === 'show-description' && tag.description\n      ? html`\n        <div class=\"m-markdown\">\n          ${\n            unsafeHTML(`\n            <div class=\"m-markdown regular-font\">\n              ${marked(tag.description || '', this.infoDescriptionHeadingsInNavBar === 'true' ? { renderer: headingRenderer(tag.elementId) } : undefined)}\n            </div>`)\n          }\n        </div>`\n      : ''\n    }\n  `;\n}\n\nexport default function focusedEndpointTemplate() {\n  if (!this.focusedElementId || !this.resolvedSpec) {\n    return;\n  }\n  const focusElId = this.focusedElementId;\n  let selectedPathObj = null;\n  let selectedTagObj = null;\n  let focusedTemplate;\n  let i = 0;\n  if (focusElId.startsWith('overview') && this.showInfo === 'true') {\n    focusedTemplate = overviewTemplate.call(this);\n  } else if (focusElId === 'auth' && this.allowAuthentication === 'true') {\n    focusedTemplate = securitySchemeTemplate.call(this);\n  } else if (focusElId === 'servers' && this.allowServerSelection === 'true') {\n    focusedTemplate = serverTemplate.call(this);\n  } else if (focusElId === 'operations-top') {\n    focusedTemplate = html`\n    <div id=\"operations-top\" class=\"observe-me\">\n      <slot name=\"operations-top\"></slot>\n    </div>`;\n  } else if (focusElId.startsWith('cmp--') && this.showComponents === 'true') {\n    focusedTemplate = componentsTemplate.call(this);\n  } else if (focusElId.startsWith('tag--')) {\n    const idToFocus = focusElId.indexOf('--', 4) > 0 ? focusElId.substring(0, focusElId.indexOf('--', 5)) : focusElId;\n    selectedTagObj = this.resolvedSpec.tags.find((v) => v.elementId === idToFocus);\n    if (selectedTagObj) {\n      focusedTemplate = wrapFocusedTemplate.call(this, focusedTagBodyTemplate.call(this, selectedTagObj));\n    } else {\n      focusedTemplate = defaultContentTemplate.call(this);\n    }\n  } else {\n    for (i = 0; i < this.resolvedSpec.tags.length; i += 1) {\n      selectedTagObj = this.resolvedSpec.tags[i];\n      selectedPathObj = this.resolvedSpec.tags[i].paths.find((v) => `${v.elementId}` === focusElId);\n      if (selectedPathObj) {\n        break;\n      }\n    }\n    if (selectedPathObj) {\n      // In focused mode we must expand the nav-bar tag element if it is collapsed\n      const newNavEl = this.shadowRoot.getElementById(`link-${focusElId}`);\n      expandCollapseNavBarTag(newNavEl, 'expand');\n      focusedTemplate = wrapFocusedTemplate.call(this, expandedEndpointBodyTemplate.call(this, selectedPathObj, selectedTagObj.name));\n    } else {\n      // if focusedElementId is not found then show the default content (overview or first-path)\n      focusedTemplate = defaultContentTemplate.call(this);\n    }\n  }\n  return focusedTemplate;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport '~/components/api-request';\nimport '~/components/api-response';\nimport codeSamplesTemplate from '~/templates/code-samples-template';\nimport callbackTemplate from '~/templates/callback-template';\nimport { pathSecurityTemplate } from '~/templates/security-scheme-template';\nimport { pathIsInSearch, rapidocApiKey } from '~/utils/common-utils';\n\nfunction toggleExpand(path) {\n  if (path.expanded) {\n    path.expanded = false; // collapse\n    if (this.updateRoute === 'true') {\n      window.history.replaceState(null, null, `${window.location.href.split('#')[0]}${this.routePrefix === '#' ? '' : `${this.routePrefix}`}`);\n    }\n  } else {\n    path.expanded = true; // Expand\n    if (this.updateRoute === 'true') {\n      const newHash = `${this.routePrefix || '#'}${path.elementId}`;\n      if (window.location.hash !== newHash) {\n        window.history.replaceState(null, null, `${window.location.href.split('#')[0]}${newHash}`);\n      }\n    }\n  }\n  this.requestUpdate();\n}\n\nexport function expandCollapseAll(operationsRootEl, action = 'expand-all') {\n  const elList = [...operationsRootEl.querySelectorAll('.section-tag')];\n  if (action === 'expand-all') {\n    elList.map((el) => {\n      el.classList.replace('collapsed', 'expanded');\n    });\n  } else {\n    elList.map((el) => {\n      el.classList.replace('expanded', 'collapsed');\n    });\n  }\n}\n\nfunction onExpandCollapseAll(e, action = 'expand-all') {\n  expandCollapseAll.call(this, e.target.closest('.operations-root'), action);\n}\n\n/* eslint-disable indent */\nfunction endpointHeadTemplate(path, pathsExpanded = false) {\n  return html`\n  <summary @click=\"${(e) => { toggleExpand.call(this, path, e); }}\" part=\"section-endpoint-head-${path.expanded ? 'expanded' : 'collapsed'}\" class='endpoint-head ${path.method} ${path.deprecated ? 'deprecated' : ''} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\n    <div part=\"section-endpoint-head-method\" class=\"method ${path.method} ${path.deprecated ? 'deprecated' : ''}\"> ${path.method} </div>\n    <div  part=\"section-endpoint-head-path\" class=\"path ${path.deprecated ? 'deprecated' : ''}\">\n      ${path.path}\n      ${path.isWebhook ? html`<span class=\"span-whook\"> Webhook</span>` : ''}\n    </div>\n    ${path.deprecated\n      ? html`\n        <span class=\"span-depr\">\n          deprecated\n        </span>`\n      : ''\n    }\n    ${this.showSummaryWhenCollapsed\n      ? html`\n        <div class=\"only-large-screen summary-collapsed\"></div>\n        <div part=\"section-endpoint-head-description\" class=\"descr\">${path.summary || path.shortSummary} </div>`\n      : ''\n    }\n  </summary>\n  `;\n}\n\nfunction endpointBodyTemplate(path) {\n  const acceptContentTypes = new Set();\n  for (const respStatus in path.responses) {\n    for (const acceptContentType in (path.responses[respStatus]?.content)) {\n      acceptContentTypes.add(acceptContentType.trim());\n    }\n  }\n  const accept = [...acceptContentTypes].join(', ');\n  // Filter API Keys that are non-empty and are applicable to the the path\n  const nonEmptyApiKeys = this.resolvedSpec.securitySchemes.filter((v) => (v.finalKeyValue && path.security?.some((ps) => (v.securitySchemeId in ps)))) || [];\n\n  // If a RapiDoc API Key is specified on the element and its value is not hyphen(-) then include it for all paths\n  const rapiDocApiKey = this.resolvedSpec.securitySchemes.find((v) => (v.securitySchemeId === rapidocApiKey && v.value !== '-'));\n  if (rapiDocApiKey) {\n    nonEmptyApiKeys.push(rapiDocApiKey);\n  }\n\n  const codeSampleTabPanel = path.xCodeSamples ? codeSamplesTemplate(path.xCodeSamples) : '';\n  return html`\n  <div part=\"section-endpoint-body-${path.expanded ? 'expanded' : 'collapsed'}\" class='endpoint-body ${path.method} ${path.deprecated ? 'deprecated' : ''}'>\n    <div class=\"summary\">\n      ${path.summary\n        ? html`<div class=\"title\" part=\"section-endpoint-body-title\">${path.summary}<div>`\n        : path.shortSummary !== path.description\n          ? html`<div class=\"title\" part=\"section-endpoint-body-title\">${path.shortSummary}</div>`\n          : ''\n      }\n      ${path.xBadges && path.xBadges?.length > 0\n        ? html`\n          <div class=\"code-sample-badge\">\n            ${path.xBadges.map((v) => (\n              html`<span part=\"endpoint-badge endbadge-style\" style=\"background-color: var(--light-${v.color}, var(--input-bg)); color:var(--${v.color}); border:1px solid var(--${v.color})\">${v.label}</span>`\n              ))\n            }\n          </div>\n          `\n        : ''\n      }\n\n      ${path.description ? html`<div part=\"section-endpoint-body-description\" class=\"m-markdown\"> ${unsafeHTML(marked(path.description))}</div>` : ''}\n      <slot name=\"${path.elementId}\"></slot>\n      ${pathSecurityTemplate.call(this, path.security)}\n      ${codeSampleTabPanel}\n    </div>\n    <div class='req-resp-container'>\n      <div class=\"view-mode-request ${this.layout}-layout resp-cont-int\">\n        <api-request\n          class = \"${this.renderStyle}-mode ${this.layout}-layout full-width\"\n          webhook = \"${path.isWebhook}\"\n          method = \"${path.method}\",\n          path = \"${path.path}\"\n          .security = \"${path.security}\"\n          .parameters = \"${path.parameters}\"\n          .request_body = \"${path.requestBody}\"\n          .api_keys = \"${nonEmptyApiKeys}\"\n          .servers = \"${path.servers}\"\n          server-url = \"${path.servers && path.servers.length > 0 ? path.servers[0].url : this.selectedServer.computedUrl}\"\n          active-schema-tab = \"${this.defaultSchemaTab}\"\n          fill-request-fields-with-example = \"${this.fillRequestFieldsWithExample}\"\n          allow-try = \"${this.allowTry}\"\n          accept = \"${accept}\"\n          render-style=\"${this.renderStyle}\"\n          schema-style = \"${this.schemaStyle}\"\n          schema-expand-level = \"${this.schemaExpandLevel}\"\n          schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n          allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\n          schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\n          schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\n          fetch-credentials = \"${this.fetchCredentials}\"\n          exportparts = \"btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, btn-clear:btn-clear, btn-clear-resp:btn-clear-resp,\n            file-input:file-input, textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param,\n            anchor:anchor, anchor-param-example:anchor-param-example, schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n        > </api-request>\n\n          ${path.callbacks ? callbackTemplate.call(this, path.callbacks) : ''}\n      </div>\n\n      <api-response\n        class = \"${this.renderStyle}-mode resp-blk-left\"\n        webhook = \"${path.isWebhook}\"\n        .responses=\"${path.responses}\"\n        active-schema-tab = \"${this.defaultSchemaTab}\"\n        render-style=\"${this.renderStyle}\"\n        schema-style=\"${this.schemaStyle}\"\n        schema-expand-level = \"${this.schemaExpandLevel}\"\n        schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n        allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\"\n        schema-hide-read-only = \"${this.schemaHideReadOnly === 'never' ? 'false' : path.isWebhook ? 'true' : 'false'}\"\n        schema-hide-write-only = \"${this.schemaHideWriteOnly === 'never' ? 'false' : path.isWebhook ? 'false' : 'true'}\"\n        selected-status = \"${Object.keys(path.responses || {})[0] || ''}\"\n        exportparts = \"btn:btn, btn-fill:btn-fill, btn-outline:btn-outline, btn-try:btn-try, file-input:file-input,\n        textbox:textbox, textbox-param:textbox-param, textarea:textarea, textarea-param:textarea-param, anchor:anchor, anchor-param-example:anchor-param-example, btn-clear-resp:btn-clear-resp,\n        schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n      > </api-response>\n    </div>\n  </div>`;\n}\n\nexport default function endpointTemplate(showExpandCollapse = true, showTags = true, pathsExpanded = false) {\n  if (!this.resolvedSpec) { return ''; }\n  return html`\n    ${showExpandCollapse\n      ? html`\n        <div class=\"expand-collapse\">\n          <span @click=\"${(e) => onExpandCollapseAll(e, 'expand-all')}\" class=\"expcol-link\">\n            Expand all\n          </span>\n          &nbsp;|&nbsp;\n          <span @click=\"${(e) => onExpandCollapseAll(e, 'collapse-all')}\" class=\"expcol-link\">\n            Collapse all\n          </span>\n          &nbsp; sections\n        </div>`\n      : ''\n    }\n    ${this.resolvedSpec.tags.map((tag) => html`\n      ${showTags\n        ? html`\n          <div class='regular-font section-gap section-tag ${tag.expanded ? 'expanded' : 'collapsed'}'>\n            <div class='section-tag-header' @click=\"${() => { tag.expanded = !tag.expanded; this.requestUpdate(); }}\">\n              <div id='${tag.elementId}' class=\"sub-title tag\" class=\"prim-color\">${tag.name}</div>\n            </div>\n            <div class='section-tag-body'>\n              <slot name=\"${tag.elementId}\"></slot>\n              <div class=\"regular-font regular-font-size m-markdown pad-bot-12\">\n                ${unsafeHTML(marked(tag.description || ''))}\n              </div>\n              ${tag.paths.filter((v) => {\n                if (this.matchPaths) {\n                  return pathIsInSearch(this.matchPaths, v, this.matchType);\n                }\n                return true;\n                }).map((path) => html`\n                <section part=\"section-endpoint\" id='${path.elementId}' class='m-endpoint regular-font ${path.method} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\n                  ${endpointHeadTemplate.call(this, path, pathsExpanded)}\n                  ${pathsExpanded || path.expanded ? endpointBodyTemplate.call(this, path) : ''}\n                </section>`)\n              }\n            </div>\n          </div>`\n        : html`\n          <div class='section-tag-body'>\n          ${tag.paths.filter((v) => {\n            if (this.matchPaths) {\n              return pathIsInSearch(this.matchPaths, v, this.matchType);\n            }\n            return true;\n            }).map((path) => html`\n            <section id='${path.elementId}' class='m-endpoint regular-font ${path.method} ${pathsExpanded || path.expanded ? 'expanded' : 'collapsed'}'>\n              ${endpointHeadTemplate.call(this, path, pathsExpanded)}\n              ${pathsExpanded || path.expanded ? endpointBodyTemplate.call(this, path) : ''}\n            </section>`)\n          }\n          </div>\n        `\n      }\n  `)\n  }`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\n\n/* eslint-disable indent */\nexport default function logoTemplate(style) {\nreturn html`\n  <div class=\"${style}\">\n  </div>\n`;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport logoTemplate from '~/templates/logo-template';\n\n/* eslint-disable indent */\nexport default function headerTemplate() {\n  return html`\n  <header class=\"row main-header regular-font header-uppr-level\" part=\"section-header\">\n    <div class=\"flex-align-cntr\" >\n      <slot name=\"logo\" class=\"logo\" part=\"section-logo\">\n        ${logoTemplate('blogo-style')}\n      </slot>\n      <div class=\"only-large-screen-flex header-title\" part=\"label-header-title\">${this.headingText}</div>\n    </div>\n    <div class=\"flex-align-cntr header-cntnr\">\n      ${(this.allowSpecUrlLoad === 'false')\n        ? ''\n        : html`\n          <input id=\"spec-url\"\n            type=\"text\"\n            class=\"header-input mono-font fnt-size-small\"\n            part=\"textbox textbox-spec-url\"\n            placeholder=\"Spec URL\"\n            value=\"${this.specUrl || ''}\"\n            @change=\"${this.onSepcUrlChange}\"\n            spellcheck=\"false\"\n          >\n          <div class=\"larrow-btn\">&#x21a9;</div>\n        `\n      }\n      ${(this.allowSpecFileLoad === 'false')\n        ? ''\n        : html`\n          <input id=\"spec-file\"\n            part = \"file-input\"\n            type=\"file\"\n            style=\"display:none\"\n            value=\"${this.specFile || ''}\"\n            @change=\"${this.onSepcFileChange}\"\n            spellcheck=\"false\"\n           >\n          <button class=\"m-btn primary only-large-screen mrgn-lft-10\" part=\"btn btn-fill\" @click=\"${this.onFileLoadClick}\"> LOCAL JSON FILE </button>\n        `\n      }\n      <slot name=\"header\"></slot>\n      ${(this.allowSearch === 'false' || 'focused'.includes(this.renderStyle))\n        ? ''\n        : html`\n          <input id=\"search\" class=\"header-input mrgn-lft-10 mx-wdth-130\" type=\"text\" part=\"textbox textbox-header-filter\" placeholder=\"Filter\" @change=\"${this.onSearchChange}\" spellcheck=\"false\" >\n          <div class=\"larrow-btn\">&#x21a9;</div>\n        `\n      }\n\n      ${(this.allowAdvancedSearch === 'false' || 'focused'.includes(this.renderStyle))\n        ? ''\n        : html`\n          <button class=\"m-btn primary only-large-screen btn-prim-large\" part=\"btn btn-fill btn-search\" @click=\"${this.onShowSearchModalClicked}\">\n            Search\n          </button>\n        `\n      }\n    </div>\n    </header>`;\n  }\n/* eslint-enable indent */\n","import { LitElement, html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\nimport { schemaInObjectNotation, generateExample } from '~/utils/schema-utils';\nimport FontStyles from '~/styles/font-styles';\nimport FlexStyles from '~/styles/flex-styles';\nimport TableStyles from '~/styles/table-styles';\nimport InputStyles from '~/styles/input-styles';\nimport TabStyles from '~/styles/tab-styles';\nimport BorderStyles from '~/styles/border-styles';\nimport ApiResponseStyles from '~/styles/api-response-styles';\nimport CustomStyles from '~/styles/custom-styles';\nimport '~/components/schema-tree';\nimport '~/components/schema-table';\n\nexport default class ApiResponse extends LitElement {\n  constructor() {\n    super();\n    this.selectedStatus = '';\n    this.headersForEachRespStatus = {};\n    this.mimeResponsesForEachStatus = {};\n    this.activeSchemaTab = 'schema';\n  }\n\n  static get properties() {\n    return {\n      callback: { type: String },\n      webhook: { type: String },\n      responses: { type: Object },\n      parser: { type: Object },\n      schemaStyle: { type: String, attribute: 'schema-style' },\n      renderStyle: { type: String, attribute: 'render-style' },\n      selectedStatus: { type: String, attribute: 'selected-status' },\n      selectedMimeType: { type: String, attribute: 'selected-mime-type' },\n      activeSchemaTab: { type: String, attribute: 'active-schema-tab' },\n      schemaExpandLevel: { type: Number, attribute: 'schema-expand-level' },\n      schemaDescriptionExpanded: { type: String, attribute: 'schema-description-expanded' },\n      allowSchemaDescriptionExpandToggle: { type: String, attribute: 'allow-schema-description-expand-toggle' },\n      schemaHideReadOnly: { type: String, attribute: 'schema-hide-read-only' },\n      schemaHideWriteOnly: { type: String, attribute: 'schema-hide-write-only' },\n    };\n  }\n\n  static get styles() {\n    return [\n      FontStyles,\n      FlexStyles,\n      TabStyles,\n      TableStyles,\n      InputStyles,\n      BorderStyles,\n      ApiResponseStyles,\n      CustomStyles,\n    ];\n  }\n\n  render() {\n    return html`\n    <h3 class=\"col regular-font response-panel ${this.renderStyle}-mode\">\n      <div class=\" ${this.callback === 'true' ? 'tiny-title' : 'req-res-title'} \">\n        ${this.callback === 'true' ? 'Callback response' : 'Response'}\n      </h3>\n      <div>\n        ${this.responseTemplate()}\n      <div>\n    </div>\n    `;\n  }\n\n  resetSelection() {\n    this.selectedStatus = '';\n    this.selectedMimeType = '';\n  }\n\n  /* eslint-disable indent */\n  responseTemplate() {\n    if (!this.responses) { return ''; }\n    for (const statusCode in this.responses) {\n      if (!this.selectedStatus) {\n        this.selectedStatus = statusCode;\n      }\n      const allMimeResp = {};\n      for (const mimeResp in this.responses[statusCode]?.content) {\n        const mimeRespObj = this.responses[statusCode].content[mimeResp];\n        if (!this.selectedMimeType) {\n          this.selectedMimeType = mimeResp;\n        }\n        // Generate Schema\n        const schemaTree = schemaInObjectNotation(mimeRespObj.schema, {});\n        // Generate Example\n        const respExamples = generateExample(\n          mimeRespObj.schema,\n          mimeResp,\n          mimeRespObj.examples,\n          mimeRespObj.example,\n          this.callback === 'true' || this.webhook === 'true' ? false : true, // eslint-disable-line no-unneeded-ternary\n          this.callback === 'true' || this.webhook === 'true' ? true : false, // eslint-disable-line no-unneeded-ternary\n          mimeResp.includes('json') ? 'json' : 'text',\n        );\n        allMimeResp[mimeResp] = {\n          description: this.responses[statusCode].description,\n          examples: respExamples,\n          selectedExample: respExamples[0]?.exampleId || '',\n          schemaTree,\n        };\n      }\n      // Headers for each response status\n      const tempHeaders = [];\n      for (const key in this.responses[statusCode]?.headers) {\n        tempHeaders.push({ name: key, ...this.responses[statusCode].headers[key] });\n      }\n      this.headersForEachRespStatus[statusCode] = tempHeaders;\n      this.mimeResponsesForEachStatus[statusCode] = allMimeResp;\n    }\n    return html`\n      ${Object.keys(this.responses).length > 1\n        ? html`<div class='row resp-div'>\n          ${Object.keys(this.responses).map((respStatus) => html`\n            ${respStatus === '$$ref' // Swagger-Client parser creates '$$ref' object if JSON references are used to create responses - this should be ignored\n              ? ''\n              : html`\n                <button\n                  @click=\"${() => {\n                    this.selectedStatus = respStatus;\n                    if (this.responses[respStatus].content && Object.keys(this.responses[respStatus].content)[0]) {\n                      this.selectedMimeType = Object.keys(this.responses[respStatus].content)[0]; // eslint-disable-line prefer-destructuring\n                    } else {\n                      this.selectedMimeType = undefined;\n                    }\n                  }}\"\n                  class='status-code status-code-${respStatus.replace(/..$/, 'xx')} btn-rsp-stat'\n                  part=\"btn ${this.selectedStatus === respStatus ? 'btn-response-status btn-selected-response-status' : ' btn-response-status'}\"\n                >\n                  ${respStatus}\n                </button>`\n              }`)\n          }`\n        : html`<span class=\"status-code-${Object.keys(this.responses)[0].replace(/..$/, 'xx')}\">${Object.keys(this.responses)[0]}</span>`\n      }\n      </div>\n\n      ${Object.keys(this.responses).map((status) => html`\n        <div style = 'display: ${status === this.selectedStatus ? 'block' : 'none'}' >\n          <div class=\"top-gap\">\n            <span class=\"resp-descr m-markdown \">${unsafeHTML(marked(this.responses[status]?.description || ''))}</span>\n            ${(this.headersForEachRespStatus[status] && this.headersForEachRespStatus[status]?.length > 0)\n              ? html`${this.responseHeaderListTemplate(this.headersForEachRespStatus[status])}`\n              : ''\n            }\n          </div>\n          ${Object.keys(this.mimeResponsesForEachStatus[status]).length === 0\n            ? ''\n            : html`\n              <div class=\"mrg-top-15\">\n                <div class='resp-blk-right'>\n                      ${this.mimeExampleTemplate(this.mimeResponsesForEachStatus[status][this.selectedMimeType])}\n                    </div>\n                <div class='resp-blk-left'>\n                      ${this.mimeSchemaTemplate(this.mimeResponsesForEachStatus[status][this.selectedMimeType])}\n                    </div>\n              </div>\n            `\n          }`)\n        }\n    `;\n  }\n\n  responseHeaderListTemplate(respHeaders) {\n    return html`\n      <div class=\"resp-headers small-font-size bold-text\">RESPONSE HEADERS</div>\n      <table class=\"small-font-size mono-font resp-headers-table\">\n        ${respHeaders.map((v) => html`\n          <tr>\n            <td class=\"resp-headers-name\">\n              ${v.name || ''}\n            </td>\n            <td class=\"resp-headers-type\">\n              ${v.schema.type || ''}\n            </td>\n            <td class=\"resp-headers-description\">\n              <div class=\"m-markdown-small regular-font\" >${unsafeHTML(marked(v.description || ''))}</div>\n            </td>\n            <td class=\"resp-headers-example\">\n              ${v.schema.example || ''}\n            </td>\n          </tr>\n        `)}\n    </table>`;\n  }\n\n  mimeTypeDropdownTemplate(mimeTypes) {\n    return html`\n      <select @change=\"${(e) => { this.selectedMimeType = e.target.value; }}\" class='resp-mime'>\n        ${mimeTypes.map((mimeType) => html`<option value='${mimeType}' ?selected = '${mimeType === this.selectedMimeType}'> ${mimeType} </option>`)}\n      </select>`;\n  }\n\n  onSelectExample(e) {\n    const exampleContainerEl = e.target.closest('.example-panel');\n    const exampleEls = [...exampleContainerEl.querySelectorAll('.example')];\n\n    exampleEls.forEach((v) => {\n      v.style.display = v.dataset.example === e.target.value ? 'block' : 'none';\n    });\n  }\n\n  mimeExampleTemplate(mimeRespDetails) {\n    if (!mimeRespDetails) {\n      return html`\n        <pre class='red-text ${this.renderStyle === 'read' ? 'read example-panel border pad-8-16' : 'example-panel border-top'}'> No example provided </pre>\n      `;\n    }\n    return html`\n      ${mimeRespDetails.examples.length === 1\n        ? html`\n          ${mimeRespDetails.examples[0].exampleFormat === 'json'\n            ? html`\n              ${mimeRespDetails.examples[0].exampleSummary && mimeRespDetails.examples[0].exampleSummary.length > 80 ? html`<div class=\"resp-example-padding\"> ${mimeRespDetails.examples[0].exampleSummary} </div>` : ''}\n              ${mimeRespDetails.examples[0].exampleDescription ? html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div> ${unsafeHTML(marked(mimeRespDetails.examples[0].exampleDescription || ''))} </div>`\n              : html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div></div>`}\n              <json-tree\n                render-style = '${this.renderStyle}'\n                .data=\"${mimeRespDetails.examples[0].exampleValue}\"\n                class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'\n                exportparts = \"btn:btn, btn-fill:btn-fill, btn-copy:btn-copy\"\n              ></json-tree>`\n            : html`\n              ${mimeRespDetails.examples[0].exampleSummary && mimeRespDetails.examples[0].exampleSummary.length > 80 ? html`<div class=\"resp-example-padding\"> ${mimeRespDetails.examples[0].exampleSummary} </div>` : ''}\n              ${mimeRespDetails.examples[0].exampleDescription ? html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div> ${unsafeHTML(marked(mimeRespDetails.examples[0].exampleDescription || ''))} </div>`\n              : html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div></div>`}\n              <pre class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'>${mimeRespDetails.examples[0].exampleValue}</pre>\n            `\n          }`\n        : html`${mimeRespDetails.examples[0].exampleSummary && mimeRespDetails.examples[0].exampleSummary.length > 80 ? html`<div class=\"resp-example-padding\"> ${mimeRespDetails.examples[0].exampleSummary} </div>` : ''}\n          ${mimeRespDetails.examples[0].exampleDescription ? html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div> ${unsafeHTML(marked(mimeRespDetails.examples[0].exampleDescription || ''))} </div>`\n          : html`<div class=\"resp-example-style\"><div class='bold-text regular-font-size'>Sample response</div></div>`}\n          <span class = 'example-panel ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top pad-top-8'}'>\n            <select class=\"resp-example-select\" @change='${(e) => this.onSelectExample(e)}'>\n              ${mimeRespDetails.examples.map((v) => html`<option value=\"${v.exampleId}\" ?selected=${v.exampleId === mimeRespDetails.selectedExample} >\n                ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary}\n              </option>`)}\n            </select>\n            ${mimeRespDetails.examples.map((v) => html`\n              <div class=\"example\" data-example = '${v.exampleId}' style = \"display: ${v.exampleId === mimeRespDetails.selectedExample ? 'block' : 'none'}\">\n                ${v.exampleFormat === 'json'\n                  ? html`\n                    <json-tree\n                      render-style = '${this.renderStyle}'\n                      .data = '${v.exampleValue}'\n                      exportparts = \"btn:btn, btn-fill:btn-fill, btn-copy:btn-copy\"\n                    ></json-tree>`\n                  : html`<pre>${v.exampleValue}</pre>`\n                }\n              </div>\n            `)}\n          </span>\n        `\n      }\n    `;\n  }\n\n  mimeSchemaTemplate(mimeRespDetails) {\n    if (!mimeRespDetails) {\n      return html`\n        <pre class = 'red-text ${this.renderStyle === 'read' ? 'border pad-8-16' : 'border-top'}'> Schema not found</pre>\n      `;\n    }\n    return html`\n      ${this.schemaStyle === 'table'\n        ? html`\n          <schema-table\n            render-style = \"${this.renderStyle}\"\n            .data = \"${mimeRespDetails.schemaTree}\"\n            schema-expand-level = \"${this.schemaExpandLevel}\"\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n            schema-hide-read-only = \"${this.schemaHideReadOnly}\"\n            schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n            exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n          > </schema-tree> `\n        : html`\n          <schema-tree\n            render-style = \"${this.renderStyle}\"\n            .data = '${mimeRespDetails.schemaTree}'\n            schema-expand-level = \"${this.schemaExpandLevel}\"\n            schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n            allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n            schema-hide-read-only = \"${this.schemaHideReadOnly}\"\n            schema-hide-write-only = \"${this.schemaHideWriteOnly}\"\n            exportparts = \"schema-description:schema-description, schema-multiline-toggle:schema-multiline-toggle\"\n          > </schema-tree>`\n      }`;\n  }\n  /* eslint-enable indent */\n}\n\n// Register the element with the browser\ncustomElements.define('api-response', ApiResponse);\n","import { html } from 'lit';\nimport '~/components/dialog-box';\n\n/* eslint-disable indent */\nexport default function searchByPropertiesModalTemplate() {\n  document.addEventListener('close', () => { this.showAdvancedSearchDialog = false; });\n  document.addEventListener('open', this.onOpenSearchDialog);\n\n  return html`\n    <dialog-box\n      heading=\"Search\"\n      show=\"${(!!this.showAdvancedSearchDialog)}\"\n    >\n      <span class=\"advanced-search-options\">\n        <input\n          class=\"search-main\"\n          type=\"text\"\n          part=\"textbox textbox-search-dialog\"\n          placeholder=\"search text...\"\n          spellcheck=\"false\"\n          @keyup = \"${(e) => this.onAdvancedSearch(e, 400)}\"\n        >\n        <div class=\"search-div\">\n          <div>\n            <input class=\"cpointer\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-path\" checked @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\n            <label for=\"search-api-path\" class=\"cpointer\"> API Path </label>\n            </div>\n          <div class=\"search-cbox\">\n            <input class=\"cpointer\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-descr\" checked @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\n            <label class=\"cpointer\" for=\"search-api-descr\"> API Description </label>\n          </div>\n          <div class=\"search-cbox\">\n            <input class=\"cpointer\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-params\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\n            <label class=\"cpointer\" for=\"search-api-params\"> API Parameters </label>\n          </div>\n          <div class=\"search-cbox\">\n            <input class=\"cpointer\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-request-body\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\n            <label class=\"cpointer\" for=\"search-api-request-body\"> Request Body Parameters </label>\n          </div>\n          <div class=\"search-cbox\">\n            <input class=\"cpointer\" type=\"checkbox\" part=\"checkbox checkbox-search-dialog\" id=\"search-api-resp-descr\" @change = \"${(e) => this.onAdvancedSearch(e, 0)}\">\n            <label class=\"cpointer\" for=\"search-api-resp-descr\"> Response Description </label>\n          </div>\n        </div>\n      </span>\n\n      ${this.advancedSearchMatches?.map((path) => html`\n      <div\n        class=\"mono-font small-font-size hover-bg search-results\"\n        style='${path.deprecated ? 'filter:opacity(0.5);' : ''}'\n        data-content-id='${path.elementId}'\n        tabindex = '0'\n        @click=\"${\n          (e) => {\n            this.matchPaths = ''; // clear quick filter if applied\n            this.showAdvancedSearchDialog = false; // Hide Search Dialog\n            this.requestUpdate();\n            this.scrollToEventTarget(e, true);\n          }\n        }\"\n      >\n        <span class=\"upper bold-text method-fg ${path.method}\">${path.method}</span>\n        <span>${path.path}</span>\n        <span class=\"regular-font gray-text\">${path.summary}</span>\n      </div>\n    `)\n    }\n    </dialog-box>\n  `;\n}\n/* eslint-enable indent */\n","import { LitElement, html } from 'lit';\nimport DialogBoxStyles from '~/styles/dialog-box-styles';\n\nexport default class DialogBox extends LitElement {\n  static get properties() {\n    return {\n      heading: { type: String, attribute: 'heading' },\n      show: { type: String, attribute: 'show' },\n    };\n  }\n\n  static get styles() {\n    return [\n      DialogBoxStyles,\n    ];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    document.addEventListener('keydown', (e) => {\n      if (e.code === 'Escape') {\n        this.onClose();\n      }\n    });\n  }\n\n  attributeChangedCallback(name, oldVal, newVal) {\n    if (oldVal !== newVal) {\n      if (name === 'heading') {\n        this.heading = newVal;\n      }\n      if (name === 'show') {\n        this.show = newVal;\n        if (newVal === 'true') {\n          document.dispatchEvent(new CustomEvent('open', {\n            bubbles: true,\n            composed: true,\n            detail: this,\n          }));\n        }\n      }\n    }\n    super.attributeChangedCallback(name, oldVal, newVal);\n  }\n\n  /* eslint-disable indent */\n  render() {\n    return html`\n    ${this.show === 'true'\n      ? html`\n        <div class=\"dialog-box-overlay\">\n          <div class=\"dialog-box\">\n            <header class=\"dialog-box-header\">\n              <span class=\"dialog-box-title\">${this.heading}</span>\n              <button type=\"button\" @click=\"${this.onClose}\">&times;</button>\n            </header>\n            <div class=\"dialog-box-content\">\n              <slot></slot>\n            </div>\n          </div>\n        </div>`\n      : ''\n    }`;\n  }\n  /* eslint-enable indent */\n\n  onClose() {\n    document.dispatchEvent(new CustomEvent('close', {\n      bubbles: true,\n      composed: true,\n    }));\n  }\n}\n\ncustomElements.define('dialog-box', DialogBox);\n","import { html } from 'lit';\nimport ColorUtils from '~/utils/color-utils';\n/* Generates an schema object containing type and constraint info */\nexport default function setTheme(baseTheme, theme = {}) {\n  let newTheme = {};\n\n  // Common Theme colors\n  const primaryColor = theme.primaryColor ? theme.primaryColor : baseTheme === 'dark' ? '#f76b39' : '#ff591e';\n  const primaryColorInvert = ColorUtils.color.invert(primaryColor);\n  const primaryColorTrans = ColorUtils.color.opacity(primaryColor, '0.8');\n\n  // Dark and Light Theme colors\n  if (baseTheme === 'dark') {\n    const bg1 = (theme.bg1 ? theme.bg1 : '#ffffff');\n    const fg1 = (theme.fg1 ? theme.fg1 : '#1E2126');\n    const bg2 = theme.bg2 ? theme.bg2 : ColorUtils.color.brightness(bg1, -5); // or '#fafafa'\n    const bg3 = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -15); // or '#f6f6f6'\n    const lightBg = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -45);\n    const fg2 = theme.fg2 ? theme.fg2 : ColorUtils.color.brightness(fg1, 17); // or '#555'\n    const fg3 = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 30); // or #666\n    const lightFg = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 70); // or #999\n    const inlineCodeFg = theme.inlineCodeFg ? theme.inlineCodeFg : 'brown';\n    const selectionBg = '#1E2126';\n    const selectionFg = '#eee';\n\n    const headerColor = theme.headerColor ? theme.headerColor : ColorUtils.color.brightness(bg1, -180);\n\n    const navBgColor = theme.navBgColor ? theme.navBgColor : ColorUtils.color.brightness(bg1, -180);\n    const navTextColor = theme.navTextColor ? theme.navTextColor : ColorUtils.color.opacity(ColorUtils.color.invert(navBgColor), '0.65');\n    const navHoverBgColor = theme.navHoverBgColor ? theme.navHoverBgColor : ColorUtils.color.brightness(navBgColor, -15);\n    const navHoverTextColor = theme.navHoverTextColor ? theme.navHoverTextColor : ColorUtils.color.invert(navBgColor);\n    const navAccentColor = theme.navAccentColor ? theme.navAccentColor : ColorUtils.color.brightness(primaryColor, 25);\n    const overlayBg = 'rgba(0, 0, 0, 0.4)';\n\n    newTheme = {\n      bg1,\n      bg2,\n      bg3,\n      lightBg,\n      fg1,\n      fg2,\n      fg3,\n      lightFg,\n      inlineCodeFg,\n      primaryColor,\n      primaryColorTrans,\n      primaryColorInvert,\n      selectionBg,\n      selectionFg,\n      overlayBg,\n      navBgColor,\n      navTextColor,\n      navHoverBgColor,\n      navHoverTextColor,\n      navAccentColor,\n\n      headerColor,\n      headerColorInvert: ColorUtils.color.invert(headerColor),\n      headerColorDarker: ColorUtils.color.brightness(headerColor, -20),\n      headerColorBorder: ColorUtils.color.brightness(headerColor, 10),\n\n      borderColor: theme.borderColor || ColorUtils.color.brightness(bg1, -38),\n      lightBorderColor: theme.lightBorderColor || ColorUtils.color.brightness(bg1, -23),\n      codeBorderColor: theme.codeBorderColor || 'transparent',\n\n      inputBg: theme.inputBg || ColorUtils.color.brightness(bg1, 10), // #fff\n      placeHolder: theme.placeHolder || ColorUtils.color.brightness(lightFg, 20), // #dedede\n      hoverColor: theme.hoverColor || ColorUtils.color.brightness(bg1, -5), // # f1f1f1\n\n      gray: theme.gray || 'rgba(30,33,38,1)',\n      lighterGray: theme.lighterGray || 'rgba(30,33,38,.64)',\n      lightGray: theme.lightGray || 'rgba(30,33,38,.12)',\n      lightestGray: theme.lightestGray || 'rgba(30,33,38,.08)',\n\n      red: theme.red || 'rgba(217,93,43,1)',\n      lighterRed: theme.lighterRed || 'rgba(217,93,43,.64)',\n      lightRed: theme.lightRed || 'rgba(217,93,43,.16)',\n\n      pink: theme.pink ? theme.pink : 'rgba(181,126,220,1)',\n      lighterPink: theme.lighterPink ? theme.lighterPink : 'rgba(181,126,220,.74)',\n      lightPink: theme.lightPink ? theme.lightPink : 'rgba(181,126,220,.16)',\n\n      green: theme.green || 'rgba(21,155,0,1)',\n      lighterGreen: theme.lighterGreen || 'rgba(21,155,0,.64)',\n      lightGreen: theme.lightGreen || 'rgba(21,155,0,.12)',\n\n      blue: theme.blue || 'rgba(0,105,255,1)',\n      darkBlue: theme.darkBlue || 'rgba(0,85,217,1)',\n      lighterBlue: theme.lighterBlue || 'rgba(0,105,255,.56)',\n      lightBlue: theme.lightBlue || 'rgba(0,105,255,.12)',\n\n      blueAdd: theme.blueAdd || 'rgba(0,85,217,1)',\n      lighterBlueAdd: theme.lighterBlueAdd || 'rgba(0,85,217,.56)',\n      lightBlueAdd: theme.lightBlueAdd || 'rgba(0,85,217,.12)',\n\n      orange: theme.orange || 'rgba(255,140,95,1)',\n      lighterOrange: theme.lighterOrange || 'rgba(255,140,95,.64)',\n      lightOrange: theme.lightOrange || 'rgba(255,140,95,.12)',\n\n      yellow: theme.yellow || 'rgba(229,149,22,1)',\n      lighterYellow: theme.lighterYellow || 'rgba(229,149,22,.74)',\n      lightYellow: theme.lightYellow || 'rgba(229,149,22,.16)',\n\n      purple: theme.purple || '#d95d2b',\n      brown: theme.brown || '#D4AC0D',\n\n      codeBg: theme.codeBg || ColorUtils.color.opacity(ColorUtils.color.brightness('#1E2126', 0), 1),\n      codeFg: theme.codeFg || '#fff',\n      codePropertyColor: theme.codePropertyColor || '#905',\n      codeKeywordColor: theme.codeKeywordColor || '#07a',\n      codeOperatorColor: theme.codeOperatorColor || '#9a6e3a',\n    };\n  } else {\n    const bg1 = (theme.bg1 ? theme.bg1 : '#ffffff');\n    const fg1 = (theme.fg1 ? theme.fg1 : '#1E2126');\n    const bg2 = theme.bg2 ? theme.bg2 : ColorUtils.color.brightness(bg1, -5); // or '#fafafa'\n    const bg3 = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -15); // or '#f6f6f6'\n    const lightBg = theme.bg3 ? theme.bg3 : ColorUtils.color.brightness(bg1, -45);\n    const fg2 = theme.fg2 ? theme.fg2 : ColorUtils.color.brightness(fg1, 17); // or '#555'\n    const fg3 = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 30); // or #666\n    const lightFg = theme.fg3 ? theme.fg3 : ColorUtils.color.brightness(fg1, 70); // or #999\n    const inlineCodeFg = theme.inlineCodeFg ? theme.inlineCodeFg : 'brown';\n\n    const selectionBg = '#1E2126';\n    const selectionFg = '#eee';\n\n    const headerColor = theme.headerColor ? theme.headerColor : ColorUtils.color.brightness(bg1, -180);\n\n    const navBgColor = theme.navBgColor ? theme.navBgColor : ColorUtils.color.brightness(bg1, -180);\n    const navTextColor = theme.navTextColor ? theme.navTextColor : ColorUtils.color.opacity(ColorUtils.color.invert(navBgColor), '0.65');\n    const navHoverBgColor = theme.navHoverBgColor ? theme.navHoverBgColor : ColorUtils.color.brightness(navBgColor, -15);\n    const navHoverTextColor = theme.navHoverTextColor ? theme.navHoverTextColor : ColorUtils.color.invert(navBgColor);\n    const navAccentColor = theme.navAccentColor ? theme.navAccentColor : ColorUtils.color.brightness(primaryColor, 25);\n    const overlayBg = 'rgba(0, 0, 0, 0.4)';\n\n    newTheme = {\n      bg1,\n      bg2,\n      bg3,\n      lightBg,\n      fg1,\n      fg2,\n      fg3,\n      lightFg,\n      inlineCodeFg,\n      primaryColor,\n      primaryColorTrans,\n      primaryColorInvert,\n      selectionBg,\n      selectionFg,\n      overlayBg,\n      navBgColor,\n      navTextColor,\n      navHoverBgColor,\n      navHoverTextColor,\n      navAccentColor,\n\n      headerColor,\n      headerColorInvert: ColorUtils.color.invert(headerColor),\n      headerColorDarker: ColorUtils.color.brightness(headerColor, -20),\n      headerColorBorder: ColorUtils.color.brightness(headerColor, 10),\n\n      borderColor: theme.borderColor || ColorUtils.color.brightness(bg1, -38),\n      lightBorderColor: theme.lightBorderColor || ColorUtils.color.brightness(bg1, -23),\n      codeBorderColor: theme.codeBorderColor || 'rgba(30,33,38,.08)',\n\n      inputBg: theme.inputBg || ColorUtils.color.brightness(bg1, 10), // #fff\n      placeHolder: theme.placeHolder || ColorUtils.color.brightness(lightFg, 20), // #dedede\n      hoverColor: theme.hoverColor || ColorUtils.color.brightness(bg1, -5), // # f1f1f1\n\n      gray: theme.gray || 'rgba(30,33,38,1)',\n      lighterGray: theme.lighterGray || 'rgba(30,33,38,.64)',\n      lightGray: theme.lightGray || 'rgba(30,33,38,.12)',\n      lightestGray: theme.lightestGray || 'rgba(30,33,38,.08)',\n\n      red: theme.red || 'rgba(217,93,43,1)',\n      lighterRed: theme.lighterRed || 'rgba(217,93,43,.64)',\n      lightRed: theme.lightRed || 'rgba(217,93,43,.16)',\n      lightestRed: theme.lightestRed || 'rgba(255,140,95,.08)',\n\n      pink: theme.pink ? theme.pink : 'rgba(181,126,220,1)',\n      lighterPink: theme.lighterPink ? theme.lighterPink : 'rgba(181,126,220,.74)',\n      lightPink: theme.lightPink ? theme.lightPink : 'rgba(181,126,220,.16)',\n\n      green: theme.green || 'rgba(21,155,0,1)',\n      lighterGreen: theme.lighterGreen || 'rgba(21,155,0,.64)',\n      lightGreen: theme.lightGreen || 'rgba(21,155,0,.12)',\n      lightestGreen: theme.lightestGreen || 'gba(29,208,0,.08)',\n\n      blue: theme.blue || 'rgba(0,105,255,1)',\n      darkBlue: theme.darkBlue || 'rgba(0,85,217,1)',\n      lighterBlue: theme.lighterBlue || 'rgba(0,105,255,.56)',\n      lightBlue: theme.lightBlue || 'rgba(0,105,255,.12)',\n      lightestBlue: theme.lightestBlue || 'rgba(0,105,255,.08)',\n\n      blueAdd: theme.blueAdd || 'rgba(0,85,217,1)',\n      lighterBlueAdd: theme.lighterBlueAdd || 'rgba(0,85,217,.56)',\n      lightBlueAdd: theme.lightBlueAdd || 'rgba(0,85,217,.12)',\n\n      orange: theme.orange || 'rgba(255,140,95,1)',\n      lighterOrange: theme.lighterOrange || 'rgba(255,140,95,.64)',\n      lightOrange: theme.lightOrange || 'rgba(255,140,95,.12)',\n\n      yellow: theme.yellow || 'rgba(229,149,22,1)',\n      lighterYellow: theme.lighterYellow || 'rgba(229,149,22,.74)',\n      lightYellow: theme.lightYellow || 'rgba(229,149,22,.16)',\n\n      purple: theme.purple || '#d95d2b',\n      brown: theme.brown || '#D4AC0D',\n\n      codeBg: theme.codeBg || ColorUtils.color.opacity(ColorUtils.color.brightness('#1E2126', 0), 0.04),\n      codeFg: theme.codeFg || '#fff',\n      codePropertyColor: theme.codePropertyColor || '#905',\n      codeKeywordColor: theme.codeKeywordColor || '#07a',\n      codeOperatorColor: theme.codeOperatorColor || '#9a6e3a',\n    };\n  }\n  return html`\n  <style>\n  *, *:before, *:after { box-sizing: border-box; }\n\n  :host {\n    /* Common Styles - irrespective of themes */\n    --border-radius-bigger: 8px;\n    --border-radius: 6px;\n    --border-radius-smaller: 4px;\n    --layout: ${this.layout || 'row'};\n    --font-mono: ${this.monoFont || 'Monaco, \"Andale Mono\", \"Roboto Mono\", Consolas, monospace'};\n    --font-regular: ${this.regularFont || 'SuisseIntl,\"Fallback Helvetica\",\"Fallback Arial\",sans-serif'};\n    --scroll-bar-width: 8px;\n    --nav-item-padding: ${this.navItemSpacing === 'relaxed'\n    ? '10px 16px 10px 10px'\n    : (this.navItemSpacing === 'compact'\n      ? '5px 10px 5px 20px'\n      : '7px 16px 7px 10px')};\n\n    --resp-area-height: ${this.responseAreaHeight};\n    --font-size-small:  ${this.fontSize === 'default' ? '12px' : (this.fontSize === 'large' ? '14px' : '14px')};\n    --font-size-mono:   ${this.fontSize === 'default' ? '13px' : (this.fontSize === 'large' ? '13px' : '15px')};\n    --font-size-regular: ${this.fontSize === 'default' ? '14px' : (this.fontSize === 'large' ? '16px' : '16px')};\n    --dialog-z-index: 1000;\n\n    /* Theme specific styles */\n    --bg:${newTheme.bg1};\n    --bg2:${newTheme.bg2};\n    --bg3:${newTheme.bg3};\n    --light-bg:${newTheme.lightBg};\n    --fg:${newTheme.fg1};\n    --fg2:${newTheme.fg2};\n    --fg3:${newTheme.fg3};\n    --light-fg:${newTheme.lightFg};\n    --selection-bg:${newTheme.selectionBg};\n    --selection-fg:${newTheme.selectionFg};\n    --overlay-bg:${newTheme.overlayBg};\n\n    /* Border Colors */\n    --border-color:${newTheme.borderColor};\n    --light-border-color:${newTheme.lightBorderColor};\n    --code-border-color:${newTheme.codeBorderColor};\n\n    --input-bg:${newTheme.inputBg};\n    --placeholder-color:${newTheme.placeHolder};\n    --hover-color:${newTheme.hoverColor};\n    --gray:${newTheme.gray};\n    --lighter-gray:${newTheme.lighterGray};\n    --light-gray:${newTheme.lightGray};\n    --lightest-gray:${newTheme.lightestGray};\n    --red:${newTheme.red};\n    --lighter-red:${newTheme.lighterRed};\n    --light-red:${newTheme.lightRed};\n    --lightest-red:${newTheme.lightestRed};\n    --pink:${newTheme.pink};\n    --lighter-pink:${newTheme.lighterPink};\n    --light-pink:${newTheme.lightPink};\n    --green:${newTheme.green};\n    --lighter-green:${newTheme.lighterGreen};\n    --light-green:${newTheme.lightGreen};\n    --lightest-green:${newTheme.lightestGreen};\n    --blue:${newTheme.blue};\n    --dark-blue:${newTheme.darkBlue};\n    --lighter-blue:${newTheme.lighterBlue};\n    --light-blue:${newTheme.lightBlue};\n    --lightest-blue:${newTheme.lightestBlue};\n    --blue-add:${newTheme.blueAdd};\n    --lighter-blue-add:${newTheme.lighterBlueAdd};\n    --light-blue-add:${newTheme.lightBlueAdd};\n    --orange:${newTheme.orange};\n    --lighter-orange:${newTheme.lighterOrange};\n    --light-orange:${newTheme.lightOrange};\n    --yellow:${newTheme.yellow};\n    --lighter-yellow:${newTheme.lighterYellow};\n    --light-yellow:${newTheme.lightYellow};\n    --purple:${newTheme.purple};\n    --brown:${newTheme.brown};\n\n    /* Header Color */\n    --header-bg:${newTheme.headerColor};\n    --header-fg:${newTheme.headerColorInvert};\n    --header-color-darker:${newTheme.headerColorDarker};\n    --header-color-border:${newTheme.headerColorBorder};\n\n    /* Nav Colors */\n    --nav-bg-color:${newTheme.navBgColor};\n    --nav-text-color:${newTheme.navTextColor};\n    --nav-hover-bg-color:${newTheme.navHoverBgColor};\n    --nav-hover-text-color:${newTheme.navHoverTextColor};\n    --nav-accent-color:${newTheme.navAccentColor};\n\n    /* Nav API Method Colors*/\n    --nav-get-color:${newTheme.blue};\n    --nav-put-color:${newTheme.orange};\n    --nav-post-color:${newTheme.green};\n    --nav-delete-color:${newTheme.red};\n    --nav-head-color:${newTheme.yellow};\n\n    /* Primary Colors */\n    --primary-color:${newTheme.primaryColor};\n    --primary-color-invert:${newTheme.primaryColorInvert};\n    --primary-color-trans:${newTheme.primaryColorTrans};\n\n    /*Code Syntax Color*/\n    --code-bg:${newTheme.codeBg};\n    --code-fg:${newTheme.codeFg};\n    --inline-code-fg:${newTheme.inlineCodeFg};\n    --code-property-color:${newTheme.codePropertyColor};\n    --code-keyword-color:${newTheme.codeKeywordColor};\n    --code-operator-color:${newTheme.codeOperatorColor};\n  }\n  </style>`;\n}\n","import { html } from 'lit';\n\n// Templates\nimport expandedEndpointTemplate from '~/templates/expanded-endpoint-template';\nimport focusedEndpointTemplate from '~/templates/focused-endpoint-template';\nimport overviewTemplate from '~/templates/overview-template';\nimport endpointTemplate from '~/templates/endpoint-template';\nimport serverTemplate from '~/templates/server-template';\nimport securitySchemeTemplate, { recoverPersistedApiKeys } from '~/templates/security-scheme-template';\nimport headerTemplate from '~/templates/header-template';\nimport navbarTemplate from '~/templates/navbar-template';\nimport advancedSearchTemplate from '~/templates/advance-search-template';\nimport SetTheme from '~/utils/theme';\nimport { isValidHexColor } from '~/utils/color-utils';\n\nexport default function mainBodyTemplate(isMini = false, showExpandCollapse = true, showTags = true, pathsExpanded = false) {\n  if (!this.resolvedSpec) {\n    return '';\n  }\n  if (this.persistAuth === 'true') {\n    recoverPersistedApiKeys.call(this);\n  }\n  const newTheme = {\n    bg1: isValidHexColor(this.bgColor) ? this.bgColor : '',\n    fg1: isValidHexColor(this.textColor) ? this.textColor : '',\n    headerColor: isValidHexColor(this.headerColor) ? this.headerColor : '',\n    primaryColor: isValidHexColor(this.primaryColor) ? this.primaryColor : '',\n    navBgColor: isValidHexColor(this.navBgColor) ? this.navBgColor : '',\n    navTextColor: isValidHexColor(this.navTextColor) ? this.navTextColor : '',\n    navHoverBgColor: isValidHexColor(this.navHoverBgColor) ? this.navHoverBgColor : '',\n    navHoverTextColor: isValidHexColor(this.navHoverTextColor) ? this.navHoverTextColor : '',\n    navAccentColor: isValidHexColor(this.navAccentColor) ? this.navAccentColor : '',\n  };\n  /* eslint-disable indent */\n  if (this.resolvedSpec.specLoadError) {\n    if (isMini) {\n      return html`\n        ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n        <div class=\"jsn-schm-err\"> ${this.resolvedSpec.info.description} </div>\n      `;\n    }\n    return html`\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n      <!-- Header -->\n      ${headerTemplate.call(this)}\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot></slot>\n        <div class=\"jsn-schm-slot\">\n          <h1 class=\"red-text\"> ${this.resolvedSpec.info.title} </h1>\n          <div class=\"font-mono\"> ${this.resolvedSpec.info.description} </div>\n        </div>\n      </main>\n    `;\n  }\n  if (this.resolvedSpec.isSpecLoading) {\n    return html`\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot></slot>\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\n          <div class=\"loader\"></div>\n        </div>\n      </main>\n    `;\n  }\n\n  return html`\n    ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n\n    <!-- Header -->\n    ${this.showHeader === 'false' ? '' : headerTemplate.call(this)}\n\n    <!-- Advanced Search -->\n    ${this.allowAdvancedSearch === 'false' ? '' : advancedSearchTemplate.call(this)}\n\n    <div id='the-main-body' class=\"body ${this.cssClasses} ${this.allowTry === 'true' ? 'allow-try' : 'allow-no-try'}\" dir= ${this.pageDirection} >\n      <!-- Side Nav -->\n      ${((this.renderStyle === 'read' || this.renderStyle === 'focused')\n          && this.showSideNav === 'true'\n          && this.resolvedSpec\n        ) ? navbarTemplate.call(this) : ''\n      }\n\n      <!-- Main Content -->\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot name=\"back-to-top\"></slot>\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\n          ${this.loading === true\n            ? html`<div class=\"loader\"></div>`\n            : html`\n              ${this.loadFailed === true\n                ? html`<div class=\"jsn-schm-fail\"> Unable to load the Spec</div>`\n                : html`\n                  <div class=\"operations-root\" @click=\"${(e) => { this.handleHref(e); }}\">\n                  ${this.renderStyle === 'focused'\n                    ? html`${focusedEndpointTemplate.call(this)}`\n                    : html`\n                      ${this.showInfo === 'true' ? overviewTemplate.call(this) : ''}\n                      ${serverTemplate.call(this)}\n                      ${this.allowAuthentication === 'true' ? securitySchemeTemplate.call(this) : ''}\n                      <div id=\"operations-top\" class=\"observe-me\">\n                        <slot name=\"operations-top\"><div class=\"reference-heading\">Reference</div></slot>\n                      </div>\n                      ${this.renderStyle === 'read'\n                        ? expandedEndpointTemplate.call(this)\n                        : endpointTemplate.call(this, showExpandCollapse, showTags, pathsExpanded)\n                      }\n                    `\n                  }\n                  </div>\n                `\n              }`\n          }\n        </div>\n        <slot name=\"footer\"></slot>\n      </main>\n    </div>\n  `;\n}\n/* eslint-enable indent */\n","import { html } from 'lit';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'; // eslint-disable-line import/extensions\nimport { marked } from 'marked';\n\n// Templates\nimport overviewTemplate from '~/templates/overview-template';\nimport headerTemplate from '~/templates/header-template';\nimport { schemaInObjectNotation, generateExample } from '~/utils/schema-utils';\nimport '~/components/json-tree';\nimport '~/components/schema-tree';\nimport SetTheme from '~/utils/theme';\nimport { isValidHexColor } from '~/utils/color-utils';\n\n/* eslint-disable indent */\n// Json Schema Nav Template\nfunction jsonSchemaNavTemplate() {\n  return html`\n  <nav class='nav-bar' part=\"section-navbar\">\n    <slot name=\"nav-logo\" class=\"logo\"></slot>\n    <div class=\"jsn-nav\">\n      <input id=\"nav-bar-search\"\n        part = \"textbox textbox-nav-filter\"\n        class = \"jsn-input\"\n        type = \"text\"\n        placeholder = \"Filter\"\n        @change = \"${this.onSearchChange}\"\n        spellcheck = \"false\"\n      >\n      <div class=\"jsn-larrow\">&#x21a9;</div>\n    </div>\n    <nav class='nav-scroll request-flex-inline' part=\"section-navbar-scroll\">\n      ${this.resolvedSpec.schemaAndExamples.map((v) => html`\n        <div class='nav-bar-path' data-content-id='${v.elementId}' id='link-${v.elementId}'\n          @click = '${(e) => {\n            this.scrollToEventTarget(e, false);\n          }}'\n        >\n          ${v.name}\n        </div>`)\n      }\n    </nav>\n  </nav>\n  `;\n}\n\n// Json Schema Body Template\nfunction jsonSchemaBodyTemplate() {\n  return html`\n    ${this.showInfo === 'true' ? overviewTemplate.call(this) : ''}\n    <div class=\"jsn-schm-body\">\n    ${this.resolvedSpec.schemaAndExamples.map((jSchemaBody) => {\n      const examplesObj = generateExample(jSchemaBody.schema, 'json', jSchemaBody.examples, jSchemaBody.example, true, false, 'json', true);\n      jSchemaBody.selectedExample = examplesObj[0]?.exampleId;\n      return html`\n        <section id='${jSchemaBody.elementId}' class='json-schema-and-example regular-font jsn-schm-section'>\n          <div class=\"jsn-schm-section-hdr\">\n            <div class=\"jsn-schm-section-hdrname\">${jSchemaBody.name}</div>\n            <span class=\"json-schema-description m-markdown \">${unsafeHTML(marked(jSchemaBody.description || ''))}</span>\n          </div>\n          <div class=\"jsn-schm-tree\">\n            <div class=\"json-schema-def jsn-schm-def\">\n              <schema-tree\n                .data = \"${schemaInObjectNotation(jSchemaBody.schema, {})}\"\n                schema-expand-level = \"${this.schemaExpandLevel}\"\n                schema-description-expanded = \"${this.schemaDescriptionExpanded}\"\n                allow-schema-description-expand-toggle = \"${this.allowSchemaDescriptionExpandToggle}\",\n                schema-hide-read-only = \"false\"\n                schema-hide-write-only = \"false\"\n              > </schema-tree>\n            </div>\n            <div class=\"json-schema-example-panel jsn-schm-example\">\n              ${examplesObj.length > 1\n                ? html`<select class=\"jsn-schm-example-select\" @change='${(e) => this.onSelectExample(e, jSchemaBody)}'>\n                    ${examplesObj.map((v) => html`\n                      <option value=\"${v.exampleId}\" ?selected=${(v.exampleId === jSchemaBody.selectedExample)}>\n                        ${v.exampleSummary.length > 80 ? v.exampleId : v.exampleSummary}\n                      </option>`)\n                    }\n                  </select>`\n                : html`<div class=\"jsn-schm-example-summary\"> ${examplesObj[0].exampleSummary}</div>`\n              }\n              ${examplesObj.map((v) => html`\n                <json-tree\n                  .data = \"${v.exampleValue}\"\n                  data-example = \"${v.exampleId}\"\n                  class = \"example top-gap\"\n                  style = \"display: ${v.exampleId === jSchemaBody.selectedExample ? 'flex' : 'none'}\"\n                ></json-tree>`)\n              }\n            </div>\n          </div>\n        </section>`;\n      })\n    }\n    </div>\n  `;\n}\n/* eslint-enable indent */\n\n// Json Schema Root Template\nexport default function jsonSchemaViewerTemplate(isMini = false) {\n// export default function jsonSchemaViewerTemplate(isMini = false, showExpandCollapse = true, showTags = true, pathsExpanded = false) {\n  if (!this.resolvedSpec) {\n    return '';\n  }\n  const newTheme = {\n    bg1: isValidHexColor(this.bgColor) ? this.bgColor : '',\n    fg1: isValidHexColor(this.textColor) ? this.textColor : '',\n    headerColor: isValidHexColor(this.headerColor) ? this.headerColor : '',\n    primaryColor: isValidHexColor(this.primaryColor) ? this.primaryColor : '',\n    navBgColor: isValidHexColor(this.navBgColor) ? this.navBgColor : '',\n    navTextColor: isValidHexColor(this.navTextColor) ? this.navTextColor : '',\n    navHoverBgColor: isValidHexColor(this.navHoverBgColor) ? this.navHoverBgColor : '',\n    navHoverTextColor: isValidHexColor(this.navHoverTextColor) ? this.navHoverTextColor : '',\n    navAccentColor: isValidHexColor(this.navAccentColor) ? this.navAccentColor : '',\n  };\n  /* eslint-disable indent */\n  if (this.resolvedSpec.specLoadError) {\n    if (isMini) {\n      return html`\n        ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n        <div class=\"jsn-schm-err\"> ${this.resolvedSpec.info.description} </div>\n      `;\n    }\n    return html`\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n      <!-- Header -->\n      ${headerTemplate.call(this)}\n      <h1> Header </h1>\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot></slot>\n        <div class=\"jsn-schm-slot\">\n          <h1 class=\"red-text\"> ${this.resolvedSpec.info.title} </h1>\n          <div class=\"font-mono\"> ${this.resolvedSpec.info.description} </div>\n        </div>\n      </main>\n    `;\n  }\n  if (this.resolvedSpec.isSpecLoading) {\n    return html`\n      ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot></slot>\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\n          <div class=\"loader\"></div>\n        </div>\n      </main>\n    `;\n  }\n\n  return html`\n    ${this.theme === 'dark' ? SetTheme.call(this, 'dark', newTheme) : SetTheme.call(this, 'light', newTheme)}\n\n    <!-- Header -->\n    ${this.showHeader === 'false' ? '' : headerTemplate.call(this)}\n\n    <div id='the-main-body' class=\"body ${this.cssClasses}\" dir= ${this.pageDirection}>\n\n      <!-- Side Nav -->\n      ${jsonSchemaNavTemplate.call(this)}\n\n      <!-- Main Content -->\n      <main class=\"main-content regular-font\" part=\"section-main-content\">\n        <slot></slot>\n        <div class=\"main-content-inner--${this.renderStyle}-mode\">\n          ${this.loading === true\n            ? html`<div class=\"loader\"></div>`\n            : html`\n              ${this.loadFailed === true\n                ? html`<div class=\"jsn-schm-fail\"> Unable to load the Spec</div>`\n                : html`\n                  <div class=\"operations-root\" @click=\"${(e) => { this.handleHref(e); }}\">\n                    ${jsonSchemaBodyTemplate.call(this)}\n                  </div>\n                `\n              }`\n          }\n        </div>\n        <slot name=\"footer\"></slot>\n      </main>\n    </div>\n  `;\n}\n/* eslint-enable indent */\n"],"names":[],"sourceRoot":""}